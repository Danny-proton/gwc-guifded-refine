+ DATAPATH=/data/yyx/data/sceneflow
+ python -u main.py --dataset sceneflow --datapath /data/yyx/data/sceneflow --trainlist ./filenames/sceneflow_train_finalpass.txt --testlist ./filenames/sceneflow_test_finalpass.txt --epochs 20 --lrepochs 10,12,14,16:2 --model gwcnet-gc --logdir ./checkpoints/sceneflow/gwcnet-gc-color
creating new summary file
start at epoch 0
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 0.001
current rate is  0.001
/data/yyx/anaconda3/envs/yyx/lib/python3.5/site-packages/torch/nn/functional.py:1961: UserWarning: Default upsampling behavior when mode=trilinear is changed to align_corners=False since 0.4.0. Please specify align_corners=True if the old behavior is desired. See the documentation of nn.Upsample for details.
  "See the documentation of nn.Upsample for details.".format(mode))
/data/yyx/anaconda3/envs/yyx/lib/python3.5/site-packages/torch/nn/functional.py:1890: UserWarning: nn.functional.upsample is deprecated. Use nn.functional.interpolate instead.
  warnings.warn("nn.functional.upsample is deprecated. Use nn.functional.interpolate instead.")
/data/yyx/anaconda3/envs/yyx/lib/python3.5/site-packages/torch/nn/functional.py:52: UserWarning: size_average and reduce args will be deprecated, please use reduction='elementwise_mean' instead.
  warnings.warn(warning.format(ret))
Epoch 0/20, Iter 0/8863, train loss = 169.991, time = 15.231,losses averange=169.991
Epoch 0/20, Iter 100/8863, train loss = 14.746, time = 2.129,losses averange=36.617
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 0/20, Iter 200/8863, train loss = 18.646, time = 2.063,losses averange=30.475
Epoch 0/20, Iter 300/8863, train loss = 7.759, time = 2.037,losses averange=27.476
Epoch 0/20, Iter 400/8863, train loss = 14.872, time = 2.107,losses averange=25.949
Epoch 0/20, Iter 500/8863, train loss = 12.010, time = 2.089,losses averange=24.887
Epoch 0/20, Iter 600/8863, train loss = 9.518, time = 2.124,losses averange=24.076
Epoch 0/20, Iter 700/8863, train loss = 18.221, time = 1.892,losses averange=23.298
Epoch 0/20, Iter 800/8863, train loss = 16.106, time = 2.131,losses averange=22.595
Epoch 0/20, Iter 900/8863, train loss = 17.155, time = 1.977,losses averange=22.173
Epoch 0/20, Iter 1000/8863, train loss = 15.412, time = 2.018,losses averange=21.686
Epoch 0/20, Iter 1100/8863, train loss = 8.940, time = 2.141,losses averange=21.247
Epoch 0/20, Iter 1200/8863, train loss = 18.568, time = 2.055,losses averange=20.763
Epoch 0/20, Iter 1300/8863, train loss = 18.956, time = 2.073,losses averange=20.412
Epoch 0/20, Iter 1400/8863, train loss = 18.584, time = 2.031,losses averange=20.089
Epoch 0/20, Iter 1500/8863, train loss = 25.709, time = 2.020,losses averange=19.793
Epoch 0/20, Iter 1600/8863, train loss = 15.076, time = 2.077,losses averange=19.550
Epoch 0/20, Iter 1700/8863, train loss = 18.170, time = 2.039,losses averange=19.228
Epoch 0/20, Iter 1800/8863, train loss = 13.755, time = 1.912,losses averange=19.002
Epoch 0/20, Iter 1900/8863, train loss = 10.036, time = 2.078,losses averange=18.771
Epoch 0/20, Iter 2000/8863, train loss = 7.736, time = 2.017,losses averange=18.471
Epoch 0/20, Iter 2100/8863, train loss = 15.696, time = 1.998,losses averange=18.224
Epoch 0/20, Iter 2200/8863, train loss = 9.441, time = 2.084,losses averange=18.029
Epoch 0/20, Iter 2300/8863, train loss = 8.032, time = 2.130,losses averange=17.806
Epoch 0/20, Iter 2400/8863, train loss = 11.096, time = 2.009,losses averange=17.571
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 0/20, Iter 2500/8863, train loss = 6.574, time = 1.887,losses averange=17.406
Epoch 0/20, Iter 2600/8863, train loss = 38.719, time = 1.994,losses averange=17.253
Epoch 0/20, Iter 2700/8863, train loss = 9.998, time = 2.188,losses averange=17.100
Epoch 0/20, Iter 2800/8863, train loss = 16.308, time = 2.038,losses averange=16.966
Epoch 0/20, Iter 2900/8863, train loss = 21.203, time = 2.154,losses averange=16.801
Epoch 0/20, Iter 3000/8863, train loss = 7.152, time = 1.974,losses averange=16.670
Epoch 0/20, Iter 3100/8863, train loss = 16.996, time = 2.141,losses averange=16.571
Epoch 0/20, Iter 3200/8863, train loss = 20.174, time = 2.079,losses averange=16.457
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 0/20, Iter 3300/8863, train loss = 12.477, time = 1.805,losses averange=16.377
Epoch 0/20, Iter 3400/8863, train loss = 9.651, time = 2.065,losses averange=16.272
Epoch 0/20, Iter 3500/8863, train loss = 23.670, time = 2.034,losses averange=16.147
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 0/20, Iter 3600/8863, train loss = 24.419, time = 2.056,losses averange=16.048
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 0/20, Iter 3700/8863, train loss = 8.210, time = 2.160,losses averange=15.952
Epoch 0/20, Iter 3800/8863, train loss = 8.757, time = 1.871,losses averange=15.834
Epoch 0/20, Iter 3900/8863, train loss = 7.241, time = 2.113,losses averange=15.726
Epoch 0/20, Iter 4000/8863, train loss = 6.491, time = 2.260,losses averange=15.604
Epoch 0/20, Iter 4100/8863, train loss = 9.139, time = 2.151,losses averange=15.527
Epoch 0/20, Iter 4200/8863, train loss = 5.426, time = 1.961,losses averange=15.446
Epoch 0/20, Iter 4300/8863, train loss = 20.552, time = 2.083,losses averange=15.355
Epoch 0/20, Iter 4400/8863, train loss = 15.257, time = 2.056,losses averange=15.261
Epoch 0/20, Iter 4500/8863, train loss = 24.458, time = 2.044,losses averange=15.177
Epoch 0/20, Iter 4600/8863, train loss = 6.971, time = 1.974,losses averange=15.076
Epoch 0/20, Iter 4700/8863, train loss = 9.324, time = 1.980,losses averange=14.977
Epoch 0/20, Iter 4800/8863, train loss = 11.561, time = 1.925,losses averange=14.910
Epoch 0/20, Iter 4900/8863, train loss = 12.392, time = 2.019,losses averange=14.849
Epoch 0/20, Iter 5000/8863, train loss = 3.435, time = 2.092,losses averange=14.757
Epoch 0/20, Iter 5100/8863, train loss = 13.550, time = 2.044,losses averange=14.706
Epoch 0/20, Iter 5200/8863, train loss = 3.764, time = 2.026,losses averange=14.630
Epoch 0/20, Iter 5300/8863, train loss = 11.587, time = 1.878,losses averange=14.568
Epoch 0/20, Iter 5400/8863, train loss = 17.440, time = 2.106,losses averange=14.511
Epoch 0/20, Iter 5500/8863, train loss = 23.901, time = 1.882,losses averange=14.465
Epoch 0/20, Iter 5600/8863, train loss = 11.571, time = 2.068,losses averange=14.386
Epoch 0/20, Iter 5700/8863, train loss = 14.249, time = 2.126,losses averange=14.332
Epoch 0/20, Iter 5800/8863, train loss = 12.762, time = 2.139,losses averange=14.257
Epoch 0/20, Iter 5900/8863, train loss = 11.684, time = 2.162,losses averange=14.190
Epoch 0/20, Iter 6000/8863, train loss = 12.561, time = 2.047,losses averange=14.117
Epoch 0/20, Iter 6100/8863, train loss = 4.657, time = 2.078,losses averange=14.058
Epoch 0/20, Iter 6200/8863, train loss = 16.856, time = 2.217,losses averange=13.999
Epoch 0/20, Iter 6300/8863, train loss = 15.456, time = 1.924,losses averange=13.966
Epoch 0/20, Iter 6400/8863, train loss = 8.774, time = 1.976,losses averange=13.923
Epoch 0/20, Iter 6500/8863, train loss = 12.024, time = 2.031,losses averange=13.861
Epoch 0/20, Iter 6600/8863, train loss = 3.995, time = 1.921,losses averange=13.806
Epoch 0/20, Iter 6700/8863, train loss = 3.827, time = 2.036,losses averange=13.758
Epoch 0/20, Iter 6800/8863, train loss = 4.366, time = 1.945,losses averange=13.705
Epoch 0/20, Iter 6900/8863, train loss = 28.223, time = 1.973,losses averange=13.676
Epoch 0/20, Iter 7000/8863, train loss = 6.672, time = 1.979,losses averange=13.635
Epoch 0/20, Iter 7100/8863, train loss = 9.274, time = 2.120,losses averange=13.571
Epoch 0/20, Iter 7200/8863, train loss = 21.848, time = 2.090,losses averange=13.545
Epoch 0/20, Iter 7300/8863, train loss = 6.520, time = 1.985,losses averange=13.500
Epoch 0/20, Iter 7400/8863, train loss = 3.734, time = 2.140,losses averange=13.444
Epoch 0/20, Iter 7500/8863, train loss = 8.373, time = 2.122,losses averange=13.382
Epoch 0/20, Iter 7600/8863, train loss = 4.467, time = 2.004,losses averange=13.344
Epoch 0/20, Iter 7700/8863, train loss = 11.066, time = 2.032,losses averange=13.297
Epoch 0/20, Iter 7800/8863, train loss = 10.339, time = 2.190,losses averange=13.259
Epoch 0/20, Iter 7900/8863, train loss = 14.031, time = 2.206,losses averange=13.217
Epoch 0/20, Iter 8000/8863, train loss = 7.401, time = 2.082,losses averange=13.179
Epoch 0/20, Iter 8100/8863, train loss = 12.191, time = 2.173,losses averange=13.133
Epoch 0/20, Iter 8200/8863, train loss = 16.882, time = 2.090,losses averange=13.090
Epoch 0/20, Iter 8300/8863, train loss = 13.578, time = 2.096,losses averange=13.054
Epoch 0/20, Iter 8400/8863, train loss = 4.066, time = 1.911,losses averange=13.011
Epoch 0/20, Iter 8500/8863, train loss = 13.007, time = 2.107,losses averange=12.971
Epoch 0/20, Iter 8600/8863, train loss = 8.405, time = 2.049,losses averange=12.935
Epoch 0/20, Iter 8700/8863, train loss = 4.923, time = 1.867,losses averange=12.886
Epoch 0/20, Iter 8800/8863, train loss = 8.803, time = 2.097,losses averange=12.847
Epoch 0/20, Iter 8862/8863, train loss = 21.951, time = 1.085,losses averange=12.820
avg_train_loss 12.819553178386737
Epoch 0/20, Iter 0/4370, test loss = 2.705, time = 6.306280
Epoch 0/20, Iter 100/4370, test loss = 5.629, time = 2.628510
Epoch 0/20, Iter 200/4370, test loss = 5.146, time = 2.384874
Epoch 0/20, Iter 300/4370, test loss = 12.005, time = 2.579269
Epoch 0/20, Iter 400/4370, test loss = 8.580, time = 2.370596
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 0/20, Iter 500/4370, test loss = 5.334, time = 2.856593
Epoch 0/20, Iter 600/4370, test loss = 1.595, time = 2.484779
Epoch 0/20, Iter 700/4370, test loss = 18.068, time = 2.660271
Epoch 0/20, Iter 800/4370, test loss = 5.290, time = 2.583280
Epoch 0/20, Iter 900/4370, test loss = 2.078, time = 2.687855
Epoch 0/20, Iter 1000/4370, test loss = 1.863, time = 2.541067
Epoch 0/20, Iter 1100/4370, test loss = 5.098, time = 2.584009
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 0/20, Iter 1200/4370, test loss = 4.062, time = 2.585829
Epoch 0/20, Iter 1300/4370, test loss = 4.501, time = 2.477091
Epoch 0/20, Iter 1400/4370, test loss = 11.775, time = 2.804666
Epoch 0/20, Iter 1500/4370, test loss = 2.634, time = 2.701256
Epoch 0/20, Iter 1600/4370, test loss = 4.029, time = 2.497482
Epoch 0/20, Iter 1700/4370, test loss = 4.375, time = 2.548499
Epoch 0/20, Iter 1800/4370, test loss = 4.044, time = 2.229813
Epoch 0/20, Iter 1900/4370, test loss = 5.925, time = 2.821339
Epoch 0/20, Iter 2000/4370, test loss = 4.202, time = 2.912958
Epoch 0/20, Iter 2100/4370, test loss = 3.429, time = 2.984887
Epoch 0/20, Iter 2200/4370, test loss = 1.928, time = 2.380578
Epoch 0/20, Iter 2300/4370, test loss = 6.007, time = 2.635219
Epoch 0/20, Iter 2400/4370, test loss = 2.089, time = 2.469600
Epoch 0/20, Iter 2500/4370, test loss = 5.056, time = 2.784204
Epoch 0/20, Iter 2600/4370, test loss = 2.691, time = 2.666491
Epoch 0/20, Iter 2700/4370, test loss = 14.643, time = 2.157745
Epoch 0/20, Iter 2800/4370, test loss = 5.316, time = 2.829751
Epoch 0/20, Iter 2900/4370, test loss = 4.750, time = 3.215669
Epoch 0/20, Iter 3000/4370, test loss = 3.721, time = 2.568739
Epoch 0/20, Iter 3100/4370, test loss = 3.096, time = 2.524057
Epoch 0/20, Iter 3200/4370, test loss = 3.816, time = 2.614597
Epoch 0/20, Iter 3300/4370, test loss = 2.204, time = 2.625037
Epoch 0/20, Iter 3400/4370, test loss = 2.895, time = 2.577919
Epoch 0/20, Iter 3500/4370, test loss = 4.128, time = 2.834254
Epoch 0/20, Iter 3600/4370, test loss = 8.841, time = 2.749012
Epoch 0/20, Iter 3700/4370, test loss = 7.665, time = 2.878654
Epoch 0/20, Iter 3800/4370, test loss = 6.678, time = 2.907959
Epoch 0/20, Iter 3900/4370, test loss = 6.421, time = 2.442829
Epoch 0/20, Iter 4000/4370, test loss = 4.778, time = 2.626893
Epoch 0/20, Iter 4100/4370, test loss = 5.399, time = 2.873081
Epoch 0/20, Iter 4200/4370, test loss = 2.644, time = 2.661757
Epoch 0/20, Iter 4300/4370, test loss = 3.807, time = 2.438116
Epoch 0/20, Iter 4369/4370, test loss = 9.280, time = 0.555645
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.11784514997163, 0.08540070005063846, 0.0763868477523702, 0.07298332149934374], 'EPE': [3.340019273962527, 2.3578965110486925, 2.082587184288136, 2.004232870679971], 'Thres3': [0.125890433838169, 0.09394430600477541, 0.08510980545617726, 0.08188173038335154], 'Thres1': [0.2284189705462014, 0.19619230859629486, 0.18619618538758576, 0.1825469979773397], 'Thres2': [0.1506927585885679, 0.11977581398847174, 0.11056581550816956, 0.10696006357878685], 'D1': [0.15029088799123497, 0.11755566400575965, 0.10730995053438218, 0.10291455710472995]}
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 0.001
current rate is  0.001
Epoch 1/20, Iter 0/8863, train loss = 9.048, time = 1.663,losses averange=9.048
Epoch 1/20, Iter 100/8863, train loss = 63.369, time = 1.061,losses averange=8.505
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 1/20, Iter 200/8863, train loss = 5.109, time = 1.097,losses averange=9.382
Epoch 1/20, Iter 300/8863, train loss = 7.397, time = 1.048,losses averange=8.993
Epoch 1/20, Iter 400/8863, train loss = 9.465, time = 1.090,losses averange=9.196
Epoch 1/20, Iter 500/8863, train loss = 7.542, time = 1.061,losses averange=9.189
Epoch 1/20, Iter 600/8863, train loss = 13.812, time = 1.070,losses averange=9.387
Epoch 1/20, Iter 700/8863, train loss = 8.467, time = 1.043,losses averange=9.479
Epoch 1/20, Iter 800/8863, train loss = 8.392, time = 1.063,losses averange=9.554
Epoch 1/20, Iter 900/8863, train loss = 10.285, time = 1.091,losses averange=9.604
Epoch 1/20, Iter 1000/8863, train loss = 6.274, time = 1.060,losses averange=9.546
Epoch 1/20, Iter 1100/8863, train loss = 9.410, time = 1.094,losses averange=9.482
Epoch 1/20, Iter 1200/8863, train loss = 4.879, time = 1.081,losses averange=9.395
Epoch 1/20, Iter 1300/8863, train loss = 2.455, time = 1.097,losses averange=9.276
Epoch 1/20, Iter 1400/8863, train loss = 6.292, time = 1.081,losses averange=9.229
Epoch 1/20, Iter 1500/8863, train loss = 9.328, time = 1.059,losses averange=9.181
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 1/20, Iter 1600/8863, train loss = 8.709, time = 1.094,losses averange=9.148
Epoch 1/20, Iter 1700/8863, train loss = 7.493, time = 1.072,losses averange=9.069
Epoch 1/20, Iter 1800/8863, train loss = 6.905, time = 1.103,losses averange=9.059
Epoch 1/20, Iter 1900/8863, train loss = 15.130, time = 1.035,losses averange=9.049
Epoch 1/20, Iter 2000/8863, train loss = 10.550, time = 1.070,losses averange=8.990
Epoch 1/20, Iter 2100/8863, train loss = 2.716, time = 1.033,losses averange=8.956
Epoch 1/20, Iter 2200/8863, train loss = 15.757, time = 1.129,losses averange=8.958
Epoch 1/20, Iter 2300/8863, train loss = 22.972, time = 1.049,losses averange=8.955
Epoch 1/20, Iter 2400/8863, train loss = 25.137, time = 1.021,losses averange=8.919
Epoch 1/20, Iter 2500/8863, train loss = 7.101, time = 1.043,losses averange=8.874
Epoch 1/20, Iter 2600/8863, train loss = 14.838, time = 1.071,losses averange=8.868
Epoch 1/20, Iter 2700/8863, train loss = 4.979, time = 1.068,losses averange=8.875
Epoch 1/20, Iter 2800/8863, train loss = 7.309, time = 1.035,losses averange=8.844
Epoch 1/20, Iter 2900/8863, train loss = 5.273, time = 1.079,losses averange=8.811
Epoch 1/20, Iter 3000/8863, train loss = 3.470, time = 1.077,losses averange=8.789
Epoch 1/20, Iter 3100/8863, train loss = 7.684, time = 1.065,losses averange=8.811
Epoch 1/20, Iter 3200/8863, train loss = 3.381, time = 1.053,losses averange=8.810
Epoch 1/20, Iter 3300/8863, train loss = 10.341, time = 1.087,losses averange=8.811
Epoch 1/20, Iter 3400/8863, train loss = 10.128, time = 1.068,losses averange=8.774
Epoch 1/20, Iter 3500/8863, train loss = 3.219, time = 1.048,losses averange=8.749
Epoch 1/20, Iter 3600/8863, train loss = 12.531, time = 1.029,losses averange=8.717
Epoch 1/20, Iter 3700/8863, train loss = 4.607, time = 1.023,losses averange=8.710
Epoch 1/20, Iter 3800/8863, train loss = 18.746, time = 1.064,losses averange=8.715
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 1/20, Iter 3900/8863, train loss = 3.767, time = 1.043,losses averange=8.706
Epoch 1/20, Iter 4000/8863, train loss = 8.649, time = 1.027,losses averange=8.684
Epoch 1/20, Iter 4100/8863, train loss = 5.917, time = 1.061,losses averange=8.682
Epoch 1/20, Iter 4200/8863, train loss = 6.430, time = 1.047,losses averange=8.658
Epoch 1/20, Iter 4300/8863, train loss = 3.114, time = 1.048,losses averange=8.651
Epoch 1/20, Iter 4400/8863, train loss = 8.560, time = 1.073,losses averange=8.626
Epoch 1/20, Iter 4500/8863, train loss = 10.369, time = 1.056,losses averange=8.623
Epoch 1/20, Iter 4600/8863, train loss = 4.481, time = 1.065,losses averange=8.601
Epoch 1/20, Iter 4700/8863, train loss = 9.682, time = 1.087,losses averange=8.587
Epoch 1/20, Iter 4800/8863, train loss = 4.802, time = 1.080,losses averange=8.565
Epoch 1/20, Iter 4900/8863, train loss = 9.137, time = 1.046,losses averange=8.545
Epoch 1/20, Iter 5000/8863, train loss = 5.564, time = 1.036,losses averange=8.526
Epoch 1/20, Iter 5100/8863, train loss = 8.222, time = 1.071,losses averange=8.504
Epoch 1/20, Iter 5200/8863, train loss = 5.965, time = 1.066,losses averange=8.489
Epoch 1/20, Iter 5300/8863, train loss = 9.720, time = 1.097,losses averange=8.481
Epoch 1/20, Iter 5400/8863, train loss = 23.605, time = 1.044,losses averange=8.494
Epoch 1/20, Iter 5500/8863, train loss = 11.484, time = 1.028,losses averange=8.502
Epoch 1/20, Iter 5600/8863, train loss = 2.397, time = 1.063,losses averange=8.489
Epoch 1/20, Iter 5700/8863, train loss = 3.464, time = 1.096,losses averange=8.487
Epoch 1/20, Iter 5800/8863, train loss = 5.167, time = 1.046,losses averange=8.485
Epoch 1/20, Iter 5900/8863, train loss = 3.146, time = 1.150,losses averange=8.480
Epoch 1/20, Iter 6000/8863, train loss = 10.759, time = 1.089,losses averange=8.470
Epoch 1/20, Iter 6100/8863, train loss = 5.503, time = 1.075,losses averange=8.458
Epoch 1/20, Iter 6200/8863, train loss = 3.933, time = 1.075,losses averange=8.452
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 1/20, Iter 6300/8863, train loss = 4.564, time = 1.063,losses averange=8.450
Epoch 1/20, Iter 6400/8863, train loss = 7.116, time = 1.058,losses averange=8.441
Epoch 1/20, Iter 6500/8863, train loss = 2.145, time = 1.049,losses averange=8.422
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 1/20, Iter 6600/8863, train loss = 5.890, time = 1.060,losses averange=8.410
Epoch 1/20, Iter 6700/8863, train loss = 6.588, time = 1.083,losses averange=8.403
Epoch 1/20, Iter 6800/8863, train loss = 5.213, time = 1.072,losses averange=8.388
Epoch 1/20, Iter 6900/8863, train loss = 13.372, time = 1.081,losses averange=8.376
Epoch 1/20, Iter 7000/8863, train loss = 7.366, time = 1.117,losses averange=8.367
Epoch 1/20, Iter 7100/8863, train loss = 2.947, time = 1.025,losses averange=8.368
Epoch 1/20, Iter 7200/8863, train loss = 6.617, time = 1.048,losses averange=8.354
Epoch 1/20, Iter 7300/8863, train loss = 10.536, time = 1.065,losses averange=8.346
Epoch 1/20, Iter 7400/8863, train loss = 3.893, time = 1.068,losses averange=8.332
Epoch 1/20, Iter 7500/8863, train loss = 13.653, time = 1.041,losses averange=8.314
Epoch 1/20, Iter 7600/8863, train loss = 9.622, time = 1.062,losses averange=8.294
Epoch 1/20, Iter 7700/8863, train loss = 2.020, time = 1.036,losses averange=8.272
Epoch 1/20, Iter 7800/8863, train loss = 5.093, time = 1.077,losses averange=8.256
Epoch 1/20, Iter 7900/8863, train loss = 5.105, time = 1.066,losses averange=8.244
Epoch 1/20, Iter 8000/8863, train loss = 4.064, time = 1.102,losses averange=8.232
Epoch 1/20, Iter 8100/8863, train loss = 2.087, time = 1.132,losses averange=8.230
Epoch 1/20, Iter 8200/8863, train loss = 6.350, time = 1.087,losses averange=8.219
Epoch 1/20, Iter 8300/8863, train loss = 10.659, time = 1.070,losses averange=8.220
Epoch 1/20, Iter 8400/8863, train loss = 4.288, time = 1.051,losses averange=8.221
Epoch 1/20, Iter 8500/8863, train loss = 4.566, time = 1.051,losses averange=8.218
Epoch 1/20, Iter 8600/8863, train loss = 5.856, time = 1.054,losses averange=8.212
Epoch 1/20, Iter 8700/8863, train loss = 4.214, time = 1.049,losses averange=8.204
Epoch 1/20, Iter 8800/8863, train loss = 9.673, time = 1.048,losses averange=8.185
Epoch 1/20, Iter 8862/8863, train loss = 10.369, time = 1.101,losses averange=8.183
avg_train_loss 8.182920739395978
Epoch 1/20, Iter 0/4370, test loss = 2.212, time = 0.557503
Epoch 1/20, Iter 100/4370, test loss = 5.084, time = 0.552874
Epoch 1/20, Iter 200/4370, test loss = 5.050, time = 0.550735
Epoch 1/20, Iter 300/4370, test loss = 8.248, time = 0.546871
Epoch 1/20, Iter 400/4370, test loss = 6.673, time = 0.547113
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 1/20, Iter 500/4370, test loss = 4.067, time = 0.548267
Epoch 1/20, Iter 600/4370, test loss = 1.339, time = 0.553954
Epoch 1/20, Iter 700/4370, test loss = 19.847, time = 0.554099
Epoch 1/20, Iter 800/4370, test loss = 3.771, time = 0.550149
Epoch 1/20, Iter 900/4370, test loss = 1.445, time = 0.549759
Epoch 1/20, Iter 1000/4370, test loss = 1.510, time = 0.553785
Epoch 1/20, Iter 1100/4370, test loss = 2.323, time = 0.547606
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 1/20, Iter 1200/4370, test loss = 2.999, time = 0.551952
Epoch 1/20, Iter 1300/4370, test loss = 5.492, time = 0.548131
Epoch 1/20, Iter 1400/4370, test loss = 8.155, time = 0.554214
Epoch 1/20, Iter 1500/4370, test loss = 1.892, time = 0.547273
Epoch 1/20, Iter 1600/4370, test loss = 4.158, time = 0.554861
Epoch 1/20, Iter 1700/4370, test loss = 3.545, time = 0.553535
Epoch 1/20, Iter 1800/4370, test loss = 2.491, time = 0.548792
Epoch 1/20, Iter 1900/4370, test loss = 4.243, time = 0.553511
Epoch 1/20, Iter 2000/4370, test loss = 3.292, time = 0.548831
Epoch 1/20, Iter 2100/4370, test loss = 2.250, time = 0.550293
Epoch 1/20, Iter 2200/4370, test loss = 1.181, time = 0.551699
Epoch 1/20, Iter 2300/4370, test loss = 4.306, time = 0.548912
Epoch 1/20, Iter 2400/4370, test loss = 1.721, time = 0.546403
Epoch 1/20, Iter 2500/4370, test loss = 3.725, time = 0.545058
Epoch 1/20, Iter 2600/4370, test loss = 1.870, time = 0.546806
Epoch 1/20, Iter 2700/4370, test loss = 12.496, time = 0.542782
Epoch 1/20, Iter 2800/4370, test loss = 2.795, time = 0.548081
Epoch 1/20, Iter 2900/4370, test loss = 3.357, time = 0.548912
Epoch 1/20, Iter 3000/4370, test loss = 3.035, time = 0.552725
Epoch 1/20, Iter 3100/4370, test loss = 2.036, time = 0.545175
Epoch 1/20, Iter 3200/4370, test loss = 3.398, time = 0.553612
Epoch 1/20, Iter 3300/4370, test loss = 1.687, time = 0.548011
Epoch 1/20, Iter 3400/4370, test loss = 2.008, time = 0.552167
Epoch 1/20, Iter 3500/4370, test loss = 3.160, time = 0.551733
Epoch 1/20, Iter 3600/4370, test loss = 5.592, time = 0.552611
Epoch 1/20, Iter 3700/4370, test loss = 5.682, time = 0.545268
Epoch 1/20, Iter 3800/4370, test loss = 4.858, time = 0.552114
Epoch 1/20, Iter 3900/4370, test loss = 4.510, time = 0.549325
Epoch 1/20, Iter 4000/4370, test loss = 3.038, time = 0.555182
Epoch 1/20, Iter 4100/4370, test loss = 3.145, time = 0.554289
Epoch 1/20, Iter 4200/4370, test loss = 1.822, time = 0.549638
Epoch 1/20, Iter 4300/4370, test loss = 2.591, time = 0.551252
Epoch 1/20, Iter 4369/4370, test loss = 6.068, time = 0.553500
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.09754453812207967, 0.06781024587845741, 0.05890012195544825, 0.055485256123345865], 'EPE': [2.5718788397530394, 1.822982745039654, 1.6012022226639688, 1.5447227214648467], 'Thres3': [0.10545918291234316, 0.07601610653494534, 0.06721429954351137, 0.0638501667602998], 'Thres1': [0.1969385259620658, 0.16565939150239156, 0.1539901161250963, 0.1501801264265582], 'Thres2': [0.12789885429985123, 0.09829046571375781, 0.08865182768655791, 0.08466990899072972], 'D1': [0.12427752054972016, 0.0931829773603557, 0.08304664428522747, 0.07851715981725868]}
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 0.001
current rate is  0.001
Epoch 2/20, Iter 0/8863, train loss = 12.214, time = 1.113,losses averange=12.214
Epoch 2/20, Iter 100/8863, train loss = 3.331, time = 1.365,losses averange=7.970
Epoch 2/20, Iter 200/8863, train loss = 4.677, time = 1.037,losses averange=7.669
Epoch 2/20, Iter 300/8863, train loss = 5.374, time = 1.071,losses averange=7.765
Epoch 2/20, Iter 400/8863, train loss = 12.880, time = 1.042,losses averange=7.395
Epoch 2/20, Iter 500/8863, train loss = 13.787, time = 1.084,losses averange=7.285
Epoch 2/20, Iter 600/8863, train loss = 5.091, time = 1.047,losses averange=7.283
Epoch 2/20, Iter 700/8863, train loss = 2.532, time = 1.077,losses averange=7.229
Epoch 2/20, Iter 800/8863, train loss = 4.468, time = 1.072,losses averange=7.168
Epoch 2/20, Iter 900/8863, train loss = 3.274, time = 1.064,losses averange=7.203
Epoch 2/20, Iter 1000/8863, train loss = 5.123, time = 1.029,losses averange=7.119
Epoch 2/20, Iter 1100/8863, train loss = 9.466, time = 1.068,losses averange=7.271
Epoch 2/20, Iter 1200/8863, train loss = 3.276, time = 1.039,losses averange=7.236
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 2/20, Iter 1300/8863, train loss = 17.753, time = 1.048,losses averange=7.197
Epoch 2/20, Iter 1400/8863, train loss = 9.850, time = 1.097,losses averange=7.273
Epoch 2/20, Iter 1500/8863, train loss = 12.490, time = 1.048,losses averange=7.277
Epoch 2/20, Iter 1600/8863, train loss = 3.194, time = 1.053,losses averange=7.279
Epoch 2/20, Iter 1700/8863, train loss = 4.689, time = 1.041,losses averange=7.197
Epoch 2/20, Iter 1800/8863, train loss = 1.907, time = 1.074,losses averange=7.168
Epoch 2/20, Iter 1900/8863, train loss = 10.113, time = 1.078,losses averange=7.174
Epoch 2/20, Iter 2000/8863, train loss = 13.640, time = 1.077,losses averange=7.166
Epoch 2/20, Iter 2100/8863, train loss = 6.008, time = 1.041,losses averange=7.171
Epoch 2/20, Iter 2200/8863, train loss = 9.341, time = 1.080,losses averange=7.208
Epoch 2/20, Iter 2300/8863, train loss = 3.824, time = 1.073,losses averange=7.191
Epoch 2/20, Iter 2400/8863, train loss = 4.278, time = 1.044,losses averange=7.156
Epoch 2/20, Iter 2500/8863, train loss = 6.542, time = 1.052,losses averange=7.155
Epoch 2/20, Iter 2600/8863, train loss = 14.607, time = 1.036,losses averange=7.131
Epoch 2/20, Iter 2700/8863, train loss = 4.727, time = 1.041,losses averange=7.122
Epoch 2/20, Iter 2800/8863, train loss = 3.286, time = 1.026,losses averange=7.134
Epoch 2/20, Iter 2900/8863, train loss = 14.583, time = 1.024,losses averange=7.107
Epoch 2/20, Iter 3000/8863, train loss = 6.165, time = 1.050,losses averange=7.133
Epoch 2/20, Iter 3100/8863, train loss = 4.160, time = 1.084,losses averange=7.136
Epoch 2/20, Iter 3200/8863, train loss = 2.089, time = 1.076,losses averange=7.135
Epoch 2/20, Iter 3300/8863, train loss = 9.700, time = 1.160,losses averange=7.123
Epoch 2/20, Iter 3400/8863, train loss = 4.479, time = 1.074,losses averange=7.102
Epoch 2/20, Iter 3500/8863, train loss = 18.691, time = 1.054,losses averange=7.091
Epoch 2/20, Iter 3600/8863, train loss = 4.079, time = 1.033,losses averange=7.055
Epoch 2/20, Iter 3700/8863, train loss = 3.825, time = 1.078,losses averange=7.054
Epoch 2/20, Iter 3800/8863, train loss = 1.854, time = 1.112,losses averange=7.035
Epoch 2/20, Iter 3900/8863, train loss = 5.075, time = 1.082,losses averange=7.028
Epoch 2/20, Iter 4000/8863, train loss = 7.573, time = 1.054,losses averange=7.037
Epoch 2/20, Iter 4100/8863, train loss = 7.078, time = 1.037,losses averange=7.039
Epoch 2/20, Iter 4200/8863, train loss = 2.889, time = 1.087,losses averange=7.036
Epoch 2/20, Iter 4300/8863, train loss = 8.089, time = 1.079,losses averange=7.027
Epoch 2/20, Iter 4400/8863, train loss = 4.134, time = 1.049,losses averange=7.020
Epoch 2/20, Iter 4500/8863, train loss = 4.153, time = 1.095,losses averange=6.991
Epoch 2/20, Iter 4600/8863, train loss = 3.066, time = 1.029,losses averange=6.981
Epoch 2/20, Iter 4700/8863, train loss = 11.827, time = 1.028,losses averange=6.983
Epoch 2/20, Iter 4800/8863, train loss = 7.653, time = 1.023,losses averange=6.983
Epoch 2/20, Iter 4900/8863, train loss = 14.743, time = 1.054,losses averange=6.977
Epoch 2/20, Iter 5000/8863, train loss = 5.536, time = 1.083,losses averange=6.967
Epoch 2/20, Iter 5100/8863, train loss = 5.968, time = 1.083,losses averange=6.977
Epoch 2/20, Iter 5200/8863, train loss = 5.318, time = 1.070,losses averange=6.985
Epoch 2/20, Iter 5300/8863, train loss = 4.258, time = 1.077,losses averange=6.997
Epoch 2/20, Iter 5400/8863, train loss = 7.880, time = 1.072,losses averange=6.976
Epoch 2/20, Iter 5500/8863, train loss = 7.892, time = 1.076,losses averange=6.981
Epoch 2/20, Iter 5600/8863, train loss = 3.998, time = 1.077,losses averange=6.968
Epoch 2/20, Iter 5700/8863, train loss = 6.083, time = 1.087,losses averange=6.966
Epoch 2/20, Iter 5800/8863, train loss = 10.648, time = 1.047,losses averange=6.952
Epoch 2/20, Iter 5900/8863, train loss = 8.604, time = 1.102,losses averange=6.964
Epoch 2/20, Iter 6000/8863, train loss = 10.043, time = 1.051,losses averange=6.951
Epoch 2/20, Iter 6100/8863, train loss = 8.360, time = 1.085,losses averange=6.944
Epoch 2/20, Iter 6200/8863, train loss = 9.892, time = 1.050,losses averange=6.932
Epoch 2/20, Iter 6300/8863, train loss = 6.763, time = 1.049,losses averange=6.936
Epoch 2/20, Iter 6400/8863, train loss = 2.899, time = 1.057,losses averange=6.920
Epoch 2/20, Iter 6500/8863, train loss = 2.083, time = 1.059,losses averange=6.908
Epoch 2/20, Iter 6600/8863, train loss = 6.009, time = 1.081,losses averange=6.907
Epoch 2/20, Iter 6700/8863, train loss = 3.834, time = 1.044,losses averange=6.901
Epoch 2/20, Iter 6800/8863, train loss = 5.113, time = 1.042,losses averange=6.903
Epoch 2/20, Iter 6900/8863, train loss = 15.452, time = 1.077,losses averange=6.889
Epoch 2/20, Iter 7000/8863, train loss = 5.250, time = 1.137,losses averange=6.886
Epoch 2/20, Iter 7100/8863, train loss = 3.479, time = 1.028,losses averange=6.878
Epoch 2/20, Iter 7200/8863, train loss = 8.177, time = 1.049,losses averange=6.880
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 2/20, Iter 7300/8863, train loss = 9.079, time = 1.094,losses averange=6.873
Epoch 2/20, Iter 7400/8863, train loss = 3.464, time = 1.032,losses averange=6.868
Epoch 2/20, Iter 7500/8863, train loss = 8.372, time = 1.048,losses averange=6.877
Epoch 2/20, Iter 7600/8863, train loss = 7.796, time = 1.063,losses averange=6.873
Epoch 2/20, Iter 7700/8863, train loss = 4.728, time = 1.031,losses averange=6.866
Epoch 2/20, Iter 7800/8863, train loss = 12.885, time = 1.037,losses averange=6.865
Epoch 2/20, Iter 7900/8863, train loss = 4.526, time = 1.081,losses averange=6.862
Epoch 2/20, Iter 8000/8863, train loss = 4.087, time = 1.058,losses averange=6.864
Epoch 2/20, Iter 8100/8863, train loss = 2.910, time = 1.097,losses averange=6.858
Epoch 2/20, Iter 8200/8863, train loss = 4.012, time = 1.055,losses averange=6.859
Epoch 2/20, Iter 8300/8863, train loss = 14.752, time = 1.088,losses averange=6.853
Epoch 2/20, Iter 8400/8863, train loss = 3.484, time = 1.050,losses averange=6.852
Epoch 2/20, Iter 8500/8863, train loss = 5.571, time = 1.091,losses averange=6.849
Epoch 2/20, Iter 8600/8863, train loss = 19.588, time = 1.047,losses averange=6.839
Epoch 2/20, Iter 8700/8863, train loss = 5.211, time = 1.070,losses averange=6.840
Epoch 2/20, Iter 8800/8863, train loss = 4.415, time = 1.055,losses averange=6.839
Epoch 2/20, Iter 8862/8863, train loss = 12.762, time = 1.146,losses averange=6.841
avg_train_loss 6.840693757151503
Epoch 2/20, Iter 0/4370, test loss = 1.706, time = 2.926553
Epoch 2/20, Iter 100/4370, test loss = 4.678, time = 2.615378
Epoch 2/20, Iter 200/4370, test loss = 3.886, time = 2.684434
Epoch 2/20, Iter 300/4370, test loss = 10.291, time = 2.741253
Epoch 2/20, Iter 400/4370, test loss = 5.941, time = 2.609893
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 2/20, Iter 500/4370, test loss = 2.921, time = 2.890358
Epoch 2/20, Iter 600/4370, test loss = 1.130, time = 2.833176
Epoch 2/20, Iter 700/4370, test loss = 10.797, time = 2.540619
Epoch 2/20, Iter 800/4370, test loss = 3.591, time = 2.669289
Epoch 2/20, Iter 900/4370, test loss = 1.138, time = 2.739300
Epoch 2/20, Iter 1000/4370, test loss = 1.151, time = 2.383717
Epoch 2/20, Iter 1100/4370, test loss = 2.109, time = 2.600395
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 2/20, Iter 1200/4370, test loss = 2.630, time = 2.565031
Epoch 2/20, Iter 1300/4370, test loss = 4.459, time = 2.434246
Epoch 2/20, Iter 1400/4370, test loss = 7.173, time = 2.817155
Epoch 2/20, Iter 1500/4370, test loss = 1.703, time = 2.677991
Epoch 2/20, Iter 1600/4370, test loss = 3.679, time = 2.398843
Epoch 2/20, Iter 1700/4370, test loss = 2.804, time = 2.727317
Epoch 2/20, Iter 1800/4370, test loss = 1.978, time = 2.774754
Epoch 2/20, Iter 1900/4370, test loss = 3.802, time = 3.316575
Epoch 2/20, Iter 2000/4370, test loss = 3.000, time = 3.014910
Epoch 2/20, Iter 2100/4370, test loss = 2.061, time = 2.803102
Epoch 2/20, Iter 2200/4370, test loss = 1.133, time = 3.051910
Epoch 2/20, Iter 2300/4370, test loss = 3.662, time = 3.089038
Epoch 2/20, Iter 2400/4370, test loss = 1.560, time = 2.757347
Epoch 2/20, Iter 2500/4370, test loss = 2.880, time = 3.087782
Epoch 2/20, Iter 2600/4370, test loss = 1.850, time = 2.993335
Epoch 2/20, Iter 2700/4370, test loss = 8.386, time = 2.764513
Epoch 2/20, Iter 2800/4370, test loss = 2.433, time = 2.890100
Epoch 2/20, Iter 2900/4370, test loss = 2.916, time = 3.056763
Epoch 2/20, Iter 3000/4370, test loss = 2.467, time = 2.639440
Epoch 2/20, Iter 3100/4370, test loss = 1.795, time = 2.645235
Epoch 2/20, Iter 3200/4370, test loss = 2.779, time = 2.840861
Epoch 2/20, Iter 3300/4370, test loss = 1.440, time = 2.577169
Epoch 2/20, Iter 3400/4370, test loss = 1.676, time = 2.563927
Epoch 2/20, Iter 3500/4370, test loss = 2.654, time = 2.968794
Epoch 2/20, Iter 3600/4370, test loss = 3.767, time = 2.822867
Epoch 2/20, Iter 3700/4370, test loss = 4.809, time = 2.698533
Epoch 2/20, Iter 3800/4370, test loss = 3.518, time = 2.930442
Epoch 2/20, Iter 3900/4370, test loss = 3.999, time = 2.991102
Epoch 2/20, Iter 4000/4370, test loss = 2.324, time = 2.761996
Epoch 2/20, Iter 4100/4370, test loss = 2.707, time = 2.608633
Epoch 2/20, Iter 4200/4370, test loss = 1.602, time = 2.735534
Epoch 2/20, Iter 4300/4370, test loss = 2.244, time = 2.504473
Epoch 2/20, Iter 4369/4370, test loss = 5.576, time = 0.552557
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.08827560201896785, 0.05974099608798867, 0.051587091188651915, 0.04845754394043467], 'EPE': [2.2468892817025328, 1.5879807044153083, 1.386774874524612, 1.3223257921653153], 'Thres3': [0.09573198703695217, 0.06732442759497419, 0.05920724499335585, 0.05604981541499342], 'Thres1': [0.17865489356015177, 0.14993861278847234, 0.13732514612726202, 0.1321504381602498], 'Thres2': [0.11640414174590728, 0.08796891669467842, 0.07855411958188091, 0.07483147876486353], 'D1': [0.11251688271897335, 0.08275863426040594, 0.07261763800647392, 0.06838311592518678]}
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 0.001
current rate is  0.001
Epoch 3/20, Iter 0/8863, train loss = 2.486, time = 1.083,losses averange=2.486
Epoch 3/20, Iter 100/8863, train loss = 7.535, time = 1.017,losses averange=6.902
Epoch 3/20, Iter 200/8863, train loss = 11.177, time = 1.086,losses averange=6.586
Epoch 3/20, Iter 300/8863, train loss = 4.629, time = 1.058,losses averange=6.400
Epoch 3/20, Iter 400/8863, train loss = 3.622, time = 1.063,losses averange=6.291
Epoch 3/20, Iter 500/8863, train loss = 6.001, time = 1.049,losses averange=6.353
Epoch 3/20, Iter 600/8863, train loss = 7.722, time = 1.085,losses averange=6.276
Epoch 3/20, Iter 700/8863, train loss = 9.611, time = 1.034,losses averange=6.224
Epoch 3/20, Iter 800/8863, train loss = 2.189, time = 1.083,losses averange=6.233
Epoch 3/20, Iter 900/8863, train loss = 9.088, time = 1.063,losses averange=6.174
Epoch 3/20, Iter 1000/8863, train loss = 3.678, time = 1.025,losses averange=6.147
Epoch 3/20, Iter 1100/8863, train loss = 6.645, time = 1.118,losses averange=6.130
Epoch 3/20, Iter 1200/8863, train loss = 9.609, time = 1.105,losses averange=6.083
Epoch 3/20, Iter 1300/8863, train loss = 5.185, time = 1.076,losses averange=6.130
Epoch 3/20, Iter 1400/8863, train loss = 2.185, time = 1.029,losses averange=6.183
Epoch 3/20, Iter 1500/8863, train loss = 4.754, time = 1.060,losses averange=6.157
Epoch 3/20, Iter 1600/8863, train loss = 9.639, time = 1.040,losses averange=6.194
Epoch 3/20, Iter 1700/8863, train loss = 5.969, time = 1.077,losses averange=6.208
Epoch 3/20, Iter 1800/8863, train loss = 14.085, time = 1.047,losses averange=6.219
Epoch 3/20, Iter 1900/8863, train loss = 7.284, time = 1.034,losses averange=6.251
Epoch 3/20, Iter 2000/8863, train loss = 2.815, time = 1.073,losses averange=6.257
Epoch 3/20, Iter 2100/8863, train loss = 6.671, time = 1.055,losses averange=6.302
Epoch 3/20, Iter 2200/8863, train loss = 5.443, time = 1.140,losses averange=6.319
Epoch 3/20, Iter 2300/8863, train loss = 7.952, time = 1.076,losses averange=6.278
Epoch 3/20, Iter 2400/8863, train loss = 5.646, time = 1.055,losses averange=6.255
Epoch 3/20, Iter 2500/8863, train loss = 4.737, time = 1.050,losses averange=6.241
Epoch 3/20, Iter 2600/8863, train loss = 6.143, time = 1.085,losses averange=6.236
Epoch 3/20, Iter 2700/8863, train loss = 3.000, time = 1.078,losses averange=6.275
Epoch 3/20, Iter 2800/8863, train loss = 2.854, time = 1.074,losses averange=6.263
Epoch 3/20, Iter 2900/8863, train loss = 10.888, time = 1.033,losses averange=6.250
Epoch 3/20, Iter 3000/8863, train loss = 5.545, time = 1.078,losses averange=6.248
Epoch 3/20, Iter 3100/8863, train loss = 2.112, time = 1.031,losses averange=6.253
Epoch 3/20, Iter 3200/8863, train loss = 2.433, time = 1.058,losses averange=6.233
Epoch 3/20, Iter 3300/8863, train loss = 5.456, time = 1.113,losses averange=6.230
Epoch 3/20, Iter 3400/8863, train loss = 2.915, time = 1.053,losses averange=6.243
Epoch 3/20, Iter 3500/8863, train loss = 2.322, time = 1.058,losses averange=6.273
Epoch 3/20, Iter 3600/8863, train loss = 1.237, time = 1.082,losses averange=6.255
Epoch 3/20, Iter 3700/8863, train loss = 12.888, time = 1.034,losses averange=6.245
Epoch 3/20, Iter 3800/8863, train loss = 6.507, time = 1.096,losses averange=6.244
Epoch 3/20, Iter 3900/8863, train loss = 6.321, time = 1.030,losses averange=6.235
Epoch 3/20, Iter 4000/8863, train loss = 3.203, time = 1.048,losses averange=6.230
Epoch 3/20, Iter 4100/8863, train loss = 5.485, time = 1.093,losses averange=6.220
Epoch 3/20, Iter 4200/8863, train loss = 5.922, time = 1.047,losses averange=6.209
Epoch 3/20, Iter 4300/8863, train loss = 5.742, time = 1.051,losses averange=6.204
Epoch 3/20, Iter 4400/8863, train loss = 7.309, time = 1.075,losses averange=6.213
Epoch 3/20, Iter 4500/8863, train loss = 4.883, time = 1.049,losses averange=6.210
Epoch 3/20, Iter 4600/8863, train loss = 2.642, time = 1.076,losses averange=6.216
Epoch 3/20, Iter 4700/8863, train loss = 5.236, time = 1.041,losses averange=6.208
Epoch 3/20, Iter 4800/8863, train loss = 3.690, time = 1.074,losses averange=6.219
Epoch 3/20, Iter 4900/8863, train loss = 2.008, time = 1.053,losses averange=6.223
Epoch 3/20, Iter 5000/8863, train loss = 5.310, time = 1.067,losses averange=6.210
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 3/20, Iter 5100/8863, train loss = 6.023, time = 1.084,losses averange=6.202
Epoch 3/20, Iter 5200/8863, train loss = 1.675, time = 1.069,losses averange=6.203
Epoch 3/20, Iter 5300/8863, train loss = 4.116, time = 1.052,losses averange=6.198
Epoch 3/20, Iter 5400/8863, train loss = 6.601, time = 1.075,losses averange=6.195
Epoch 3/20, Iter 5500/8863, train loss = 7.799, time = 1.071,losses averange=6.198
Epoch 3/20, Iter 5600/8863, train loss = 4.652, time = 1.054,losses averange=6.202
Epoch 3/20, Iter 5700/8863, train loss = 2.352, time = 1.086,losses averange=6.193
Epoch 3/20, Iter 5800/8863, train loss = 10.651, time = 1.053,losses averange=6.206
Epoch 3/20, Iter 5900/8863, train loss = 2.556, time = 1.126,losses averange=6.207
Epoch 3/20, Iter 6000/8863, train loss = 2.029, time = 1.074,losses averange=6.199
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 3/20, Iter 6100/8863, train loss = 3.164, time = 1.103,losses averange=6.183
Epoch 3/20, Iter 6200/8863, train loss = 1.555, time = 1.064,losses averange=6.169
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 3/20, Iter 6300/8863, train loss = 6.059, time = 1.031,losses averange=6.159
Epoch 3/20, Iter 6400/8863, train loss = 2.663, time = 1.021,losses averange=6.168
Epoch 3/20, Iter 6500/8863, train loss = 10.971, time = 1.056,losses averange=6.155
Epoch 3/20, Iter 6600/8863, train loss = 6.074, time = 1.088,losses averange=6.151
Epoch 3/20, Iter 6700/8863, train loss = 9.855, time = 1.068,losses averange=6.142
Epoch 3/20, Iter 6800/8863, train loss = 10.903, time = 1.036,losses averange=6.135
Epoch 3/20, Iter 6900/8863, train loss = 1.054, time = 1.072,losses averange=6.131
Epoch 3/20, Iter 7000/8863, train loss = 3.648, time = 1.116,losses averange=6.124
Epoch 3/20, Iter 7100/8863, train loss = 10.733, time = 1.077,losses averange=6.110
Epoch 3/20, Iter 7200/8863, train loss = 5.864, time = 1.062,losses averange=6.105
Epoch 3/20, Iter 7300/8863, train loss = 2.348, time = 1.068,losses averange=6.096
Epoch 3/20, Iter 7400/8863, train loss = 3.505, time = 1.083,losses averange=6.100
Epoch 3/20, Iter 7500/8863, train loss = 6.087, time = 1.103,losses averange=6.101
Epoch 3/20, Iter 7600/8863, train loss = 6.033, time = 1.077,losses averange=6.111
Epoch 3/20, Iter 7700/8863, train loss = 1.522, time = 1.088,losses averange=6.105
Epoch 3/20, Iter 7800/8863, train loss = 10.127, time = 1.075,losses averange=6.093
Epoch 3/20, Iter 7900/8863, train loss = 4.157, time = 1.032,losses averange=6.091
Epoch 3/20, Iter 8000/8863, train loss = 4.509, time = 1.065,losses averange=6.084
Epoch 3/20, Iter 8100/8863, train loss = 3.207, time = 1.122,losses averange=6.076
Epoch 3/20, Iter 8200/8863, train loss = 4.053, time = 1.060,losses averange=6.074
Epoch 3/20, Iter 8300/8863, train loss = 9.001, time = 1.048,losses averange=6.070
Epoch 3/20, Iter 8400/8863, train loss = 5.392, time = 1.081,losses averange=6.064
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 3/20, Iter 8500/8863, train loss = 3.990, time = 1.039,losses averange=6.062
Epoch 3/20, Iter 8600/8863, train loss = 16.525, time = 1.102,losses averange=6.062
Epoch 3/20, Iter 8700/8863, train loss = 3.949, time = 1.050,losses averange=6.056
Epoch 3/20, Iter 8800/8863, train loss = 6.402, time = 1.050,losses averange=6.053
Epoch 3/20, Iter 8862/8863, train loss = 12.922, time = 1.113,losses averange=6.053
avg_train_loss 6.0533284916305306
Epoch 3/20, Iter 0/4370, test loss = 1.632, time = 0.560059
Epoch 3/20, Iter 100/4370, test loss = 4.289, time = 0.551776
Epoch 3/20, Iter 200/4370, test loss = 3.188, time = 0.547681
Epoch 3/20, Iter 300/4370, test loss = 8.756, time = 0.552196
Epoch 3/20, Iter 400/4370, test loss = 7.779, time = 0.553394
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 3/20, Iter 500/4370, test loss = 21.364, time = 0.553017
Epoch 3/20, Iter 600/4370, test loss = 1.128, time = 0.556820
Epoch 3/20, Iter 700/4370, test loss = 11.013, time = 0.556644
Epoch 3/20, Iter 800/4370, test loss = 3.182, time = 0.551687
Epoch 3/20, Iter 900/4370, test loss = 1.050, time = 0.550527
Epoch 3/20, Iter 1000/4370, test loss = 1.037, time = 0.559859
Epoch 3/20, Iter 1100/4370, test loss = 1.732, time = 0.548449
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 3/20, Iter 1200/4370, test loss = 2.186, time = 0.554700
Epoch 3/20, Iter 1300/4370, test loss = 19.009, time = 0.549124
Epoch 3/20, Iter 1400/4370, test loss = 6.330, time = 0.559201
Epoch 3/20, Iter 1500/4370, test loss = 1.763, time = 0.551179
Epoch 3/20, Iter 1600/4370, test loss = 3.183, time = 0.553647
Epoch 3/20, Iter 1700/4370, test loss = 2.876, time = 0.555111
Epoch 3/20, Iter 1800/4370, test loss = 1.687, time = 0.550469
Epoch 3/20, Iter 1900/4370, test loss = 3.483, time = 0.548183
Epoch 3/20, Iter 2000/4370, test loss = 2.613, time = 0.545483
Epoch 3/20, Iter 2100/4370, test loss = 1.778, time = 0.553669
Epoch 3/20, Iter 2200/4370, test loss = 0.978, time = 0.553048
Epoch 3/20, Iter 2300/4370, test loss = 3.428, time = 0.549751
Epoch 3/20, Iter 2400/4370, test loss = 1.418, time = 0.549278
Epoch 3/20, Iter 2500/4370, test loss = 2.692, time = 0.553055
Epoch 3/20, Iter 2600/4370, test loss = 1.693, time = 0.545588
Epoch 3/20, Iter 2700/4370, test loss = 5.751, time = 0.543705
Epoch 3/20, Iter 2800/4370, test loss = 2.344, time = 0.554282
Epoch 3/20, Iter 2900/4370, test loss = 2.361, time = 0.553671
Epoch 3/20, Iter 3000/4370, test loss = 2.241, time = 0.548656
Epoch 3/20, Iter 3100/4370, test loss = 1.599, time = 0.548031
Epoch 3/20, Iter 3200/4370, test loss = 2.590, time = 0.552570
Epoch 3/20, Iter 3300/4370, test loss = 1.287, time = 0.554421
Epoch 3/20, Iter 3400/4370, test loss = 1.539, time = 0.549331
Epoch 3/20, Iter 3500/4370, test loss = 2.262, time = 0.554876
Epoch 3/20, Iter 3600/4370, test loss = 3.571, time = 0.546400
Epoch 3/20, Iter 3700/4370, test loss = 4.870, time = 0.548541
Epoch 3/20, Iter 3800/4370, test loss = 3.248, time = 0.558209
Epoch 3/20, Iter 3900/4370, test loss = 3.662, time = 0.550975
Epoch 3/20, Iter 4000/4370, test loss = 1.985, time = 0.556930
Epoch 3/20, Iter 4100/4370, test loss = 2.337, time = 0.549434
Epoch 3/20, Iter 4200/4370, test loss = 1.458, time = 0.548484
Epoch 3/20, Iter 4300/4370, test loss = 2.007, time = 0.552483
Epoch 3/20, Iter 4369/4370, test loss = 4.505, time = 0.556713
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.08251998535947751, 0.056320621018048626, 0.04906852479919672, 0.04658048386670632], 'EPE': [2.1251798513279354, 1.6049833316756603, 1.468458043649213, 1.4291669830850386], 'Thres3': [0.08966741511252979, 0.06351488707501876, 0.05632716524798329, 0.05377591964607585], 'Thres1': [0.16484064574329954, 0.14035190121959085, 0.1299806128134546, 0.12445691717656444], 'Thres2': [0.1089490990152314, 0.0829955616535393, 0.07470526811325799, 0.07135183852393973], 'D1': [0.10464798512120542, 0.07784027718710852, 0.06864028221946764, 0.0650342023626686]}
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 0.001
current rate is  0.001
Epoch 4/20, Iter 0/8863, train loss = 1.538, time = 1.072,losses averange=1.538
Epoch 4/20, Iter 100/8863, train loss = 5.714, time = 1.056,losses averange=5.263
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 4/20, Iter 200/8863, train loss = 6.875, time = 1.083,losses averange=5.669
Epoch 4/20, Iter 300/8863, train loss = 4.226, time = 1.061,losses averange=5.569
Epoch 4/20, Iter 400/8863, train loss = 4.409, time = 1.102,losses averange=5.664
Epoch 4/20, Iter 500/8863, train loss = 3.651, time = 1.034,losses averange=5.602
Epoch 4/20, Iter 600/8863, train loss = 3.468, time = 1.053,losses averange=5.570
Epoch 4/20, Iter 700/8863, train loss = 6.360, time = 1.052,losses averange=5.694
Epoch 4/20, Iter 800/8863, train loss = 8.467, time = 1.052,losses averange=5.699
Epoch 4/20, Iter 900/8863, train loss = 0.625, time = 1.026,losses averange=5.674
Epoch 4/20, Iter 1000/8863, train loss = 9.049, time = 1.070,losses averange=5.649
Epoch 4/20, Iter 1100/8863, train loss = 14.810, time = 1.146,losses averange=5.642
Epoch 4/20, Iter 1200/8863, train loss = 3.375, time = 1.062,losses averange=5.657
Epoch 4/20, Iter 1300/8863, train loss = 5.330, time = 1.047,losses averange=5.673
Epoch 4/20, Iter 1400/8863, train loss = 5.408, time = 1.044,losses averange=5.680
Epoch 4/20, Iter 1500/8863, train loss = 4.514, time = 1.068,losses averange=5.626
Epoch 4/20, Iter 1600/8863, train loss = 7.023, time = 1.032,losses averange=5.659
Epoch 4/20, Iter 1700/8863, train loss = 8.634, time = 1.097,losses averange=5.662
Epoch 4/20, Iter 1800/8863, train loss = 4.881, time = 1.110,losses averange=5.690
Epoch 4/20, Iter 1900/8863, train loss = 2.849, time = 1.085,losses averange=5.670
Epoch 4/20, Iter 2000/8863, train loss = 3.714, time = 1.041,losses averange=5.644
Epoch 4/20, Iter 2100/8863, train loss = 16.792, time = 1.069,losses averange=5.644
Epoch 4/20, Iter 2200/8863, train loss = 4.233, time = 1.130,losses averange=5.642
Epoch 4/20, Iter 2300/8863, train loss = 16.856, time = 1.068,losses averange=5.667
Epoch 4/20, Iter 2400/8863, train loss = 4.215, time = 1.058,losses averange=5.661
Epoch 4/20, Iter 2500/8863, train loss = 4.921, time = 1.030,losses averange=5.672
Epoch 4/20, Iter 2600/8863, train loss = 2.310, time = 1.033,losses averange=5.660
Epoch 4/20, Iter 2700/8863, train loss = 5.364, time = 1.030,losses averange=5.669
Epoch 4/20, Iter 2800/8863, train loss = 4.531, time = 1.077,losses averange=5.679
Epoch 4/20, Iter 2900/8863, train loss = 7.326, time = 1.037,losses averange=5.677
Epoch 4/20, Iter 3000/8863, train loss = 8.691, time = 1.056,losses averange=5.672
Epoch 4/20, Iter 3100/8863, train loss = 9.798, time = 1.068,losses averange=5.686
Epoch 4/20, Iter 3200/8863, train loss = 4.749, time = 1.064,losses averange=5.714
Epoch 4/20, Iter 3300/8863, train loss = 3.207, time = 1.109,losses averange=5.722
Epoch 4/20, Iter 3400/8863, train loss = 4.119, time = 1.081,losses averange=5.725
Epoch 4/20, Iter 3500/8863, train loss = 12.338, time = 1.062,losses averange=5.713
Epoch 4/20, Iter 3600/8863, train loss = 1.384, time = 1.083,losses averange=5.700
Epoch 4/20, Iter 3700/8863, train loss = 3.653, time = 1.055,losses averange=5.701
Epoch 4/20, Iter 3800/8863, train loss = 7.002, time = 1.066,losses averange=5.684
Epoch 4/20, Iter 3900/8863, train loss = 2.059, time = 1.087,losses averange=5.667
Epoch 4/20, Iter 4000/8863, train loss = 2.529, time = 1.059,losses averange=5.652
Epoch 4/20, Iter 4100/8863, train loss = 9.826, time = 1.078,losses averange=5.649
Epoch 4/20, Iter 4200/8863, train loss = 5.373, time = 1.053,losses averange=5.646
Epoch 4/20, Iter 4300/8863, train loss = 3.095, time = 1.049,losses averange=5.638
Epoch 4/20, Iter 4400/8863, train loss = 4.223, time = 1.045,losses averange=5.626
Epoch 4/20, Iter 4500/8863, train loss = 5.364, time = 1.024,losses averange=5.616
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 4/20, Iter 4600/8863, train loss = 17.385, time = 1.063,losses averange=5.600
Epoch 4/20, Iter 4700/8863, train loss = 1.999, time = 1.033,losses averange=5.590
Epoch 4/20, Iter 4800/8863, train loss = 5.111, time = 1.052,losses averange=5.584
Epoch 4/20, Iter 4900/8863, train loss = 5.306, time = 1.055,losses averange=5.571
Epoch 4/20, Iter 5000/8863, train loss = 14.739, time = 1.076,losses averange=5.570
Epoch 4/20, Iter 5100/8863, train loss = 5.118, time = 1.060,losses averange=5.564
Epoch 4/20, Iter 5200/8863, train loss = 4.396, time = 1.082,losses averange=5.562
Epoch 4/20, Iter 5300/8863, train loss = 6.517, time = 1.086,losses averange=5.567
Epoch 4/20, Iter 5400/8863, train loss = 3.481, time = 1.109,losses averange=5.566
Epoch 4/20, Iter 5500/8863, train loss = 12.589, time = 1.071,losses averange=5.567
Epoch 4/20, Iter 5600/8863, train loss = 3.368, time = 1.111,losses averange=5.556
Epoch 4/20, Iter 5700/8863, train loss = 9.672, time = 1.036,losses averange=5.555
Epoch 4/20, Iter 5800/8863, train loss = 2.648, time = 1.082,losses averange=5.547
Epoch 4/20, Iter 5900/8863, train loss = 6.106, time = 1.158,losses averange=5.540
Epoch 4/20, Iter 6000/8863, train loss = 2.021, time = 1.117,losses averange=5.536
Epoch 4/20, Iter 6100/8863, train loss = 3.608, time = 1.055,losses averange=5.539
Epoch 4/20, Iter 6200/8863, train loss = 10.164, time = 1.023,losses averange=5.541
Epoch 4/20, Iter 6300/8863, train loss = 7.393, time = 1.084,losses averange=5.535
Epoch 4/20, Iter 6400/8863, train loss = 5.545, time = 1.056,losses averange=5.538
Epoch 4/20, Iter 6500/8863, train loss = 5.219, time = 1.066,losses averange=5.548
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 4/20, Iter 6600/8863, train loss = 3.261, time = 1.076,losses averange=5.551
Epoch 4/20, Iter 6700/8863, train loss = 3.549, time = 1.049,losses averange=5.559
Epoch 4/20, Iter 6800/8863, train loss = 6.617, time = 1.037,losses averange=5.559
Epoch 4/20, Iter 6900/8863, train loss = 3.312, time = 1.037,losses averange=5.563
Epoch 4/20, Iter 7000/8863, train loss = 6.933, time = 1.142,losses averange=5.564
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 4/20, Iter 7100/8863, train loss = 3.867, time = 1.049,losses averange=5.561
Epoch 4/20, Iter 7200/8863, train loss = 4.672, time = 1.044,losses averange=5.561
Epoch 4/20, Iter 7300/8863, train loss = 4.132, time = 1.055,losses averange=5.572
Epoch 4/20, Iter 7400/8863, train loss = 6.170, time = 1.076,losses averange=5.563
Epoch 4/20, Iter 7500/8863, train loss = 6.716, time = 1.038,losses averange=5.572
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 4/20, Iter 7600/8863, train loss = 5.566, time = 1.047,losses averange=5.579
Epoch 4/20, Iter 7700/8863, train loss = 7.160, time = 1.087,losses averange=5.586
Epoch 4/20, Iter 7800/8863, train loss = 8.004, time = 1.097,losses averange=5.581
Epoch 4/20, Iter 7900/8863, train loss = 26.161, time = 1.047,losses averange=5.584
Epoch 4/20, Iter 8000/8863, train loss = 5.342, time = 1.048,losses averange=5.590
Epoch 4/20, Iter 8100/8863, train loss = 6.364, time = 1.120,losses averange=5.591
Epoch 4/20, Iter 8200/8863, train loss = 5.012, time = 1.070,losses averange=5.581
Epoch 4/20, Iter 8300/8863, train loss = 2.217, time = 1.053,losses averange=5.584
Epoch 4/20, Iter 8400/8863, train loss = 8.233, time = 1.034,losses averange=5.584
Epoch 4/20, Iter 8500/8863, train loss = 15.286, time = 1.047,losses averange=5.580
Epoch 4/20, Iter 8600/8863, train loss = 3.362, time = 1.093,losses averange=5.576
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 4/20, Iter 8700/8863, train loss = 3.603, time = 1.076,losses averange=5.568
Epoch 4/20, Iter 8800/8863, train loss = 4.056, time = 1.059,losses averange=5.563
Epoch 4/20, Iter 8862/8863, train loss = 7.040, time = 1.137,losses averange=5.562
avg_train_loss 5.562203573236397
Epoch 4/20, Iter 0/4370, test loss = 1.647, time = 2.738391
Epoch 4/20, Iter 100/4370, test loss = 4.080, time = 2.754923
Epoch 4/20, Iter 200/4370, test loss = 4.160, time = 2.518898
Epoch 4/20, Iter 300/4370, test loss = 6.511, time = 2.697041
Epoch 4/20, Iter 400/4370, test loss = 4.583, time = 2.735396
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 4/20, Iter 500/4370, test loss = 2.371, time = 2.671237
Epoch 4/20, Iter 600/4370, test loss = 0.936, time = 2.420504
Epoch 4/20, Iter 700/4370, test loss = 11.022, time = 2.621268
Epoch 4/20, Iter 800/4370, test loss = 2.488, time = 2.517094
Epoch 4/20, Iter 900/4370, test loss = 0.947, time = 2.798128
Epoch 4/20, Iter 1000/4370, test loss = 0.920, time = 2.358879
Epoch 4/20, Iter 1100/4370, test loss = 1.493, time = 2.570290
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 4/20, Iter 1200/4370, test loss = 2.057, time = 2.728717
Epoch 4/20, Iter 1300/4370, test loss = 3.572, time = 2.402056
Epoch 4/20, Iter 1400/4370, test loss = 5.817, time = 2.663775
Epoch 4/20, Iter 1500/4370, test loss = 1.290, time = 2.584670
Epoch 4/20, Iter 1600/4370, test loss = 2.626, time = 2.374830
Epoch 4/20, Iter 1700/4370, test loss = 2.369, time = 2.444510
Epoch 4/20, Iter 1800/4370, test loss = 1.595, time = 2.354425
Epoch 4/20, Iter 1900/4370, test loss = 3.468, time = 2.818381
Epoch 4/20, Iter 2000/4370, test loss = 2.044, time = 2.653904
Epoch 4/20, Iter 2100/4370, test loss = 1.580, time = 2.597905
Epoch 4/20, Iter 2200/4370, test loss = 0.894, time = 2.411624
Epoch 4/20, Iter 2300/4370, test loss = 3.420, time = 2.588790
Epoch 4/20, Iter 2400/4370, test loss = 1.441, time = 2.354088
Epoch 4/20, Iter 2500/4370, test loss = 2.319, time = 2.952594
Epoch 4/20, Iter 2600/4370, test loss = 1.351, time = 2.601717
Epoch 4/20, Iter 2700/4370, test loss = 5.729, time = 2.394472
Epoch 4/20, Iter 2800/4370, test loss = 2.010, time = 2.520073
Epoch 4/20, Iter 2900/4370, test loss = 2.138, time = 2.698313
Epoch 4/20, Iter 3000/4370, test loss = 1.860, time = 2.695214
Epoch 4/20, Iter 3100/4370, test loss = 1.495, time = 2.773632
Epoch 4/20, Iter 3200/4370, test loss = 2.280, time = 2.658502
Epoch 4/20, Iter 3300/4370, test loss = 1.117, time = 2.509284
Epoch 4/20, Iter 3400/4370, test loss = 1.306, time = 2.446248
Epoch 4/20, Iter 3500/4370, test loss = 2.061, time = 2.682260
Epoch 4/20, Iter 3600/4370, test loss = 3.139, time = 2.538971
Epoch 4/20, Iter 3700/4370, test loss = 3.955, time = 2.478592
Epoch 4/20, Iter 3800/4370, test loss = 2.920, time = 2.836320
Epoch 4/20, Iter 3900/4370, test loss = 2.623, time = 2.558017
Epoch 4/20, Iter 4000/4370, test loss = 2.176, time = 2.613329
Epoch 4/20, Iter 4100/4370, test loss = 1.983, time = 2.503636
Epoch 4/20, Iter 4200/4370, test loss = 1.199, time = 2.456697
Epoch 4/20, Iter 4300/4370, test loss = 1.782, time = 2.636405
Epoch 4/20, Iter 4369/4370, test loss = 3.784, time = 0.546923
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.07220072271217096, 0.04791835413188663, 0.04153703834448069, 0.03936396940361955], 'EPE': [1.8205691599600375, 1.295241823949312, 1.1479912359463542, 1.1032868139837917], 'Thres3': [0.07948895262967735, 0.0550534666592609, 0.04860718431989119, 0.046435318552479746], 'Thres1': [0.15314886363508773, 0.1259464029742733, 0.11586532313014365, 0.11233887773527161], 'Thres2': [0.09823896607567366, 0.07263850199998499, 0.06516736257124428, 0.06254323053619136], 'D1': [0.09373205569604715, 0.0669367354226808, 0.05867963015150867, 0.05575693035258505]}
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 0.001
current rate is  0.001
Epoch 5/20, Iter 0/8863, train loss = 7.287, time = 1.076,losses averange=7.287
Epoch 5/20, Iter 100/8863, train loss = 5.338, time = 1.094,losses averange=5.080
Epoch 5/20, Iter 200/8863, train loss = 5.361, time = 1.053,losses averange=5.279
Epoch 5/20, Iter 300/8863, train loss = 2.026, time = 1.071,losses averange=5.294
Epoch 5/20, Iter 400/8863, train loss = 4.464, time = 1.096,losses averange=5.346
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 5/20, Iter 500/8863, train loss = 1.666, time = 1.104,losses averange=5.331
Epoch 5/20, Iter 600/8863, train loss = 2.817, time = 1.028,losses averange=5.268
Epoch 5/20, Iter 700/8863, train loss = 7.423, time = 1.103,losses averange=5.251
Epoch 5/20, Iter 800/8863, train loss = 4.089, time = 1.058,losses averange=5.221
Epoch 5/20, Iter 900/8863, train loss = 7.004, time = 1.094,losses averange=5.283
Epoch 5/20, Iter 1000/8863, train loss = 7.064, time = 1.077,losses averange=5.376
Epoch 5/20, Iter 1100/8863, train loss = 8.497, time = 1.142,losses averange=5.394
Epoch 5/20, Iter 1200/8863, train loss = 5.105, time = 1.100,losses averange=5.397
Epoch 5/20, Iter 1300/8863, train loss = 3.521, time = 1.040,losses averange=5.392
Epoch 5/20, Iter 1400/8863, train loss = 3.200, time = 1.061,losses averange=5.386
Epoch 5/20, Iter 1500/8863, train loss = 2.259, time = 1.051,losses averange=5.368
Epoch 5/20, Iter 1600/8863, train loss = 8.083, time = 1.080,losses averange=5.335
Epoch 5/20, Iter 1700/8863, train loss = 8.630, time = 1.044,losses averange=5.319
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 5/20, Iter 1800/8863, train loss = 2.723, time = 1.035,losses averange=5.303
Epoch 5/20, Iter 1900/8863, train loss = 3.378, time = 1.040,losses averange=5.288
Epoch 5/20, Iter 2000/8863, train loss = 2.498, time = 1.051,losses averange=5.308
Epoch 5/20, Iter 2100/8863, train loss = 13.486, time = 1.108,losses averange=5.304
Epoch 5/20, Iter 2200/8863, train loss = 4.050, time = 1.150,losses averange=5.326
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 5/20, Iter 2300/8863, train loss = 2.902, time = 1.063,losses averange=5.321
Epoch 5/20, Iter 2400/8863, train loss = 5.472, time = 1.054,losses averange=5.305
Epoch 5/20, Iter 2500/8863, train loss = 5.048, time = 1.075,losses averange=5.294
Epoch 5/20, Iter 2600/8863, train loss = 4.940, time = 1.053,losses averange=5.285
Epoch 5/20, Iter 2700/8863, train loss = 5.765, time = 1.029,losses averange=5.301
Epoch 5/20, Iter 2800/8863, train loss = 4.193, time = 1.060,losses averange=5.305
Epoch 5/20, Iter 2900/8863, train loss = 10.363, time = 1.039,losses averange=5.323
Epoch 5/20, Iter 3000/8863, train loss = 3.500, time = 1.085,losses averange=5.340
Epoch 5/20, Iter 3100/8863, train loss = 7.424, time = 1.046,losses averange=5.342
Epoch 5/20, Iter 3200/8863, train loss = 7.100, time = 1.071,losses averange=5.346
Epoch 5/20, Iter 3300/8863, train loss = 1.332, time = 1.139,losses averange=5.340
Epoch 5/20, Iter 3400/8863, train loss = 7.170, time = 1.068,losses averange=5.341
Epoch 5/20, Iter 3500/8863, train loss = 4.134, time = 1.050,losses averange=5.354
Epoch 5/20, Iter 3600/8863, train loss = 9.931, time = 1.020,losses averange=5.358
Epoch 5/20, Iter 3700/8863, train loss = 4.292, time = 1.048,losses averange=5.349
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 5/20, Iter 3800/8863, train loss = 4.213, time = 1.056,losses averange=5.330
Epoch 5/20, Iter 3900/8863, train loss = 4.127, time = 1.099,losses averange=5.307
Epoch 5/20, Iter 4000/8863, train loss = 5.917, time = 1.079,losses averange=5.303
Epoch 5/20, Iter 4100/8863, train loss = 4.362, time = 1.048,losses averange=5.302
Epoch 5/20, Iter 4200/8863, train loss = 3.612, time = 1.071,losses averange=5.311
Epoch 5/20, Iter 4300/8863, train loss = 5.108, time = 1.062,losses averange=5.311
Epoch 5/20, Iter 4400/8863, train loss = 6.037, time = 1.049,losses averange=5.314
Epoch 5/20, Iter 4500/8863, train loss = 6.003, time = 1.037,losses averange=5.304
Epoch 5/20, Iter 4600/8863, train loss = 8.238, time = 1.053,losses averange=5.293
Epoch 5/20, Iter 4700/8863, train loss = 8.497, time = 1.067,losses averange=5.294
Epoch 5/20, Iter 4800/8863, train loss = 3.634, time = 1.030,losses averange=5.297
Epoch 5/20, Iter 4900/8863, train loss = 2.352, time = 1.026,losses averange=5.289
Epoch 5/20, Iter 5000/8863, train loss = 3.901, time = 1.029,losses averange=5.291
Epoch 5/20, Iter 5100/8863, train loss = 3.760, time = 1.079,losses averange=5.283
Epoch 5/20, Iter 5200/8863, train loss = 4.250, time = 1.072,losses averange=5.279
Epoch 5/20, Iter 5300/8863, train loss = 6.703, time = 1.082,losses averange=5.282
Epoch 5/20, Iter 5400/8863, train loss = 3.009, time = 1.088,losses averange=5.276
Epoch 5/20, Iter 5500/8863, train loss = 1.930, time = 1.075,losses averange=5.274
Epoch 5/20, Iter 5600/8863, train loss = 9.533, time = 1.084,losses averange=5.273
Epoch 5/20, Iter 5700/8863, train loss = 7.126, time = 1.052,losses averange=5.272
Epoch 5/20, Iter 5800/8863, train loss = 8.255, time = 1.076,losses averange=5.276
Epoch 5/20, Iter 5900/8863, train loss = 6.892, time = 1.063,losses averange=5.278
Epoch 5/20, Iter 6000/8863, train loss = 6.091, time = 1.107,losses averange=5.270
Epoch 5/20, Iter 6100/8863, train loss = 1.804, time = 1.052,losses averange=5.261
Epoch 5/20, Iter 6200/8863, train loss = 7.710, time = 1.072,losses averange=5.249
Epoch 5/20, Iter 6300/8863, train loss = 2.867, time = 1.038,losses averange=5.245
Epoch 5/20, Iter 6400/8863, train loss = 13.064, time = 1.071,losses averange=5.247
Epoch 5/20, Iter 6500/8863, train loss = 8.335, time = 1.048,losses averange=5.257
Epoch 5/20, Iter 6600/8863, train loss = 7.479, time = 1.050,losses averange=5.258
Epoch 5/20, Iter 6700/8863, train loss = 3.882, time = 1.074,losses averange=5.249
Epoch 5/20, Iter 6800/8863, train loss = 8.030, time = 1.091,losses averange=5.243
Epoch 5/20, Iter 6900/8863, train loss = 8.386, time = 1.072,losses averange=5.251
Epoch 5/20, Iter 7000/8863, train loss = 6.465, time = 1.168,losses averange=5.244
Epoch 5/20, Iter 7100/8863, train loss = 5.144, time = 1.056,losses averange=5.239
Epoch 5/20, Iter 7200/8863, train loss = 23.693, time = 1.032,losses averange=5.239
Epoch 5/20, Iter 7300/8863, train loss = 2.982, time = 1.038,losses averange=5.249
Epoch 5/20, Iter 7400/8863, train loss = 4.072, time = 1.055,losses averange=5.253
Epoch 5/20, Iter 7500/8863, train loss = 5.588, time = 1.076,losses averange=5.251
Epoch 5/20, Iter 7600/8863, train loss = 3.372, time = 1.014,losses averange=5.247
Epoch 5/20, Iter 7700/8863, train loss = 5.822, time = 1.058,losses averange=5.242
Epoch 5/20, Iter 7800/8863, train loss = 7.805, time = 1.058,losses averange=5.255
Epoch 5/20, Iter 7900/8863, train loss = 2.109, time = 1.052,losses averange=5.256
Epoch 5/20, Iter 8000/8863, train loss = 2.756, time = 1.075,losses averange=5.256
Epoch 5/20, Iter 8100/8863, train loss = 3.429, time = 1.148,losses averange=5.259
Epoch 5/20, Iter 8200/8863, train loss = 2.523, time = 1.090,losses averange=5.260
Epoch 5/20, Iter 8300/8863, train loss = 6.943, time = 1.039,losses averange=5.252
Epoch 5/20, Iter 8400/8863, train loss = 7.008, time = 1.062,losses averange=5.250
Epoch 5/20, Iter 8500/8863, train loss = 8.192, time = 1.060,losses averange=5.241
Epoch 5/20, Iter 8600/8863, train loss = 4.081, time = 1.070,losses averange=5.235
Epoch 5/20, Iter 8700/8863, train loss = 4.972, time = 1.057,losses averange=5.230
Epoch 5/20, Iter 8800/8863, train loss = 3.023, time = 1.034,losses averange=5.228
Epoch 5/20, Iter 8862/8863, train loss = 2.848, time = 1.128,losses averange=5.229
avg_train_loss 5.2294989130398255
Epoch 5/20, Iter 0/4370, test loss = 1.486, time = 0.557945
Epoch 5/20, Iter 100/4370, test loss = 3.937, time = 0.547776
Epoch 5/20, Iter 200/4370, test loss = 2.870, time = 0.555022
Epoch 5/20, Iter 300/4370, test loss = 6.654, time = 0.548230
Epoch 5/20, Iter 400/4370, test loss = 4.521, time = 0.550239
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 5/20, Iter 500/4370, test loss = 2.382, time = 0.557667
Epoch 5/20, Iter 600/4370, test loss = 0.813, time = 0.548984
Epoch 5/20, Iter 700/4370, test loss = 8.870, time = 0.556273
Epoch 5/20, Iter 800/4370, test loss = 2.634, time = 0.552891
Epoch 5/20, Iter 900/4370, test loss = 0.959, time = 0.547999
Epoch 5/20, Iter 1000/4370, test loss = 0.908, time = 0.554189
Epoch 5/20, Iter 1100/4370, test loss = 1.419, time = 0.550086
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 5/20, Iter 1200/4370, test loss = 1.794, time = 0.555452
Epoch 5/20, Iter 1300/4370, test loss = 3.933, time = 0.548820
Epoch 5/20, Iter 1400/4370, test loss = 5.701, time = 0.548000
Epoch 5/20, Iter 1500/4370, test loss = 1.280, time = 0.545974
Epoch 5/20, Iter 1600/4370, test loss = 2.283, time = 0.562445
Epoch 5/20, Iter 1700/4370, test loss = 2.197, time = 0.550964
Epoch 5/20, Iter 1800/4370, test loss = 1.494, time = 0.548416
Epoch 5/20, Iter 1900/4370, test loss = 2.794, time = 0.548683
Epoch 5/20, Iter 2000/4370, test loss = 2.127, time = 0.549606
Epoch 5/20, Iter 2100/4370, test loss = 1.614, time = 0.550008
Epoch 5/20, Iter 2200/4370, test loss = 0.835, time = 0.554408
Epoch 5/20, Iter 2300/4370, test loss = 2.735, time = 0.548135
Epoch 5/20, Iter 2400/4370, test loss = 1.301, time = 0.553432
Epoch 5/20, Iter 2500/4370, test loss = 2.078, time = 0.561925
Epoch 5/20, Iter 2600/4370, test loss = 1.271, time = 0.552784
Epoch 5/20, Iter 2700/4370, test loss = 5.493, time = 0.542569
Epoch 5/20, Iter 2800/4370, test loss = 1.883, time = 0.548827
Epoch 5/20, Iter 2900/4370, test loss = 2.060, time = 0.550289
Epoch 5/20, Iter 3000/4370, test loss = 1.906, time = 0.546280
Epoch 5/20, Iter 3100/4370, test loss = 1.346, time = 0.551915
Epoch 5/20, Iter 3200/4370, test loss = 2.203, time = 0.544970
Epoch 5/20, Iter 3300/4370, test loss = 1.029, time = 0.551267
Epoch 5/20, Iter 3400/4370, test loss = 1.275, time = 0.547132
Epoch 5/20, Iter 3500/4370, test loss = 1.915, time = 0.549511
Epoch 5/20, Iter 3600/4370, test loss = 3.259, time = 0.547791
Epoch 5/20, Iter 3700/4370, test loss = 3.892, time = 0.545002
Epoch 5/20, Iter 3800/4370, test loss = 2.906, time = 0.546344
Epoch 5/20, Iter 3900/4370, test loss = 2.643, time = 0.547445
Epoch 5/20, Iter 4000/4370, test loss = 2.050, time = 0.549819
Epoch 5/20, Iter 4100/4370, test loss = 1.864, time = 0.559731
Epoch 5/20, Iter 4200/4370, test loss = 1.204, time = 0.549482
Epoch 5/20, Iter 4300/4370, test loss = 1.641, time = 0.553201
Epoch 5/20, Iter 4369/4370, test loss = 3.681, time = 0.547601
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.07278815719460988, 0.0471783581520143, 0.03983549811936983, 0.03746957877763809], 'EPE': [1.7969532213303807, 1.2512672961678877, 1.0913317182209998, 1.0413870871749022], 'Thres3': [0.07986191126765167, 0.05422648175713314, 0.04674548242822955, 0.044317890855950434], 'Thres1': [0.1496824768015974, 0.12242709753536182, 0.11148610727592996, 0.1079702486220142], 'Thres2': [0.09807734519064222, 0.07139756461057718, 0.06272631714832319, 0.05994222794725502], 'D1': [0.09339423849773795, 0.0654252167198662, 0.05632724749964387, 0.0530991281157368]}
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 0.001
current rate is  0.001
Epoch 6/20, Iter 0/8863, train loss = 6.810, time = 1.117,losses averange=6.810
Epoch 6/20, Iter 100/8863, train loss = 2.107, time = 1.094,losses averange=4.698
Epoch 6/20, Iter 200/8863, train loss = 2.873, time = 1.047,losses averange=4.919
Epoch 6/20, Iter 300/8863, train loss = 5.629, time = 1.073,losses averange=4.751
Epoch 6/20, Iter 400/8863, train loss = 9.578, time = 1.092,losses averange=4.680
Epoch 6/20, Iter 500/8863, train loss = 7.212, time = 1.089,losses averange=4.776
Epoch 6/20, Iter 600/8863, train loss = 7.173, time = 1.071,losses averange=4.738
Epoch 6/20, Iter 700/8863, train loss = 11.155, time = 1.027,losses averange=4.782
Epoch 6/20, Iter 800/8863, train loss = 3.148, time = 1.072,losses averange=4.895
Epoch 6/20, Iter 900/8863, train loss = 4.504, time = 1.051,losses averange=4.886
Epoch 6/20, Iter 1000/8863, train loss = 11.441, time = 1.103,losses averange=4.873
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 6/20, Iter 1100/8863, train loss = 4.571, time = 1.089,losses averange=4.906
Epoch 6/20, Iter 1200/8863, train loss = 5.222, time = 1.091,losses averange=4.900
Epoch 6/20, Iter 1300/8863, train loss = 1.843, time = 1.059,losses averange=4.875
Epoch 6/20, Iter 1400/8863, train loss = 10.510, time = 1.034,losses averange=4.873
Epoch 6/20, Iter 1500/8863, train loss = 6.194, time = 1.082,losses averange=4.871
Epoch 6/20, Iter 1600/8863, train loss = 6.376, time = 1.115,losses averange=4.861
Epoch 6/20, Iter 1700/8863, train loss = 10.843, time = 1.104,losses averange=4.839
Epoch 6/20, Iter 1800/8863, train loss = 3.679, time = 1.044,losses averange=4.845
Epoch 6/20, Iter 1900/8863, train loss = 2.343, time = 1.088,losses averange=4.830
Epoch 6/20, Iter 2000/8863, train loss = 2.172, time = 1.047,losses averange=4.872
Epoch 6/20, Iter 2100/8863, train loss = 4.052, time = 1.098,losses averange=4.890
Epoch 6/20, Iter 2200/8863, train loss = 1.315, time = 1.128,losses averange=4.881
Epoch 6/20, Iter 2300/8863, train loss = 3.217, time = 1.052,losses averange=4.865
Epoch 6/20, Iter 2400/8863, train loss = 2.144, time = 1.054,losses averange=4.874
Epoch 6/20, Iter 2500/8863, train loss = 6.227, time = 1.056,losses averange=4.858
Epoch 6/20, Iter 2600/8863, train loss = 6.158, time = 1.035,losses averange=4.858
Epoch 6/20, Iter 2700/8863, train loss = 3.493, time = 1.054,losses averange=4.862
Epoch 6/20, Iter 2800/8863, train loss = 21.021, time = 1.073,losses averange=4.865
Epoch 6/20, Iter 2900/8863, train loss = 2.184, time = 1.091,losses averange=4.844
Epoch 6/20, Iter 3000/8863, train loss = 7.519, time = 1.081,losses averange=4.822
Epoch 6/20, Iter 3100/8863, train loss = 3.287, time = 1.029,losses averange=4.823
Epoch 6/20, Iter 3200/8863, train loss = 6.218, time = 1.056,losses averange=4.845
Epoch 6/20, Iter 3300/8863, train loss = 3.062, time = 1.136,losses averange=4.883
Epoch 6/20, Iter 3400/8863, train loss = 3.414, time = 1.056,losses averange=4.890
Epoch 6/20, Iter 3500/8863, train loss = 2.385, time = 1.052,losses averange=4.887
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 6/20, Iter 3600/8863, train loss = 5.001, time = 1.074,losses averange=4.896
Epoch 6/20, Iter 3700/8863, train loss = 2.521, time = 1.069,losses averange=4.892
Epoch 6/20, Iter 3800/8863, train loss = 5.633, time = 1.085,losses averange=4.883
Epoch 6/20, Iter 3900/8863, train loss = 5.264, time = 1.038,losses averange=4.874
Epoch 6/20, Iter 4000/8863, train loss = 3.758, time = 1.048,losses averange=4.873
Epoch 6/20, Iter 4100/8863, train loss = 3.694, time = 1.063,losses averange=4.866
Epoch 6/20, Iter 4200/8863, train loss = 4.959, time = 1.080,losses averange=4.856
Epoch 6/20, Iter 4300/8863, train loss = 5.169, time = 1.061,losses averange=4.879
Epoch 6/20, Iter 4400/8863, train loss = 5.636, time = 1.083,losses averange=4.882
Epoch 6/20, Iter 4500/8863, train loss = 9.283, time = 1.079,losses averange=4.875
Epoch 6/20, Iter 4600/8863, train loss = 1.616, time = 1.102,losses averange=4.874
Epoch 6/20, Iter 4700/8863, train loss = 3.948, time = 1.041,losses averange=4.881
Epoch 6/20, Iter 4800/8863, train loss = 7.334, time = 1.031,losses averange=4.880
Epoch 6/20, Iter 4900/8863, train loss = 7.499, time = 1.094,losses averange=4.874
Epoch 6/20, Iter 5000/8863, train loss = 2.592, time = 1.080,losses averange=4.875
Epoch 6/20, Iter 5100/8863, train loss = 5.550, time = 1.050,losses averange=4.876
Epoch 6/20, Iter 5200/8863, train loss = 9.596, time = 1.073,losses averange=4.881
Epoch 6/20, Iter 5300/8863, train loss = 7.499, time = 1.086,losses averange=4.883
Epoch 6/20, Iter 5400/8863, train loss = 5.552, time = 1.049,losses averange=4.897
Epoch 6/20, Iter 5500/8863, train loss = 4.113, time = 1.029,losses averange=4.910
Epoch 6/20, Iter 5600/8863, train loss = 6.399, time = 1.078,losses averange=4.916
Epoch 6/20, Iter 5700/8863, train loss = 4.702, time = 1.054,losses averange=4.916
Epoch 6/20, Iter 5800/8863, train loss = 4.272, time = 1.033,losses averange=4.924
Epoch 6/20, Iter 5900/8863, train loss = 4.055, time = 1.105,losses averange=4.929
Epoch 6/20, Iter 6000/8863, train loss = 9.018, time = 1.037,losses averange=4.920
Epoch 6/20, Iter 6100/8863, train loss = 8.154, time = 1.022,losses averange=4.913
Epoch 6/20, Iter 6200/8863, train loss = 2.503, time = 1.077,losses averange=4.910
Epoch 6/20, Iter 6300/8863, train loss = 2.458, time = 1.071,losses averange=4.913
Epoch 6/20, Iter 6400/8863, train loss = 4.227, time = 1.060,losses averange=4.911
Epoch 6/20, Iter 6500/8863, train loss = 2.057, time = 1.078,losses averange=4.909
Epoch 6/20, Iter 6600/8863, train loss = 3.482, time = 1.046,losses averange=4.922
Epoch 6/20, Iter 6700/8863, train loss = 15.082, time = 1.058,losses averange=4.918
Epoch 6/20, Iter 6800/8863, train loss = 3.825, time = 1.093,losses averange=4.914
Epoch 6/20, Iter 6900/8863, train loss = 6.026, time = 1.065,losses averange=4.912
Epoch 6/20, Iter 7000/8863, train loss = 5.914, time = 1.125,losses averange=4.911
Epoch 6/20, Iter 7100/8863, train loss = 6.337, time = 1.048,losses averange=4.916
Epoch 6/20, Iter 7200/8863, train loss = 6.416, time = 1.025,losses averange=4.918
Epoch 6/20, Iter 7300/8863, train loss = 4.176, time = 1.049,losses averange=4.913
Epoch 6/20, Iter 7400/8863, train loss = 2.474, time = 1.051,losses averange=4.909
Epoch 6/20, Iter 7500/8863, train loss = 3.572, time = 1.074,losses averange=4.909
Epoch 6/20, Iter 7600/8863, train loss = 2.862, time = 1.062,losses averange=4.910
Epoch 6/20, Iter 7700/8863, train loss = 3.077, time = 1.080,losses averange=4.911
Epoch 6/20, Iter 7800/8863, train loss = 6.168, time = 1.075,losses averange=4.910
Epoch 6/20, Iter 7900/8863, train loss = 5.457, time = 1.067,losses averange=4.904
Epoch 6/20, Iter 8000/8863, train loss = 4.526, time = 1.026,losses averange=4.906
Epoch 6/20, Iter 8100/8863, train loss = 3.967, time = 1.153,losses averange=4.902
Epoch 6/20, Iter 8200/8863, train loss = 5.024, time = 1.020,losses averange=4.896
Epoch 6/20, Iter 8300/8863, train loss = 5.092, time = 1.046,losses averange=4.898
Epoch 6/20, Iter 8400/8863, train loss = 4.375, time = 1.044,losses averange=4.897
Epoch 6/20, Iter 8500/8863, train loss = 2.697, time = 1.059,losses averange=4.895
Epoch 6/20, Iter 8600/8863, train loss = 4.856, time = 1.079,losses averange=4.898
Epoch 6/20, Iter 8700/8863, train loss = 4.083, time = 1.057,losses averange=4.899
Epoch 6/20, Iter 8800/8863, train loss = 1.179, time = 1.048,losses averange=4.912
Epoch 6/20, Iter 8862/8863, train loss = 2.219, time = 2.074,losses averange=4.913
avg_train_loss 4.913021740224202
Epoch 6/20, Iter 0/4370, test loss = 1.564, time = 2.683362
Epoch 6/20, Iter 100/4370, test loss = 3.735, time = 2.819906
Epoch 6/20, Iter 200/4370, test loss = 2.678, time = 2.304376
Epoch 6/20, Iter 300/4370, test loss = 7.046, time = 2.362491
Epoch 6/20, Iter 400/4370, test loss = 4.089, time = 2.518869
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 6/20, Iter 500/4370, test loss = 2.465, time = 2.660222
Epoch 6/20, Iter 600/4370, test loss = 0.940, time = 2.525970
Epoch 6/20, Iter 700/4370, test loss = 9.160, time = 2.646590
Epoch 6/20, Iter 800/4370, test loss = 2.430, time = 2.338989
Epoch 6/20, Iter 900/4370, test loss = 0.894, time = 2.682241
Epoch 6/20, Iter 1000/4370, test loss = 0.779, time = 2.488609
Epoch 6/20, Iter 1100/4370, test loss = 1.472, time = 2.538200
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 6/20, Iter 1200/4370, test loss = 1.822, time = 2.712053
Epoch 6/20, Iter 1300/4370, test loss = 5.063, time = 2.225918
Epoch 6/20, Iter 1400/4370, test loss = 6.079, time = 2.478270
Epoch 6/20, Iter 1500/4370, test loss = 1.346, time = 2.473729
Epoch 6/20, Iter 1600/4370, test loss = 4.492, time = 2.412162
Epoch 6/20, Iter 1700/4370, test loss = 2.204, time = 2.344258
Epoch 6/20, Iter 1800/4370, test loss = 1.280, time = 2.463195
Epoch 6/20, Iter 1900/4370, test loss = 3.246, time = 2.538702
Epoch 6/20, Iter 2000/4370, test loss = 1.760, time = 2.527318
Epoch 6/20, Iter 2100/4370, test loss = 1.652, time = 2.527159
Epoch 6/20, Iter 2200/4370, test loss = 0.878, time = 2.586382
Epoch 6/20, Iter 2300/4370, test loss = 2.801, time = 2.542279
Epoch 6/20, Iter 2400/4370, test loss = 1.299, time = 2.179851
Epoch 6/20, Iter 2500/4370, test loss = 2.100, time = 2.824286
Epoch 6/20, Iter 2600/4370, test loss = 1.308, time = 2.531026
Epoch 6/20, Iter 2700/4370, test loss = 4.734, time = 2.240821
Epoch 6/20, Iter 2800/4370, test loss = 1.874, time = 2.362601
Epoch 6/20, Iter 2900/4370, test loss = 1.936, time = 2.722673
Epoch 6/20, Iter 3000/4370, test loss = 1.823, time = 2.681845
Epoch 6/20, Iter 3100/4370, test loss = 1.332, time = 2.795922
Epoch 6/20, Iter 3200/4370, test loss = 2.182, time = 2.870492
Epoch 6/20, Iter 3300/4370, test loss = 1.144, time = 2.396978
Epoch 6/20, Iter 3400/4370, test loss = 1.329, time = 2.696615
Epoch 6/20, Iter 3500/4370, test loss = 2.009, time = 2.462054
Epoch 6/20, Iter 3600/4370, test loss = 2.758, time = 2.567765
Epoch 6/20, Iter 3700/4370, test loss = 3.885, time = 2.547058
Epoch 6/20, Iter 3800/4370, test loss = 2.791, time = 2.688003
Epoch 6/20, Iter 3900/4370, test loss = 2.795, time = 2.672554
Epoch 6/20, Iter 4000/4370, test loss = 1.736, time = 2.571604
Epoch 6/20, Iter 4100/4370, test loss = 1.943, time = 2.703410
Epoch 6/20, Iter 4200/4370, test loss = 1.084, time = 2.439800
Epoch 6/20, Iter 4300/4370, test loss = 1.672, time = 2.383480
Epoch 6/20, Iter 4369/4370, test loss = 4.120, time = 0.553231
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.07163551211350723, 0.04690315815528484, 0.039716676258571545, 0.03712814273781546], 'EPE': [1.816093634454282, 1.2857970914592458, 1.1224956290468198, 1.0563730216612806], 'Thres3': [0.07895060825008192, 0.05403279317734716, 0.046690587051749846, 0.0441410632294153], 'Thres1': [0.14914346403129042, 0.12298161456109935, 0.11301113855822578, 0.10763427083928231], 'Thres2': [0.09680092716163335, 0.07119239916006269, 0.06284264801379114, 0.059644965536240276], 'D1': [0.09117025841641276, 0.06489240491498492, 0.05605198193077228, 0.05225384620026828]}
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 0.001
current rate is  0.001
Epoch 7/20, Iter 0/8863, train loss = 10.060, time = 1.078,losses averange=10.060
Epoch 7/20, Iter 100/8863, train loss = 3.061, time = 1.075,losses averange=4.874
Epoch 7/20, Iter 200/8863, train loss = 3.921, time = 1.037,losses averange=4.926
Epoch 7/20, Iter 300/8863, train loss = 5.453, time = 1.031,losses averange=5.184
Epoch 7/20, Iter 400/8863, train loss = 4.305, time = 1.073,losses averange=5.268
Epoch 7/20, Iter 500/8863, train loss = 4.918, time = 1.114,losses averange=5.078
Epoch 7/20, Iter 600/8863, train loss = 3.545, time = 1.086,losses averange=5.046
Epoch 7/20, Iter 700/8863, train loss = 3.535, time = 1.091,losses averange=5.034
Epoch 7/20, Iter 800/8863, train loss = 4.472, time = 1.033,losses averange=5.049
Epoch 7/20, Iter 900/8863, train loss = 2.235, time = 1.026,losses averange=5.036
Epoch 7/20, Iter 1000/8863, train loss = 8.032, time = 1.062,losses averange=4.984
Epoch 7/20, Iter 1100/8863, train loss = 3.571, time = 1.127,losses averange=4.925
Epoch 7/20, Iter 1200/8863, train loss = 6.373, time = 1.052,losses averange=4.885
Epoch 7/20, Iter 1300/8863, train loss = 3.202, time = 1.059,losses averange=4.846
Epoch 7/20, Iter 1400/8863, train loss = 6.496, time = 1.060,losses averange=4.897
Epoch 7/20, Iter 1500/8863, train loss = 3.898, time = 1.058,losses averange=4.880
Epoch 7/20, Iter 1600/8863, train loss = 4.887, time = 1.038,losses averange=4.911
Epoch 7/20, Iter 1700/8863, train loss = 3.443, time = 1.039,losses averange=4.894
Epoch 7/20, Iter 1800/8863, train loss = 4.580, time = 1.035,losses averange=4.883
Epoch 7/20, Iter 1900/8863, train loss = 8.318, time = 1.091,losses averange=4.874
Epoch 7/20, Iter 2000/8863, train loss = 4.761, time = 1.077,losses averange=4.865
Epoch 7/20, Iter 2100/8863, train loss = 3.362, time = 1.040,losses averange=4.851
Epoch 7/20, Iter 2200/8863, train loss = 5.450, time = 1.112,losses averange=4.837
Epoch 7/20, Iter 2300/8863, train loss = 3.710, time = 1.070,losses averange=4.832
Epoch 7/20, Iter 2400/8863, train loss = 5.566, time = 1.111,losses averange=4.846
Epoch 7/20, Iter 2500/8863, train loss = 5.130, time = 1.039,losses averange=4.855
Epoch 7/20, Iter 2600/8863, train loss = 3.059, time = 1.085,losses averange=4.881
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 7/20, Iter 2700/8863, train loss = 5.193, time = 1.071,losses averange=4.860
Epoch 7/20, Iter 2800/8863, train loss = 2.378, time = 1.052,losses averange=4.851
Epoch 7/20, Iter 2900/8863, train loss = 3.106, time = 1.040,losses averange=4.845
Epoch 7/20, Iter 3000/8863, train loss = 3.482, time = 1.053,losses averange=4.822
Epoch 7/20, Iter 3100/8863, train loss = 1.117, time = 1.038,losses averange=4.820
Epoch 7/20, Iter 3200/8863, train loss = 5.191, time = 1.052,losses averange=4.820
Epoch 7/20, Iter 3300/8863, train loss = 2.632, time = 1.072,losses averange=4.833
Epoch 7/20, Iter 3400/8863, train loss = 3.754, time = 1.075,losses averange=4.840
Epoch 7/20, Iter 3500/8863, train loss = 2.246, time = 1.055,losses averange=4.822
Epoch 7/20, Iter 3600/8863, train loss = 4.094, time = 1.070,losses averange=4.817
Epoch 7/20, Iter 3700/8863, train loss = 7.671, time = 1.049,losses averange=4.817
Epoch 7/20, Iter 3800/8863, train loss = 7.500, time = 1.098,losses averange=4.824
Epoch 7/20, Iter 3900/8863, train loss = 4.735, time = 1.098,losses averange=4.847
Epoch 7/20, Iter 4000/8863, train loss = 13.112, time = 1.032,losses averange=4.862
Epoch 7/20, Iter 4100/8863, train loss = 3.657, time = 1.108,losses averange=4.848
Epoch 7/20, Iter 4200/8863, train loss = 6.215, time = 1.072,losses averange=4.834
Epoch 7/20, Iter 4300/8863, train loss = 3.751, time = 1.066,losses averange=4.832
Epoch 7/20, Iter 4400/8863, train loss = 6.106, time = 1.061,losses averange=4.819
Epoch 7/20, Iter 4500/8863, train loss = 3.552, time = 1.098,losses averange=4.801
Epoch 7/20, Iter 4600/8863, train loss = 1.217, time = 1.088,losses averange=4.804
Epoch 7/20, Iter 4700/8863, train loss = 2.884, time = 1.059,losses averange=4.802
Epoch 7/20, Iter 4800/8863, train loss = 2.010, time = 1.052,losses averange=4.805
Epoch 7/20, Iter 4900/8863, train loss = 1.644, time = 1.075,losses averange=4.795
Epoch 7/20, Iter 5000/8863, train loss = 7.403, time = 1.064,losses averange=4.794
Epoch 7/20, Iter 5100/8863, train loss = 2.303, time = 1.045,losses averange=4.796
Epoch 7/20, Iter 5200/8863, train loss = 6.143, time = 1.074,losses averange=4.798
Epoch 7/20, Iter 5300/8863, train loss = 4.578, time = 1.032,losses averange=4.787
Epoch 7/20, Iter 5400/8863, train loss = 2.183, time = 1.056,losses averange=4.777
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 7/20, Iter 5500/8863, train loss = 1.734, time = 1.088,losses averange=4.779
Epoch 7/20, Iter 5600/8863, train loss = 10.781, time = 1.078,losses averange=4.781
Epoch 7/20, Iter 5700/8863, train loss = 4.316, time = 1.169,losses averange=4.783
Epoch 7/20, Iter 5800/8863, train loss = 2.003, time = 1.068,losses averange=4.795
Epoch 7/20, Iter 5900/8863, train loss = 15.358, time = 1.148,losses averange=4.803
Epoch 7/20, Iter 6000/8863, train loss = 7.042, time = 1.064,losses averange=4.803
Epoch 7/20, Iter 6100/8863, train loss = 3.501, time = 1.071,losses averange=4.799
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 7/20, Iter 6200/8863, train loss = 5.860, time = 1.096,losses averange=4.797
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 7/20, Iter 6300/8863, train loss = 3.342, time = 1.047,losses averange=4.807
Epoch 7/20, Iter 6400/8863, train loss = 3.867, time = 1.063,losses averange=4.808
Epoch 7/20, Iter 6500/8863, train loss = 3.104, time = 1.070,losses averange=4.805
Epoch 7/20, Iter 6600/8863, train loss = 3.421, time = 1.059,losses averange=4.801
Epoch 7/20, Iter 6700/8863, train loss = 5.860, time = 1.042,losses averange=4.800
Epoch 7/20, Iter 6800/8863, train loss = 6.955, time = 1.084,losses averange=4.793
Epoch 7/20, Iter 6900/8863, train loss = 6.175, time = 1.073,losses averange=4.791
Epoch 7/20, Iter 7000/8863, train loss = 7.798, time = 1.147,losses averange=4.783
Epoch 7/20, Iter 7100/8863, train loss = 8.059, time = 1.078,losses averange=4.772
Epoch 7/20, Iter 7200/8863, train loss = 2.461, time = 1.066,losses averange=4.772
Epoch 7/20, Iter 7300/8863, train loss = 7.288, time = 1.082,losses averange=4.762
Epoch 7/20, Iter 7400/8863, train loss = 5.112, time = 1.031,losses averange=4.770
Epoch 7/20, Iter 7500/8863, train loss = 8.637, time = 1.027,losses averange=4.763
Epoch 7/20, Iter 7600/8863, train loss = 3.962, time = 1.081,losses averange=4.755
Epoch 7/20, Iter 7700/8863, train loss = 6.221, time = 1.096,losses averange=4.751
Epoch 7/20, Iter 7800/8863, train loss = 5.605, time = 1.032,losses averange=4.747
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 7/20, Iter 7900/8863, train loss = 5.368, time = 1.056,losses averange=4.751
Epoch 7/20, Iter 8000/8863, train loss = 3.380, time = 1.087,losses averange=4.747
Epoch 7/20, Iter 8100/8863, train loss = 2.295, time = 1.123,losses averange=4.758
Epoch 7/20, Iter 8200/8863, train loss = 10.596, time = 1.074,losses averange=4.762
Epoch 7/20, Iter 8300/8863, train loss = 5.452, time = 1.027,losses averange=4.762
Epoch 7/20, Iter 8400/8863, train loss = 8.850, time = 1.087,losses averange=4.758
Epoch 7/20, Iter 8500/8863, train loss = 3.540, time = 1.032,losses averange=4.755
Epoch 7/20, Iter 8600/8863, train loss = 1.462, time = 1.124,losses averange=4.750
Epoch 7/20, Iter 8700/8863, train loss = 5.689, time = 1.053,losses averange=4.753
Epoch 7/20, Iter 8800/8863, train loss = 1.535, time = 1.096,losses averange=4.752
Epoch 7/20, Iter 8862/8863, train loss = 2.186, time = 1.084,losses averange=4.748
avg_train_loss 4.748257707314769
Epoch 7/20, Iter 0/4370, test loss = 1.304, time = 0.568181
Epoch 7/20, Iter 100/4370, test loss = 3.679, time = 0.556754
Epoch 7/20, Iter 200/4370, test loss = 2.833, time = 0.549543
Epoch 7/20, Iter 300/4370, test loss = 5.938, time = 0.555752
Epoch 7/20, Iter 400/4370, test loss = 4.007, time = 0.549454
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 7/20, Iter 500/4370, test loss = 2.471, time = 0.549280
Epoch 7/20, Iter 600/4370, test loss = 0.849, time = 0.551743
Epoch 7/20, Iter 700/4370, test loss = 6.635, time = 0.551793
Epoch 7/20, Iter 800/4370, test loss = 2.211, time = 0.549843
Epoch 7/20, Iter 900/4370, test loss = 0.753, time = 0.554199
Epoch 7/20, Iter 1000/4370, test loss = 0.679, time = 0.550895
Epoch 7/20, Iter 1100/4370, test loss = 1.324, time = 0.553471
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 7/20, Iter 1200/4370, test loss = 1.699, time = 0.554185
Epoch 7/20, Iter 1300/4370, test loss = 3.741, time = 0.551131
Epoch 7/20, Iter 1400/4370, test loss = 4.934, time = 0.570957
Epoch 7/20, Iter 1500/4370, test loss = 1.012, time = 0.548301
Epoch 7/20, Iter 1600/4370, test loss = 2.057, time = 0.550384
Epoch 7/20, Iter 1700/4370, test loss = 1.858, time = 0.551677
Epoch 7/20, Iter 1800/4370, test loss = 1.310, time = 0.546361
Epoch 7/20, Iter 1900/4370, test loss = 2.645, time = 0.547193
Epoch 7/20, Iter 2000/4370, test loss = 1.760, time = 0.549503
Epoch 7/20, Iter 2100/4370, test loss = 1.257, time = 0.547553
Epoch 7/20, Iter 2200/4370, test loss = 0.746, time = 0.550268
Epoch 7/20, Iter 2300/4370, test loss = 2.651, time = 0.550812
Epoch 7/20, Iter 2400/4370, test loss = 1.177, time = 0.552694
Epoch 7/20, Iter 2500/4370, test loss = 2.229, time = 0.550939
Epoch 7/20, Iter 2600/4370, test loss = 1.104, time = 0.554714
Epoch 7/20, Iter 2700/4370, test loss = 4.043, time = 0.545506
Epoch 7/20, Iter 2800/4370, test loss = 1.681, time = 0.549372
Epoch 7/20, Iter 2900/4370, test loss = 1.749, time = 0.552317
Epoch 7/20, Iter 3000/4370, test loss = 1.546, time = 0.551353
Epoch 7/20, Iter 3100/4370, test loss = 1.203, time = 0.556581
Epoch 7/20, Iter 3200/4370, test loss = 2.113, time = 0.547278
Epoch 7/20, Iter 3300/4370, test loss = 0.961, time = 0.556121
Epoch 7/20, Iter 3400/4370, test loss = 1.132, time = 0.548755
Epoch 7/20, Iter 3500/4370, test loss = 1.788, time = 0.545735
Epoch 7/20, Iter 3600/4370, test loss = 2.493, time = 0.550851
Epoch 7/20, Iter 3700/4370, test loss = 3.426, time = 0.546310
Epoch 7/20, Iter 3800/4370, test loss = 2.322, time = 0.549714
Epoch 7/20, Iter 3900/4370, test loss = 2.279, time = 0.546024
Epoch 7/20, Iter 4000/4370, test loss = 1.860, time = 0.548875
Epoch 7/20, Iter 4100/4370, test loss = 1.668, time = 0.554065
Epoch 7/20, Iter 4200/4370, test loss = 0.895, time = 0.546629
Epoch 7/20, Iter 4300/4370, test loss = 1.436, time = 0.552495
Epoch 7/20, Iter 4369/4370, test loss = 3.077, time = 0.553918
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.06590283699770558, 0.04215207952053395, 0.03584784356870814, 0.033731810237841525], 'EPE': [1.576774823249614, 1.1140736840750587, 0.9780211653227937, 0.9332432815800815], 'Thres3': [0.07296641826026516, 0.04908677782347635, 0.0426381974690434, 0.040416110132222044], 'Thres1': [0.13936964214589762, 0.112600896195711, 0.1022324789081033, 0.09796124389885287], 'Thres2': [0.0904672664793707, 0.0649620904165237, 0.05741811368222299, 0.05465099383039012], 'D1': [0.08461983358845523, 0.058463835425981804, 0.05049548979477799, 0.047430130794912886]}
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 0.001
current rate is  0.001
Epoch 8/20, Iter 0/8863, train loss = 4.455, time = 1.091,losses averange=4.455
Epoch 8/20, Iter 100/8863, train loss = 2.062, time = 1.036,losses averange=4.536
Epoch 8/20, Iter 200/8863, train loss = 2.222, time = 1.045,losses averange=4.360
Epoch 8/20, Iter 300/8863, train loss = 0.984, time = 1.106,losses averange=4.259
Epoch 8/20, Iter 400/8863, train loss = 3.944, time = 1.026,losses averange=4.213
Epoch 8/20, Iter 500/8863, train loss = 3.116, time = 1.098,losses averange=4.333
Epoch 8/20, Iter 600/8863, train loss = 1.968, time = 1.092,losses averange=4.367
Epoch 8/20, Iter 700/8863, train loss = 2.583, time = 1.072,losses averange=4.370
Epoch 8/20, Iter 800/8863, train loss = 2.178, time = 1.073,losses averange=4.335
Epoch 8/20, Iter 900/8863, train loss = 1.939, time = 1.097,losses averange=4.288
Epoch 8/20, Iter 1000/8863, train loss = 4.227, time = 1.099,losses averange=4.338
Epoch 8/20, Iter 1100/8863, train loss = 8.234, time = 1.117,losses averange=4.397
Epoch 8/20, Iter 1200/8863, train loss = 2.750, time = 1.085,losses averange=4.410
Epoch 8/20, Iter 1300/8863, train loss = 2.328, time = 1.081,losses averange=4.432
Epoch 8/20, Iter 1400/8863, train loss = 11.770, time = 1.071,losses averange=4.461
Epoch 8/20, Iter 1500/8863, train loss = 4.426, time = 1.070,losses averange=4.440
Epoch 8/20, Iter 1600/8863, train loss = 2.129, time = 1.076,losses averange=4.467
Epoch 8/20, Iter 1700/8863, train loss = 3.475, time = 1.085,losses averange=4.505
Epoch 8/20, Iter 1800/8863, train loss = 4.891, time = 1.053,losses averange=4.519
Epoch 8/20, Iter 1900/8863, train loss = 2.565, time = 1.070,losses averange=4.521
Epoch 8/20, Iter 2000/8863, train loss = 5.784, time = 1.019,losses averange=4.527
Epoch 8/20, Iter 2100/8863, train loss = 2.289, time = 1.105,losses averange=4.513
Epoch 8/20, Iter 2200/8863, train loss = 5.555, time = 1.136,losses averange=4.514
Epoch 8/20, Iter 2300/8863, train loss = 2.380, time = 1.047,losses averange=4.507
Epoch 8/20, Iter 2400/8863, train loss = 0.719, time = 1.061,losses averange=4.524
Epoch 8/20, Iter 2500/8863, train loss = 7.249, time = 1.066,losses averange=4.516
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 8/20, Iter 2600/8863, train loss = 19.344, time = 1.072,losses averange=4.535
Epoch 8/20, Iter 2700/8863, train loss = 4.070, time = 1.046,losses averange=4.542
Epoch 8/20, Iter 2800/8863, train loss = 1.466, time = 1.082,losses averange=4.528
Epoch 8/20, Iter 2900/8863, train loss = 1.152, time = 1.075,losses averange=4.533
Epoch 8/20, Iter 3000/8863, train loss = 2.895, time = 1.123,losses averange=4.538
Epoch 8/20, Iter 3100/8863, train loss = 3.834, time = 1.040,losses averange=4.549
Epoch 8/20, Iter 3200/8863, train loss = 11.685, time = 1.080,losses averange=4.550
Epoch 8/20, Iter 3300/8863, train loss = 4.036, time = 1.108,losses averange=4.550
Epoch 8/20, Iter 3400/8863, train loss = 5.926, time = 1.052,losses averange=4.561
Epoch 8/20, Iter 3500/8863, train loss = 5.242, time = 1.067,losses averange=4.586
Epoch 8/20, Iter 3600/8863, train loss = 6.064, time = 1.056,losses averange=4.582
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 8/20, Iter 3700/8863, train loss = 11.800, time = 1.030,losses averange=4.584
Epoch 8/20, Iter 3800/8863, train loss = 2.775, time = 1.061,losses averange=4.581
Epoch 8/20, Iter 3900/8863, train loss = 38.424, time = 1.072,losses averange=4.605
Epoch 8/20, Iter 4000/8863, train loss = 4.018, time = 1.053,losses averange=4.618
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 8/20, Iter 4100/8863, train loss = 4.690, time = 1.031,losses averange=4.624
Epoch 8/20, Iter 4200/8863, train loss = 3.734, time = 1.081,losses averange=4.617
Epoch 8/20, Iter 4300/8863, train loss = 1.684, time = 1.027,losses averange=4.612
Epoch 8/20, Iter 4400/8863, train loss = 1.967, time = 1.070,losses averange=4.611
Epoch 8/20, Iter 4500/8863, train loss = 6.625, time = 1.022,losses averange=4.618
Epoch 8/20, Iter 4600/8863, train loss = 1.948, time = 1.083,losses averange=4.619
Epoch 8/20, Iter 4700/8863, train loss = 8.525, time = 1.061,losses averange=4.619
Epoch 8/20, Iter 4800/8863, train loss = 3.586, time = 1.080,losses averange=4.617
Epoch 8/20, Iter 4900/8863, train loss = 3.068, time = 1.034,losses averange=4.624
Epoch 8/20, Iter 5000/8863, train loss = 3.727, time = 1.036,losses averange=4.616
Epoch 8/20, Iter 5100/8863, train loss = 3.972, time = 1.037,losses averange=4.616
Epoch 8/20, Iter 5200/8863, train loss = 7.299, time = 1.060,losses averange=4.615
Epoch 8/20, Iter 5300/8863, train loss = 6.058, time = 1.087,losses averange=4.617
Epoch 8/20, Iter 5400/8863, train loss = 3.115, time = 1.050,losses averange=4.614
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 8/20, Iter 5500/8863, train loss = 2.355, time = 1.048,losses averange=4.602
Epoch 8/20, Iter 5600/8863, train loss = 2.349, time = 1.054,losses averange=4.597
Epoch 8/20, Iter 5700/8863, train loss = 8.299, time = 1.026,losses averange=4.590
Epoch 8/20, Iter 5800/8863, train loss = 8.977, time = 1.095,losses averange=4.591
Epoch 8/20, Iter 5900/8863, train loss = 7.058, time = 1.091,losses averange=4.597
Epoch 8/20, Iter 6000/8863, train loss = 5.439, time = 1.073,losses averange=4.596
Epoch 8/20, Iter 6100/8863, train loss = 3.436, time = 1.096,losses averange=4.587
Epoch 8/20, Iter 6200/8863, train loss = 3.670, time = 1.044,losses averange=4.585
Epoch 8/20, Iter 6300/8863, train loss = 5.336, time = 1.061,losses averange=4.585
Epoch 8/20, Iter 6400/8863, train loss = 7.499, time = 1.056,losses averange=4.598
Epoch 8/20, Iter 6500/8863, train loss = 2.604, time = 1.049,losses averange=4.600
Epoch 8/20, Iter 6600/8863, train loss = 2.861, time = 1.034,losses averange=4.607
Epoch 8/20, Iter 6700/8863, train loss = 5.322, time = 1.052,losses averange=4.608
Epoch 8/20, Iter 6800/8863, train loss = 0.512, time = 1.043,losses averange=4.605
Epoch 8/20, Iter 6900/8863, train loss = 6.947, time = 1.046,losses averange=4.599
Epoch 8/20, Iter 7000/8863, train loss = 6.229, time = 1.090,losses averange=4.604
Epoch 8/20, Iter 7100/8863, train loss = 5.089, time = 1.047,losses averange=4.600
Epoch 8/20, Iter 7200/8863, train loss = 3.170, time = 1.044,losses averange=4.602
Epoch 8/20, Iter 7300/8863, train loss = 6.599, time = 1.049,losses averange=4.604
Epoch 8/20, Iter 7400/8863, train loss = 1.795, time = 1.074,losses averange=4.601
Epoch 8/20, Iter 7500/8863, train loss = 2.628, time = 1.068,losses averange=4.600
Epoch 8/20, Iter 7600/8863, train loss = 4.484, time = 1.021,losses averange=4.597
Epoch 8/20, Iter 7700/8863, train loss = 2.775, time = 1.072,losses averange=4.591
Epoch 8/20, Iter 7800/8863, train loss = 10.991, time = 1.044,losses averange=4.597
Epoch 8/20, Iter 7900/8863, train loss = 4.248, time = 1.053,losses averange=4.593
Epoch 8/20, Iter 8000/8863, train loss = 1.624, time = 1.081,losses averange=4.594
Epoch 8/20, Iter 8100/8863, train loss = 4.273, time = 1.085,losses averange=4.593
Epoch 8/20, Iter 8200/8863, train loss = 1.103, time = 1.061,losses averange=4.592
Epoch 8/20, Iter 8300/8863, train loss = 2.822, time = 1.112,losses averange=4.583
Epoch 8/20, Iter 8400/8863, train loss = 2.939, time = 1.024,losses averange=4.583
Epoch 8/20, Iter 8500/8863, train loss = 13.012, time = 1.074,losses averange=4.584
Epoch 8/20, Iter 8600/8863, train loss = 3.219, time = 1.056,losses averange=4.583
Epoch 8/20, Iter 8700/8863, train loss = 6.883, time = 1.082,losses averange=4.587
Epoch 8/20, Iter 8800/8863, train loss = 5.977, time = 1.070,losses averange=4.588
Epoch 8/20, Iter 8862/8863, train loss = 4.232, time = 1.113,losses averange=4.585
avg_train_loss 4.585398332856517
Epoch 8/20, Iter 0/4370, test loss = 1.171, time = 2.756534
Epoch 8/20, Iter 100/4370, test loss = 3.642, time = 2.676277
Epoch 8/20, Iter 200/4370, test loss = 2.719, time = 2.598347
Epoch 8/20, Iter 300/4370, test loss = 5.571, time = 2.358282
Epoch 8/20, Iter 400/4370, test loss = 4.030, time = 2.464856
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 8/20, Iter 500/4370, test loss = 2.139, time = 2.645505
Epoch 8/20, Iter 600/4370, test loss = 0.894, time = 2.343302
Epoch 8/20, Iter 700/4370, test loss = 6.838, time = 2.347876
Epoch 8/20, Iter 800/4370, test loss = 2.169, time = 2.551835
Epoch 8/20, Iter 900/4370, test loss = 0.790, time = 2.384391
Epoch 8/20, Iter 1000/4370, test loss = 0.702, time = 2.244554
Epoch 8/20, Iter 1100/4370, test loss = 1.334, time = 2.570300
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 8/20, Iter 1200/4370, test loss = 1.449, time = 2.541343
Epoch 8/20, Iter 1300/4370, test loss = 2.931, time = 2.286659
Epoch 8/20, Iter 1400/4370, test loss = 4.998, time = 2.664353
Epoch 8/20, Iter 1500/4370, test loss = 0.998, time = 2.630759
Epoch 8/20, Iter 1600/4370, test loss = 2.631, time = 2.324517
Epoch 8/20, Iter 1700/4370, test loss = 1.917, time = 2.417027
Epoch 8/20, Iter 1800/4370, test loss = 1.174, time = 2.615572
Epoch 8/20, Iter 1900/4370, test loss = 2.438, time = 2.687886
Epoch 8/20, Iter 2000/4370, test loss = 1.596, time = 2.609906
Epoch 8/20, Iter 2100/4370, test loss = 1.260, time = 2.566168
Epoch 8/20, Iter 2200/4370, test loss = 0.830, time = 2.407641
Epoch 8/20, Iter 2300/4370, test loss = 2.528, time = 2.696391
Epoch 8/20, Iter 2400/4370, test loss = 1.241, time = 2.378794
Epoch 8/20, Iter 2500/4370, test loss = 1.850, time = 2.770230
Epoch 8/20, Iter 2600/4370, test loss = 1.026, time = 2.850566
Epoch 8/20, Iter 2700/4370, test loss = 3.969, time = 2.379399
Epoch 8/20, Iter 2800/4370, test loss = 1.738, time = 2.566503
Epoch 8/20, Iter 2900/4370, test loss = 1.646, time = 2.424092
Epoch 8/20, Iter 3000/4370, test loss = 1.726, time = 2.313009
Epoch 8/20, Iter 3100/4370, test loss = 1.155, time = 2.593116
Epoch 8/20, Iter 3200/4370, test loss = 2.063, time = 2.659177
Epoch 8/20, Iter 3300/4370, test loss = 0.975, time = 2.579757
Epoch 8/20, Iter 3400/4370, test loss = 1.093, time = 2.436745
Epoch 8/20, Iter 3500/4370, test loss = 1.640, time = 2.655718
Epoch 8/20, Iter 3600/4370, test loss = 2.198, time = 2.775588
Epoch 8/20, Iter 3700/4370, test loss = 3.292, time = 2.799430
Epoch 8/20, Iter 3800/4370, test loss = 2.351, time = 3.080444
Epoch 8/20, Iter 3900/4370, test loss = 2.193, time = 2.809582
Epoch 8/20, Iter 4000/4370, test loss = 1.837, time = 2.645749
Epoch 8/20, Iter 4100/4370, test loss = 1.605, time = 2.503015
Epoch 8/20, Iter 4200/4370, test loss = 0.891, time = 2.223180
Epoch 8/20, Iter 4300/4370, test loss = 1.403, time = 2.641274
Epoch 8/20, Iter 4369/4370, test loss = 3.177, time = 0.557636
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.06393997092577852, 0.041400073135103306, 0.03491164235077432, 0.03288874037095475], 'EPE': [1.561096579443399, 1.102014216245312, 0.9692405816210217, 0.9261382579871664], 'Thres3': [0.07085609485243939, 0.04818911568285126, 0.041666057991509665, 0.03957014734195055], 'Thres1': [0.13618112355342787, 0.10946488808222474, 0.09985032283127718, 0.09546896523904712], 'Thres2': [0.08792189005229545, 0.06369934660889788, 0.05612353197367142, 0.05336416854919521], 'D1': [0.08247886859775612, 0.05708169773470363, 0.04884750425082459, 0.04577405715624437]}
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 0.001
current rate is  0.001
Epoch 9/20, Iter 0/8863, train loss = 2.460, time = 1.125,losses averange=2.460
Epoch 9/20, Iter 100/8863, train loss = 3.714, time = 1.103,losses averange=4.540
Epoch 9/20, Iter 200/8863, train loss = 3.994, time = 1.081,losses averange=4.846
Epoch 9/20, Iter 300/8863, train loss = 17.792, time = 1.085,losses averange=4.829
Epoch 9/20, Iter 400/8863, train loss = 5.026, time = 1.088,losses averange=4.720
Epoch 9/20, Iter 500/8863, train loss = 9.821, time = 1.082,losses averange=4.777
Epoch 9/20, Iter 600/8863, train loss = 7.067, time = 1.036,losses averange=4.711
Epoch 9/20, Iter 700/8863, train loss = 4.101, time = 1.049,losses averange=4.751
Epoch 9/20, Iter 800/8863, train loss = 1.690, time = 1.046,losses averange=4.648
Epoch 9/20, Iter 900/8863, train loss = 5.555, time = 1.036,losses averange=4.599
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 9/20, Iter 1000/8863, train loss = 2.937, time = 1.030,losses averange=4.541
Epoch 9/20, Iter 1100/8863, train loss = 2.559, time = 1.152,losses averange=4.496
Epoch 9/20, Iter 1200/8863, train loss = 4.780, time = 1.039,losses averange=4.481
Epoch 9/20, Iter 1300/8863, train loss = 2.084, time = 1.064,losses averange=4.457
Epoch 9/20, Iter 1400/8863, train loss = 3.345, time = 1.076,losses averange=4.474
Epoch 9/20, Iter 1500/8863, train loss = 4.859, time = 1.056,losses averange=4.474
Epoch 9/20, Iter 1600/8863, train loss = 4.654, time = 1.075,losses averange=4.469
Epoch 9/20, Iter 1700/8863, train loss = 3.348, time = 1.050,losses averange=4.455
Epoch 9/20, Iter 1800/8863, train loss = 7.287, time = 1.088,losses averange=4.442
Epoch 9/20, Iter 1900/8863, train loss = 6.230, time = 1.068,losses averange=4.436
Epoch 9/20, Iter 2000/8863, train loss = 1.728, time = 1.032,losses averange=4.441
Epoch 9/20, Iter 2100/8863, train loss = 4.517, time = 1.046,losses averange=4.464
Epoch 9/20, Iter 2200/8863, train loss = 2.851, time = 1.141,losses averange=4.469
Epoch 9/20, Iter 2300/8863, train loss = 3.456, time = 1.067,losses averange=4.458
Epoch 9/20, Iter 2400/8863, train loss = 0.915, time = 1.030,losses averange=4.465
Epoch 9/20, Iter 2500/8863, train loss = 2.467, time = 1.054,losses averange=4.471
Epoch 9/20, Iter 2600/8863, train loss = 3.743, time = 1.024,losses averange=4.470
Epoch 9/20, Iter 2700/8863, train loss = 1.968, time = 1.074,losses averange=4.456
Epoch 9/20, Iter 2800/8863, train loss = 3.707, time = 1.081,losses averange=4.453
Epoch 9/20, Iter 2900/8863, train loss = 7.310, time = 1.046,losses averange=4.453
Epoch 9/20, Iter 3000/8863, train loss = 1.837, time = 1.019,losses averange=4.430
Epoch 9/20, Iter 3100/8863, train loss = 3.567, time = 1.078,losses averange=4.421
Epoch 9/20, Iter 3200/8863, train loss = 5.235, time = 1.060,losses averange=4.417
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 9/20, Iter 3300/8863, train loss = 3.557, time = 1.091,losses averange=4.411
Epoch 9/20, Iter 3400/8863, train loss = 4.436, time = 1.058,losses averange=4.428
Epoch 9/20, Iter 3500/8863, train loss = 3.382, time = 1.031,losses averange=4.444
Epoch 9/20, Iter 3600/8863, train loss = 3.512, time = 1.047,losses averange=4.456
Epoch 9/20, Iter 3700/8863, train loss = 1.976, time = 1.058,losses averange=4.452
Epoch 9/20, Iter 3800/8863, train loss = 1.666, time = 1.087,losses averange=4.451
Epoch 9/20, Iter 3900/8863, train loss = 2.841, time = 1.051,losses averange=4.445
Epoch 9/20, Iter 4000/8863, train loss = 2.500, time = 1.093,losses averange=4.442
Epoch 9/20, Iter 4100/8863, train loss = 4.567, time = 1.046,losses averange=4.433
Epoch 9/20, Iter 4200/8863, train loss = 5.492, time = 1.090,losses averange=4.433
Epoch 9/20, Iter 4300/8863, train loss = 13.105, time = 1.037,losses averange=4.435
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 9/20, Iter 4400/8863, train loss = 7.976, time = 1.060,losses averange=4.431
Epoch 9/20, Iter 4500/8863, train loss = 6.377, time = 1.085,losses averange=4.437
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 9/20, Iter 4600/8863, train loss = 2.926, time = 1.080,losses averange=4.432
Epoch 9/20, Iter 4700/8863, train loss = 10.496, time = 1.069,losses averange=4.426
Epoch 9/20, Iter 4800/8863, train loss = 4.003, time = 1.081,losses averange=4.419
Epoch 9/20, Iter 4900/8863, train loss = 1.927, time = 1.048,losses averange=4.409
Epoch 9/20, Iter 5000/8863, train loss = 10.524, time = 1.044,losses averange=4.410
Epoch 9/20, Iter 5100/8863, train loss = 2.825, time = 1.117,losses averange=4.410
Epoch 9/20, Iter 5200/8863, train loss = 1.387, time = 1.051,losses averange=4.408
Epoch 9/20, Iter 5300/8863, train loss = 11.411, time = 1.056,losses averange=4.412
Epoch 9/20, Iter 5400/8863, train loss = 2.357, time = 1.066,losses averange=4.399
Epoch 9/20, Iter 5500/8863, train loss = 4.602, time = 1.031,losses averange=4.393
Epoch 9/20, Iter 5600/8863, train loss = 15.884, time = 1.055,losses averange=4.401
Epoch 9/20, Iter 5700/8863, train loss = 2.371, time = 1.044,losses averange=4.411
Epoch 9/20, Iter 5800/8863, train loss = 0.489, time = 1.084,losses averange=4.405
Epoch 9/20, Iter 5900/8863, train loss = 2.681, time = 1.108,losses averange=4.410
Epoch 9/20, Iter 6000/8863, train loss = 11.789, time = 1.077,losses averange=4.415
Epoch 9/20, Iter 6100/8863, train loss = 4.505, time = 1.073,losses averange=4.408
Epoch 9/20, Iter 6200/8863, train loss = 7.892, time = 1.045,losses averange=4.408
Epoch 9/20, Iter 6300/8863, train loss = 7.765, time = 1.058,losses averange=4.400
Epoch 9/20, Iter 6400/8863, train loss = 5.443, time = 1.046,losses averange=4.400
Epoch 9/20, Iter 6500/8863, train loss = 7.533, time = 1.077,losses averange=4.407
Epoch 9/20, Iter 6600/8863, train loss = 7.796, time = 1.059,losses averange=4.404
Epoch 9/20, Iter 6700/8863, train loss = 5.315, time = 1.076,losses averange=4.404
Epoch 9/20, Iter 6800/8863, train loss = 1.939, time = 1.086,losses averange=4.405
Epoch 9/20, Iter 6900/8863, train loss = 2.744, time = 1.100,losses averange=4.405
Epoch 9/20, Iter 7000/8863, train loss = 8.333, time = 1.106,losses averange=4.407
Epoch 9/20, Iter 7100/8863, train loss = 6.186, time = 1.081,losses averange=4.399
Epoch 9/20, Iter 7200/8863, train loss = 3.949, time = 1.089,losses averange=4.403
Epoch 9/20, Iter 7300/8863, train loss = 3.161, time = 1.090,losses averange=4.399
Epoch 9/20, Iter 7400/8863, train loss = 3.596, time = 1.034,losses averange=4.408
Epoch 9/20, Iter 7500/8863, train loss = 2.937, time = 1.069,losses averange=4.408
Epoch 9/20, Iter 7600/8863, train loss = 4.120, time = 1.030,losses averange=4.401
Epoch 9/20, Iter 7700/8863, train loss = 3.153, time = 1.052,losses averange=4.407
Epoch 9/20, Iter 7800/8863, train loss = 3.238, time = 1.043,losses averange=4.403
Epoch 9/20, Iter 7900/8863, train loss = 2.958, time = 1.110,losses averange=4.397
Epoch 9/20, Iter 8000/8863, train loss = 4.516, time = 1.053,losses averange=4.405
Epoch 9/20, Iter 8100/8863, train loss = 1.941, time = 1.129,losses averange=4.408
Epoch 9/20, Iter 8200/8863, train loss = 2.996, time = 1.082,losses averange=4.405
Epoch 9/20, Iter 8300/8863, train loss = 3.525, time = 1.086,losses averange=4.409
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 9/20, Iter 8400/8863, train loss = 1.406, time = 1.041,losses averange=4.409
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 9/20, Iter 8500/8863, train loss = 4.807, time = 1.082,losses averange=4.411
Epoch 9/20, Iter 8600/8863, train loss = 4.774, time = 1.052,losses averange=4.412
Epoch 9/20, Iter 8700/8863, train loss = 4.986, time = 1.082,losses averange=4.409
Epoch 9/20, Iter 8800/8863, train loss = 5.164, time = 1.054,losses averange=4.407
Epoch 9/20, Iter 8862/8863, train loss = 13.078, time = 1.109,losses averange=4.407
avg_train_loss 4.407479025047762
Epoch 9/20, Iter 0/4370, test loss = 1.209, time = 0.577383
Epoch 9/20, Iter 100/4370, test loss = 3.524, time = 0.546798
Epoch 9/20, Iter 200/4370, test loss = 2.673, time = 0.548980
Epoch 9/20, Iter 300/4370, test loss = 5.749, time = 0.549176
Epoch 9/20, Iter 400/4370, test loss = 3.920, time = 0.559906
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 9/20, Iter 500/4370, test loss = 2.157, time = 0.547070
Epoch 9/20, Iter 600/4370, test loss = 0.861, time = 0.547303
Epoch 9/20, Iter 700/4370, test loss = 7.648, time = 0.548110
Epoch 9/20, Iter 800/4370, test loss = 2.232, time = 0.555354
Epoch 9/20, Iter 900/4370, test loss = 0.756, time = 0.553478
Epoch 9/20, Iter 1000/4370, test loss = 0.644, time = 0.549101
Epoch 9/20, Iter 1100/4370, test loss = 1.140, time = 0.547419
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 9/20, Iter 1200/4370, test loss = 1.530, time = 0.548758
Epoch 9/20, Iter 1300/4370, test loss = 3.506, time = 0.556334
Epoch 9/20, Iter 1400/4370, test loss = 4.586, time = 0.549731
Epoch 9/20, Iter 1500/4370, test loss = 1.035, time = 0.552463
Epoch 9/20, Iter 1600/4370, test loss = 1.999, time = 0.545195
Epoch 9/20, Iter 1700/4370, test loss = 1.716, time = 0.550001
Epoch 9/20, Iter 1800/4370, test loss = 1.232, time = 0.554526
Epoch 9/20, Iter 1900/4370, test loss = 2.327, time = 0.549119
Epoch 9/20, Iter 2000/4370, test loss = 1.492, time = 0.550070
Epoch 9/20, Iter 2100/4370, test loss = 1.261, time = 0.548312
Epoch 9/20, Iter 2200/4370, test loss = 0.780, time = 0.548650
Epoch 9/20, Iter 2300/4370, test loss = 2.288, time = 0.545876
Epoch 9/20, Iter 2400/4370, test loss = 1.216, time = 0.545727
Epoch 9/20, Iter 2500/4370, test loss = 1.791, time = 0.547127
Epoch 9/20, Iter 2600/4370, test loss = 1.099, time = 0.551275
Epoch 9/20, Iter 2700/4370, test loss = 4.182, time = 0.544150
Epoch 9/20, Iter 2800/4370, test loss = 1.683, time = 0.548079
Epoch 9/20, Iter 2900/4370, test loss = 1.617, time = 0.550079
Epoch 9/20, Iter 3000/4370, test loss = 1.505, time = 0.546351
Epoch 9/20, Iter 3100/4370, test loss = 1.170, time = 0.549445
Epoch 9/20, Iter 3200/4370, test loss = 1.887, time = 0.551235
Epoch 9/20, Iter 3300/4370, test loss = 0.948, time = 0.554599
Epoch 9/20, Iter 3400/4370, test loss = 1.023, time = 0.550923
Epoch 9/20, Iter 3500/4370, test loss = 1.626, time = 0.544919
Epoch 9/20, Iter 3600/4370, test loss = 2.345, time = 0.556793
Epoch 9/20, Iter 3700/4370, test loss = 3.330, time = 0.552785
Epoch 9/20, Iter 3800/4370, test loss = 2.291, time = 0.546234
Epoch 9/20, Iter 3900/4370, test loss = 2.199, time = 0.554231
Epoch 9/20, Iter 4000/4370, test loss = 1.647, time = 0.546709
Epoch 9/20, Iter 4100/4370, test loss = 1.399, time = 0.548341
Epoch 9/20, Iter 4200/4370, test loss = 0.825, time = 0.548320
Epoch 9/20, Iter 4300/4370, test loss = 1.317, time = 0.547707
Epoch 9/20, Iter 4369/4370, test loss = 2.772, time = 0.548221
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.06162096237203264, 0.040254892494201285, 0.03418637423976421, 0.03205648136146162], 'EPE': [1.5371826012940646, 1.095916633191998, 0.9594374581080279, 0.9114994431728629], 'Thres3': [0.06830274514316899, 0.04684164265998654, 0.0406406344041906, 0.03837110648380307], 'Thres1': [0.13261820710002012, 0.10728404897753174, 0.09749018844127552, 0.09307041549778093], 'Thres2': [0.08495833003132666, 0.061955714082021426, 0.054665973745137285, 0.05184479559957129], 'D1': [0.07966279864281382, 0.05593180296179632, 0.04827774544811256, 0.045220143603186554]}
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 0.0005
current rate is  0.001
Epoch 10/20, Iter 0/8863, train loss = 2.881, time = 1.082,losses averange=2.881
Epoch 10/20, Iter 100/8863, train loss = 2.594, time = 1.056,losses averange=4.368
Epoch 10/20, Iter 200/8863, train loss = 3.903, time = 1.048,losses averange=4.138
Epoch 10/20, Iter 300/8863, train loss = 2.355, time = 1.084,losses averange=4.179
Epoch 10/20, Iter 400/8863, train loss = 4.129, time = 1.072,losses averange=4.300
Epoch 10/20, Iter 500/8863, train loss = 5.179, time = 1.050,losses averange=4.283
Epoch 10/20, Iter 600/8863, train loss = 3.381, time = 1.050,losses averange=4.241
Epoch 10/20, Iter 700/8863, train loss = 7.151, time = 1.044,losses averange=4.305
Epoch 10/20, Iter 800/8863, train loss = 1.029, time = 1.079,losses averange=4.267
Epoch 10/20, Iter 900/8863, train loss = 2.277, time = 1.052,losses averange=4.267
Epoch 10/20, Iter 1000/8863, train loss = 4.231, time = 1.026,losses averange=4.284
Epoch 10/20, Iter 1100/8863, train loss = 1.694, time = 1.101,losses averange=4.237
Epoch 10/20, Iter 1200/8863, train loss = 3.116, time = 1.073,losses averange=4.226
Epoch 10/20, Iter 1300/8863, train loss = 3.286, time = 1.064,losses averange=4.211
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 10/20, Iter 1400/8863, train loss = 5.523, time = 1.090,losses averange=4.215
Epoch 10/20, Iter 1500/8863, train loss = 2.381, time = 1.077,losses averange=4.183
Epoch 10/20, Iter 1600/8863, train loss = 3.623, time = 1.069,losses averange=4.180
Epoch 10/20, Iter 1700/8863, train loss = 1.956, time = 1.105,losses averange=4.169
Epoch 10/20, Iter 1800/8863, train loss = 2.713, time = 1.044,losses averange=4.172
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 10/20, Iter 1900/8863, train loss = 4.975, time = 1.058,losses averange=4.165
Epoch 10/20, Iter 2000/8863, train loss = 2.460, time = 1.084,losses averange=4.161
Epoch 10/20, Iter 2100/8863, train loss = 2.838, time = 1.024,losses averange=4.153
Epoch 10/20, Iter 2200/8863, train loss = 2.297, time = 1.100,losses averange=4.122
Epoch 10/20, Iter 2300/8863, train loss = 2.098, time = 1.037,losses averange=4.145
Epoch 10/20, Iter 2400/8863, train loss = 3.946, time = 1.059,losses averange=4.126
Epoch 10/20, Iter 2500/8863, train loss = 2.106, time = 1.051,losses averange=4.124
Epoch 10/20, Iter 2600/8863, train loss = 2.261, time = 1.078,losses averange=4.123
Epoch 10/20, Iter 2700/8863, train loss = 1.539, time = 1.023,losses averange=4.112
Epoch 10/20, Iter 2800/8863, train loss = 1.699, time = 1.032,losses averange=4.083
Epoch 10/20, Iter 2900/8863, train loss = 0.698, time = 1.080,losses averange=4.070
Epoch 10/20, Iter 3000/8863, train loss = 3.254, time = 1.032,losses averange=4.076
Epoch 10/20, Iter 3100/8863, train loss = 1.617, time = 1.076,losses averange=4.065
Epoch 10/20, Iter 3200/8863, train loss = 4.587, time = 1.066,losses averange=4.063
Epoch 10/20, Iter 3300/8863, train loss = 1.679, time = 1.094,losses averange=4.050
Epoch 10/20, Iter 3400/8863, train loss = 2.630, time = 1.083,losses averange=4.054
Epoch 10/20, Iter 3500/8863, train loss = 2.123, time = 1.073,losses averange=4.048
Epoch 10/20, Iter 3600/8863, train loss = 5.715, time = 1.067,losses averange=4.042
Epoch 10/20, Iter 3700/8863, train loss = 1.639, time = 1.070,losses averange=4.035
Epoch 10/20, Iter 3800/8863, train loss = 10.818, time = 1.105,losses averange=4.032
Epoch 10/20, Iter 3900/8863, train loss = 8.857, time = 1.035,losses averange=4.044
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 10/20, Iter 4000/8863, train loss = 5.427, time = 1.050,losses averange=4.040
Epoch 10/20, Iter 4100/8863, train loss = 3.321, time = 1.041,losses averange=4.058
Epoch 10/20, Iter 4200/8863, train loss = 2.427, time = 1.038,losses averange=4.038
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 10/20, Iter 4300/8863, train loss = 0.990, time = 1.028,losses averange=4.040
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 10/20, Iter 4400/8863, train loss = 2.981, time = 1.055,losses averange=4.035
Epoch 10/20, Iter 4500/8863, train loss = 2.545, time = 1.097,losses averange=4.030
Epoch 10/20, Iter 4600/8863, train loss = 4.303, time = 1.051,losses averange=4.026
Epoch 10/20, Iter 4700/8863, train loss = 3.573, time = 1.040,losses averange=4.023
Epoch 10/20, Iter 4800/8863, train loss = 1.801, time = 1.081,losses averange=4.031
Epoch 10/20, Iter 4900/8863, train loss = 3.919, time = 1.097,losses averange=4.040
Epoch 10/20, Iter 5000/8863, train loss = 2.200, time = 1.058,losses averange=4.035
Epoch 10/20, Iter 5100/8863, train loss = 4.047, time = 1.102,losses averange=4.036
Epoch 10/20, Iter 5200/8863, train loss = 1.722, time = 1.080,losses averange=4.037
Epoch 10/20, Iter 5300/8863, train loss = 6.429, time = 1.054,losses averange=4.035
Epoch 10/20, Iter 5400/8863, train loss = 7.714, time = 1.057,losses averange=4.035
Epoch 10/20, Iter 5500/8863, train loss = 1.401, time = 1.049,losses averange=4.034
Epoch 10/20, Iter 5600/8863, train loss = 6.844, time = 1.083,losses averange=4.033
Epoch 10/20, Iter 5700/8863, train loss = 4.387, time = 1.076,losses averange=4.028
Epoch 10/20, Iter 5800/8863, train loss = 3.361, time = 1.064,losses averange=4.039
Epoch 10/20, Iter 5900/8863, train loss = 4.611, time = 1.080,losses averange=4.037
Epoch 10/20, Iter 6000/8863, train loss = 2.761, time = 1.030,losses averange=4.037
Epoch 10/20, Iter 6100/8863, train loss = 7.527, time = 1.081,losses averange=4.026
Epoch 10/20, Iter 6200/8863, train loss = 3.353, time = 1.078,losses averange=4.038
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 10/20, Iter 6300/8863, train loss = 3.173, time = 1.095,losses averange=4.037
Epoch 10/20, Iter 6400/8863, train loss = 3.461, time = 1.056,losses averange=4.034
Epoch 10/20, Iter 6500/8863, train loss = 3.182, time = 1.109,losses averange=4.036
Epoch 10/20, Iter 6600/8863, train loss = 2.883, time = 1.064,losses averange=4.028
Epoch 10/20, Iter 6700/8863, train loss = 1.728, time = 1.084,losses averange=4.026
Epoch 10/20, Iter 6800/8863, train loss = 6.495, time = 1.076,losses averange=4.031
Epoch 10/20, Iter 6900/8863, train loss = 2.913, time = 1.096,losses averange=4.032
Epoch 10/20, Iter 7000/8863, train loss = 5.394, time = 1.133,losses averange=4.029
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 10/20, Iter 7100/8863, train loss = 1.880, time = 1.059,losses averange=4.029
Epoch 10/20, Iter 7200/8863, train loss = 2.812, time = 1.091,losses averange=4.031
Epoch 10/20, Iter 7300/8863, train loss = 4.208, time = 1.074,losses averange=4.029
Epoch 10/20, Iter 7400/8863, train loss = 2.411, time = 1.080,losses averange=4.037
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 10/20, Iter 7500/8863, train loss = 6.996, time = 1.086,losses averange=4.040
Epoch 10/20, Iter 7600/8863, train loss = 5.177, time = 1.087,losses averange=4.043
Epoch 10/20, Iter 7700/8863, train loss = 5.135, time = 1.091,losses averange=4.042
Epoch 10/20, Iter 7800/8863, train loss = 4.075, time = 1.025,losses averange=4.043
Epoch 10/20, Iter 7900/8863, train loss = 1.309, time = 1.074,losses averange=4.039
Epoch 10/20, Iter 8000/8863, train loss = 2.577, time = 1.069,losses averange=4.035
Epoch 10/20, Iter 8100/8863, train loss = 3.628, time = 1.077,losses averange=4.034
Epoch 10/20, Iter 8200/8863, train loss = 3.949, time = 1.091,losses averange=4.032
Epoch 10/20, Iter 8300/8863, train loss = 2.809, time = 1.035,losses averange=4.032
Epoch 10/20, Iter 8400/8863, train loss = 5.903, time = 1.061,losses averange=4.033
Epoch 10/20, Iter 8500/8863, train loss = 2.763, time = 1.028,losses averange=4.032
Epoch 10/20, Iter 8600/8863, train loss = 3.118, time = 1.077,losses averange=4.029
Epoch 10/20, Iter 8700/8863, train loss = 3.289, time = 1.083,losses averange=4.027
Epoch 10/20, Iter 8800/8863, train loss = 8.482, time = 1.054,losses averange=4.027
Epoch 10/20, Iter 8862/8863, train loss = 2.387, time = 1.157,losses averange=4.025
avg_train_loss 4.024930167249292
Epoch 10/20, Iter 0/4370, test loss = 1.073, time = 3.009354
Epoch 10/20, Iter 100/4370, test loss = 3.488, time = 2.578137
Epoch 10/20, Iter 200/4370, test loss = 2.924, time = 2.351899
Epoch 10/20, Iter 300/4370, test loss = 5.169, time = 2.577409
Epoch 10/20, Iter 400/4370, test loss = 3.367, time = 2.419023
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 10/20, Iter 500/4370, test loss = 1.793, time = 2.512181
Epoch 10/20, Iter 600/4370, test loss = 0.874, time = 2.442926
Epoch 10/20, Iter 700/4370, test loss = 7.450, time = 2.603021
Epoch 10/20, Iter 800/4370, test loss = 1.886, time = 2.672257
Epoch 10/20, Iter 900/4370, test loss = 0.752, time = 2.377375
Epoch 10/20, Iter 1000/4370, test loss = 0.599, time = 2.145570
Epoch 10/20, Iter 1100/4370, test loss = 1.086, time = 2.830416
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 10/20, Iter 1200/4370, test loss = 1.368, time = 2.482719
Epoch 10/20, Iter 1300/4370, test loss = 3.135, time = 2.422344
Epoch 10/20, Iter 1400/4370, test loss = 4.535, time = 2.867718
Epoch 10/20, Iter 1500/4370, test loss = 1.006, time = 2.621157
Epoch 10/20, Iter 1600/4370, test loss = 2.057, time = 2.399706
Epoch 10/20, Iter 1700/4370, test loss = 1.740, time = 2.469142
Epoch 10/20, Iter 1800/4370, test loss = 1.111, time = 2.466867
Epoch 10/20, Iter 1900/4370, test loss = 2.004, time = 2.661820
Epoch 10/20, Iter 2000/4370, test loss = 1.470, time = 2.606065
Epoch 10/20, Iter 2100/4370, test loss = 1.148, time = 2.531072
Epoch 10/20, Iter 2200/4370, test loss = 0.692, time = 2.306040
Epoch 10/20, Iter 2300/4370, test loss = 2.365, time = 2.645873
Epoch 10/20, Iter 2400/4370, test loss = 1.191, time = 2.429285
Epoch 10/20, Iter 2500/4370, test loss = 1.786, time = 2.773677
Epoch 10/20, Iter 2600/4370, test loss = 1.035, time = 2.708509
Epoch 10/20, Iter 2700/4370, test loss = 3.263, time = 2.192416
Epoch 10/20, Iter 2800/4370, test loss = 1.421, time = 2.428602
Epoch 10/20, Iter 2900/4370, test loss = 1.574, time = 2.591101
Epoch 10/20, Iter 3000/4370, test loss = 1.572, time = 2.332579
Epoch 10/20, Iter 3100/4370, test loss = 1.090, time = 2.613991
Epoch 10/20, Iter 3200/4370, test loss = 1.873, time = 3.048064
Epoch 10/20, Iter 3300/4370, test loss = 0.885, time = 2.696884
Epoch 10/20, Iter 3400/4370, test loss = 0.998, time = 2.537133
Epoch 10/20, Iter 3500/4370, test loss = 1.504, time = 2.467451
Epoch 10/20, Iter 3600/4370, test loss = 2.194, time = 2.737328
Epoch 10/20, Iter 3700/4370, test loss = 3.146, time = 2.784426
Epoch 10/20, Iter 3800/4370, test loss = 2.257, time = 2.900682
Epoch 10/20, Iter 3900/4370, test loss = 2.083, time = 2.583649
Epoch 10/20, Iter 4000/4370, test loss = 1.555, time = 2.456507
Epoch 10/20, Iter 4100/4370, test loss = 1.315, time = 2.574562
Epoch 10/20, Iter 4200/4370, test loss = 0.775, time = 2.570204
Epoch 10/20, Iter 4300/4370, test loss = 1.299, time = 2.538648
Epoch 10/20, Iter 4369/4370, test loss = 2.708, time = 0.551159
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.0598006816203674, 0.03800679201263406, 0.031777199436494874, 0.02982348596394271], 'EPE': [1.4345579555910293, 1.0158303704803269, 0.889405481708268, 0.8443635493789712], 'Thres3': [0.06644489431372275, 0.04439507242184541, 0.03803403315078936, 0.03597862612561576], 'Thres1': [0.1293003474255636, 0.10191778397801368, 0.09159901270544843, 0.08759088789302541], 'Thres2': [0.08298327756429717, 0.0588017407976287, 0.051264413093691966, 0.04868427178421797], 'D1': [0.07750117635563254, 0.052674495330873185, 0.04453058569911586, 0.041638834526105964]}
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 0.0005
current rate is  0.001
Epoch 11/20, Iter 0/8863, train loss = 5.319, time = 1.125,losses averange=5.319
Epoch 11/20, Iter 100/8863, train loss = 7.500, time = 1.067,losses averange=3.643
Epoch 11/20, Iter 200/8863, train loss = 2.155, time = 1.049,losses averange=3.712
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 11/20, Iter 300/8863, train loss = 7.120, time = 1.071,losses averange=3.706
Epoch 11/20, Iter 400/8863, train loss = 6.034, time = 1.057,losses averange=3.778
Epoch 11/20, Iter 500/8863, train loss = 2.704, time = 1.088,losses averange=3.809
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 11/20, Iter 600/8863, train loss = 6.007, time = 1.031,losses averange=3.783
Epoch 11/20, Iter 700/8863, train loss = 2.346, time = 1.092,losses averange=3.868
Epoch 11/20, Iter 800/8863, train loss = 1.573, time = 1.025,losses averange=3.836
Epoch 11/20, Iter 900/8863, train loss = 5.191, time = 1.050,losses averange=3.817
Epoch 11/20, Iter 1000/8863, train loss = 1.499, time = 1.038,losses averange=3.854
Epoch 11/20, Iter 1100/8863, train loss = 1.330, time = 1.151,losses averange=3.900
Epoch 11/20, Iter 1200/8863, train loss = 2.800, time = 1.019,losses averange=3.906
Epoch 11/20, Iter 1300/8863, train loss = 3.751, time = 1.055,losses averange=3.873
Epoch 11/20, Iter 1400/8863, train loss = 4.960, time = 1.062,losses averange=3.874
Epoch 11/20, Iter 1500/8863, train loss = 3.954, time = 1.056,losses averange=3.869
Epoch 11/20, Iter 1600/8863, train loss = 4.857, time = 1.092,losses averange=3.872
Epoch 11/20, Iter 1700/8863, train loss = 2.830, time = 1.055,losses averange=3.871
Epoch 11/20, Iter 1800/8863, train loss = 3.987, time = 1.064,losses averange=3.896
Epoch 11/20, Iter 1900/8863, train loss = 3.566, time = 1.064,losses averange=3.910
Epoch 11/20, Iter 2000/8863, train loss = 3.196, time = 1.054,losses averange=3.902
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 11/20, Iter 2100/8863, train loss = 3.943, time = 1.036,losses averange=3.872
Epoch 11/20, Iter 2200/8863, train loss = 3.586, time = 1.137,losses averange=3.903
Epoch 11/20, Iter 2300/8863, train loss = 3.541, time = 1.104,losses averange=3.905
Epoch 11/20, Iter 2400/8863, train loss = 4.900, time = 1.071,losses averange=3.906
Epoch 11/20, Iter 2500/8863, train loss = 3.625, time = 1.068,losses averange=3.911
Epoch 11/20, Iter 2600/8863, train loss = 2.024, time = 1.035,losses averange=3.908
Epoch 11/20, Iter 2700/8863, train loss = 7.737, time = 1.080,losses averange=3.898
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 11/20, Iter 2800/8863, train loss = 2.419, time = 1.032,losses averange=3.901
Epoch 11/20, Iter 2900/8863, train loss = 1.263, time = 1.079,losses averange=3.893
Epoch 11/20, Iter 3000/8863, train loss = 3.078, time = 1.104,losses averange=3.890
Epoch 11/20, Iter 3100/8863, train loss = 7.217, time = 1.073,losses averange=3.889
Epoch 11/20, Iter 3200/8863, train loss = 2.059, time = 1.067,losses averange=3.891
Epoch 11/20, Iter 3300/8863, train loss = 1.340, time = 1.125,losses averange=3.897
Epoch 11/20, Iter 3400/8863, train loss = 7.167, time = 1.095,losses averange=3.904
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 11/20, Iter 3500/8863, train loss = 3.071, time = 1.065,losses averange=3.894
Epoch 11/20, Iter 3600/8863, train loss = 6.066, time = 1.087,losses averange=3.888
Epoch 11/20, Iter 3700/8863, train loss = 6.606, time = 1.084,losses averange=3.887
Epoch 11/20, Iter 3800/8863, train loss = 1.605, time = 1.042,losses averange=3.884
Epoch 11/20, Iter 3900/8863, train loss = 4.534, time = 1.090,losses averange=3.885
Epoch 11/20, Iter 4000/8863, train loss = 8.619, time = 1.085,losses averange=3.891
Epoch 11/20, Iter 4100/8863, train loss = 2.639, time = 1.022,losses averange=3.896
Epoch 11/20, Iter 4200/8863, train loss = 3.218, time = 1.081,losses averange=3.890
Epoch 11/20, Iter 4300/8863, train loss = 5.935, time = 1.087,losses averange=3.889
Epoch 11/20, Iter 4400/8863, train loss = 1.643, time = 1.060,losses averange=3.888
Epoch 11/20, Iter 4500/8863, train loss = 5.389, time = 1.063,losses averange=3.887
Epoch 11/20, Iter 4600/8863, train loss = 2.192, time = 1.065,losses averange=3.888
Epoch 11/20, Iter 4700/8863, train loss = 3.772, time = 1.092,losses averange=3.890
Epoch 11/20, Iter 4800/8863, train loss = 2.812, time = 1.082,losses averange=3.884
Epoch 11/20, Iter 4900/8863, train loss = 2.615, time = 1.066,losses averange=3.879
Epoch 11/20, Iter 5000/8863, train loss = 4.834, time = 1.060,losses averange=3.893
Epoch 11/20, Iter 5100/8863, train loss = 2.168, time = 1.057,losses averange=3.889
Epoch 11/20, Iter 5200/8863, train loss = 3.505, time = 1.025,losses averange=3.896
Epoch 11/20, Iter 5300/8863, train loss = 2.950, time = 1.063,losses averange=3.895
Epoch 11/20, Iter 5400/8863, train loss = 3.903, time = 1.060,losses averange=3.898
Epoch 11/20, Iter 5500/8863, train loss = 1.119, time = 1.047,losses averange=3.893
Epoch 11/20, Iter 5600/8863, train loss = 1.186, time = 1.083,losses averange=3.888
Epoch 11/20, Iter 5700/8863, train loss = 3.193, time = 1.106,losses averange=3.889
Epoch 11/20, Iter 5800/8863, train loss = 2.599, time = 1.071,losses averange=3.890
Epoch 11/20, Iter 5900/8863, train loss = 1.563, time = 1.101,losses averange=3.887
Epoch 11/20, Iter 6000/8863, train loss = 1.979, time = 1.075,losses averange=3.884
Epoch 11/20, Iter 6100/8863, train loss = 4.427, time = 1.078,losses averange=3.883
Epoch 11/20, Iter 6200/8863, train loss = 0.864, time = 1.083,losses averange=3.882
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 11/20, Iter 6300/8863, train loss = 2.894, time = 1.054,losses averange=3.880
Epoch 11/20, Iter 6400/8863, train loss = 2.105, time = 1.061,losses averange=3.879
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 11/20, Iter 6500/8863, train loss = 6.924, time = 1.100,losses averange=3.879
Epoch 11/20, Iter 6600/8863, train loss = 3.756, time = 1.033,losses averange=3.883
Epoch 11/20, Iter 6700/8863, train loss = 10.985, time = 1.014,losses averange=3.885
Epoch 11/20, Iter 6800/8863, train loss = 2.087, time = 1.035,losses averange=3.886
Epoch 11/20, Iter 6900/8863, train loss = 3.120, time = 1.061,losses averange=3.880
Epoch 11/20, Iter 7000/8863, train loss = 6.811, time = 1.118,losses averange=3.877
Epoch 11/20, Iter 7100/8863, train loss = 5.257, time = 1.048,losses averange=3.875
Epoch 11/20, Iter 7200/8863, train loss = 1.299, time = 1.047,losses averange=3.877
Epoch 11/20, Iter 7300/8863, train loss = 1.358, time = 1.064,losses averange=3.877
Epoch 11/20, Iter 7400/8863, train loss = 2.407, time = 1.071,losses averange=3.879
Epoch 11/20, Iter 7500/8863, train loss = 3.542, time = 1.053,losses averange=3.876
Epoch 11/20, Iter 7600/8863, train loss = 3.788, time = 1.095,losses averange=3.875
Epoch 11/20, Iter 7700/8863, train loss = 2.068, time = 1.074,losses averange=3.885
Epoch 11/20, Iter 7800/8863, train loss = 2.809, time = 1.097,losses averange=3.889
Epoch 11/20, Iter 7900/8863, train loss = 2.189, time = 1.053,losses averange=3.890
Epoch 11/20, Iter 8000/8863, train loss = 4.554, time = 1.071,losses averange=3.889
Epoch 11/20, Iter 8100/8863, train loss = 7.265, time = 1.079,losses averange=3.891
Epoch 11/20, Iter 8200/8863, train loss = 5.108, time = 1.067,losses averange=3.886
Epoch 11/20, Iter 8300/8863, train loss = 2.465, time = 1.064,losses averange=3.880
Epoch 11/20, Iter 8400/8863, train loss = 1.543, time = 1.074,losses averange=3.881
Epoch 11/20, Iter 8500/8863, train loss = 4.243, time = 1.102,losses averange=3.876
Epoch 11/20, Iter 8600/8863, train loss = 9.374, time = 1.037,losses averange=3.881
Epoch 11/20, Iter 8700/8863, train loss = 2.540, time = 1.078,losses averange=3.874
Epoch 11/20, Iter 8800/8863, train loss = 4.884, time = 1.039,losses averange=3.875
Epoch 11/20, Iter 8862/8863, train loss = 2.389, time = 1.087,losses averange=3.875
avg_train_loss 3.8749944542864707
Epoch 11/20, Iter 0/4370, test loss = 1.142, time = 0.572462
Epoch 11/20, Iter 100/4370, test loss = 3.422, time = 0.556890
Epoch 11/20, Iter 200/4370, test loss = 2.986, time = 0.544708
Epoch 11/20, Iter 300/4370, test loss = 5.809, time = 0.548676
Epoch 11/20, Iter 400/4370, test loss = 3.328, time = 0.559930
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 11/20, Iter 500/4370, test loss = 2.186, time = 0.551944
Epoch 11/20, Iter 600/4370, test loss = 0.812, time = 0.553157
Epoch 11/20, Iter 700/4370, test loss = 6.140, time = 0.553330
Epoch 11/20, Iter 800/4370, test loss = 1.885, time = 0.548928
Epoch 11/20, Iter 900/4370, test loss = 0.733, time = 0.548867
Epoch 11/20, Iter 1000/4370, test loss = 0.611, time = 0.551280
Epoch 11/20, Iter 1100/4370, test loss = 1.080, time = 0.550608
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 11/20, Iter 1200/4370, test loss = 1.371, time = 0.550925
Epoch 11/20, Iter 1300/4370, test loss = 3.105, time = 0.551112
Epoch 11/20, Iter 1400/4370, test loss = 4.521, time = 0.554557
Epoch 11/20, Iter 1500/4370, test loss = 1.008, time = 0.546788
Epoch 11/20, Iter 1600/4370, test loss = 1.635, time = 0.548301
Epoch 11/20, Iter 1700/4370, test loss = 1.591, time = 0.548523
Epoch 11/20, Iter 1800/4370, test loss = 1.114, time = 0.551513
Epoch 11/20, Iter 1900/4370, test loss = 2.042, time = 0.550256
Epoch 11/20, Iter 2000/4370, test loss = 1.419, time = 0.551077
Epoch 11/20, Iter 2100/4370, test loss = 1.058, time = 0.550069
Epoch 11/20, Iter 2200/4370, test loss = 0.594, time = 0.554970
Epoch 11/20, Iter 2300/4370, test loss = 2.378, time = 0.553799
Epoch 11/20, Iter 2400/4370, test loss = 1.171, time = 0.553154
Epoch 11/20, Iter 2500/4370, test loss = 1.827, time = 0.554165
Epoch 11/20, Iter 2600/4370, test loss = 0.897, time = 0.554194
Epoch 11/20, Iter 2700/4370, test loss = 4.152, time = 0.549700
Epoch 11/20, Iter 2800/4370, test loss = 1.518, time = 0.549816
Epoch 11/20, Iter 2900/4370, test loss = 1.538, time = 0.556042
Epoch 11/20, Iter 3000/4370, test loss = 1.315, time = 0.549532
Epoch 11/20, Iter 3100/4370, test loss = 1.044, time = 0.548350
Epoch 11/20, Iter 3200/4370, test loss = 1.796, time = 0.550676
Epoch 11/20, Iter 3300/4370, test loss = 0.903, time = 0.548498
Epoch 11/20, Iter 3400/4370, test loss = 0.977, time = 0.560761
Epoch 11/20, Iter 3500/4370, test loss = 1.560, time = 0.550932
Epoch 11/20, Iter 3600/4370, test loss = 2.012, time = 0.550144
Epoch 11/20, Iter 3700/4370, test loss = 3.051, time = 0.554123
Epoch 11/20, Iter 3800/4370, test loss = 2.011, time = 0.548640
Epoch 11/20, Iter 3900/4370, test loss = 2.020, time = 0.558617
Epoch 11/20, Iter 4000/4370, test loss = 1.563, time = 0.550959
Epoch 11/20, Iter 4100/4370, test loss = 1.337, time = 0.547512
Epoch 11/20, Iter 4200/4370, test loss = 0.810, time = 0.554002
Epoch 11/20, Iter 4300/4370, test loss = 1.260, time = 0.548746
Epoch 11/20, Iter 4369/4370, test loss = 2.559, time = 0.547708
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.057499714479707094, 0.0371522330886256, 0.03091207500057001, 0.02861161426826459], 'EPE': [1.427669086564733, 1.0099191386175919, 0.8843972280280541, 0.8399385979744335], 'Thres3': [0.06406641526475924, 0.04350235669695702, 0.03705064691789661, 0.034629226591357073], 'Thres1': [0.1274970157306377, 0.10151624330649796, 0.09071296197905693, 0.08635111183345795], 'Thres2': [0.08047088261585027, 0.05797691373708626, 0.05015718243319277, 0.04713289597459581], 'D1': [0.07492698609351567, 0.051496315926784386, 0.04336304623506818, 0.04008455496506224]}
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 0.00025
current rate is  0.001
Epoch 12/20, Iter 0/8863, train loss = 1.637, time = 1.104,losses averange=1.637
Epoch 12/20, Iter 100/8863, train loss = 3.845, time = 1.033,losses averange=3.680
Epoch 12/20, Iter 200/8863, train loss = 1.154, time = 1.032,losses averange=3.637
Epoch 12/20, Iter 300/8863, train loss = 6.772, time = 1.035,losses averange=3.772
Epoch 12/20, Iter 400/8863, train loss = 3.150, time = 1.096,losses averange=3.710
Epoch 12/20, Iter 500/8863, train loss = 5.074, time = 1.051,losses averange=3.695
Epoch 12/20, Iter 600/8863, train loss = 12.104, time = 1.067,losses averange=3.735
Epoch 12/20, Iter 700/8863, train loss = 2.180, time = 1.088,losses averange=3.714
Epoch 12/20, Iter 800/8863, train loss = 3.617, time = 1.087,losses averange=3.663
Epoch 12/20, Iter 900/8863, train loss = 1.725, time = 1.034,losses averange=3.649
Epoch 12/20, Iter 1000/8863, train loss = 9.921, time = 1.052,losses averange=3.662
Epoch 12/20, Iter 1100/8863, train loss = 3.870, time = 1.102,losses averange=3.669
Epoch 12/20, Iter 1200/8863, train loss = 2.978, time = 1.073,losses averange=3.641
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 12/20, Iter 1300/8863, train loss = 3.409, time = 1.017,losses averange=3.659
Epoch 12/20, Iter 1400/8863, train loss = 2.433, time = 1.045,losses averange=3.686
Epoch 12/20, Iter 1500/8863, train loss = 1.873, time = 1.040,losses averange=3.691
Epoch 12/20, Iter 1600/8863, train loss = 6.347, time = 1.078,losses averange=3.674
Epoch 12/20, Iter 1700/8863, train loss = 1.395, time = 1.063,losses averange=3.658
Epoch 12/20, Iter 1800/8863, train loss = 2.194, time = 1.088,losses averange=3.654
Epoch 12/20, Iter 1900/8863, train loss = 1.317, time = 1.060,losses averange=3.640
Epoch 12/20, Iter 2000/8863, train loss = 1.990, time = 1.071,losses averange=3.647
Epoch 12/20, Iter 2100/8863, train loss = 4.593, time = 1.083,losses averange=3.656
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 12/20, Iter 2200/8863, train loss = 3.283, time = 1.095,losses averange=3.667
Epoch 12/20, Iter 2300/8863, train loss = 1.970, time = 1.088,losses averange=3.674
Epoch 12/20, Iter 2400/8863, train loss = 2.370, time = 1.019,losses averange=3.674
Epoch 12/20, Iter 2500/8863, train loss = 3.483, time = 1.091,losses averange=3.674
Epoch 12/20, Iter 2600/8863, train loss = 1.804, time = 1.062,losses averange=3.667
Epoch 12/20, Iter 2700/8863, train loss = 5.336, time = 1.075,losses averange=3.672
Epoch 12/20, Iter 2800/8863, train loss = 1.841, time = 1.047,losses averange=3.675
Epoch 12/20, Iter 2900/8863, train loss = 2.672, time = 1.049,losses averange=3.672
Epoch 12/20, Iter 3000/8863, train loss = 1.085, time = 1.053,losses averange=3.670
Epoch 12/20, Iter 3100/8863, train loss = 2.778, time = 1.059,losses averange=3.666
Epoch 12/20, Iter 3200/8863, train loss = 2.340, time = 1.069,losses averange=3.660
Epoch 12/20, Iter 3300/8863, train loss = 1.213, time = 1.097,losses averange=3.662
Epoch 12/20, Iter 3400/8863, train loss = 1.529, time = 1.035,losses averange=3.664
Epoch 12/20, Iter 3500/8863, train loss = 4.273, time = 1.080,losses averange=3.667
Epoch 12/20, Iter 3600/8863, train loss = 2.803, time = 1.097,losses averange=3.670
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 12/20, Iter 3700/8863, train loss = 2.218, time = 1.115,losses averange=3.675
Epoch 12/20, Iter 3800/8863, train loss = 2.251, time = 1.053,losses averange=3.675
Epoch 12/20, Iter 3900/8863, train loss = 9.282, time = 1.075,losses averange=3.679
Epoch 12/20, Iter 4000/8863, train loss = 9.055, time = 1.057,losses averange=3.677
Epoch 12/20, Iter 4100/8863, train loss = 5.223, time = 1.092,losses averange=3.672
Epoch 12/20, Iter 4200/8863, train loss = 8.609, time = 1.035,losses averange=3.679
Epoch 12/20, Iter 4300/8863, train loss = 0.502, time = 1.077,losses averange=3.674
Epoch 12/20, Iter 4400/8863, train loss = 3.057, time = 1.051,losses averange=3.675
Epoch 12/20, Iter 4500/8863, train loss = 1.783, time = 1.056,losses averange=3.671
Epoch 12/20, Iter 4600/8863, train loss = 2.935, time = 1.060,losses averange=3.670
Epoch 12/20, Iter 4700/8863, train loss = 3.727, time = 1.074,losses averange=3.671
Epoch 12/20, Iter 4800/8863, train loss = 3.186, time = 1.056,losses averange=3.660
Epoch 12/20, Iter 4900/8863, train loss = 1.215, time = 1.071,losses averange=3.662
Epoch 12/20, Iter 5000/8863, train loss = 3.197, time = 1.062,losses averange=3.666
Epoch 12/20, Iter 5100/8863, train loss = 1.910, time = 1.061,losses averange=3.666
Epoch 12/20, Iter 5200/8863, train loss = 3.767, time = 1.054,losses averange=3.665
Epoch 12/20, Iter 5300/8863, train loss = 6.263, time = 1.051,losses averange=3.669
Epoch 12/20, Iter 5400/8863, train loss = 4.353, time = 1.099,losses averange=3.665
Epoch 12/20, Iter 5500/8863, train loss = 1.525, time = 1.046,losses averange=3.670
Epoch 12/20, Iter 5600/8863, train loss = 3.339, time = 1.058,losses averange=3.667
Epoch 12/20, Iter 5700/8863, train loss = 1.575, time = 1.058,losses averange=3.666
Epoch 12/20, Iter 5800/8863, train loss = 4.947, time = 1.041,losses averange=3.666
Epoch 12/20, Iter 5900/8863, train loss = 1.672, time = 1.093,losses averange=3.669
Epoch 12/20, Iter 6000/8863, train loss = 5.020, time = 1.055,losses averange=3.671
Epoch 12/20, Iter 6100/8863, train loss = 1.871, time = 1.063,losses averange=3.667
Epoch 12/20, Iter 6200/8863, train loss = 6.384, time = 1.059,losses averange=3.664
Epoch 12/20, Iter 6300/8863, train loss = 5.724, time = 1.098,losses averange=3.665
Epoch 12/20, Iter 6400/8863, train loss = 2.324, time = 1.059,losses averange=3.669
Epoch 12/20, Iter 6500/8863, train loss = 0.929, time = 1.030,losses averange=3.665
Epoch 12/20, Iter 6600/8863, train loss = 0.730, time = 1.068,losses averange=3.663
Epoch 12/20, Iter 6700/8863, train loss = 4.039, time = 1.080,losses averange=3.663
Epoch 12/20, Iter 6800/8863, train loss = 2.346, time = 1.051,losses averange=3.664
Epoch 12/20, Iter 6900/8863, train loss = 2.047, time = 1.088,losses averange=3.665
Epoch 12/20, Iter 7000/8863, train loss = 2.491, time = 1.142,losses averange=3.666
Epoch 12/20, Iter 7100/8863, train loss = 1.662, time = 1.097,losses averange=3.665
Epoch 12/20, Iter 7200/8863, train loss = 4.070, time = 1.040,losses averange=3.664
Epoch 12/20, Iter 7300/8863, train loss = 1.257, time = 1.089,losses averange=3.665
Epoch 12/20, Iter 7400/8863, train loss = 1.964, time = 1.052,losses averange=3.668
Epoch 12/20, Iter 7500/8863, train loss = 3.829, time = 1.068,losses averange=3.672
Epoch 12/20, Iter 7600/8863, train loss = 1.925, time = 1.024,losses averange=3.671
Epoch 12/20, Iter 7700/8863, train loss = 1.019, time = 1.082,losses averange=3.672
Epoch 12/20, Iter 7800/8863, train loss = 3.969, time = 1.073,losses averange=3.676
Epoch 12/20, Iter 7900/8863, train loss = 2.442, time = 1.114,losses averange=3.671
Epoch 12/20, Iter 8000/8863, train loss = 1.949, time = 1.027,losses averange=3.672
Epoch 12/20, Iter 8100/8863, train loss = 5.302, time = 1.135,losses averange=3.671
Epoch 12/20, Iter 8200/8863, train loss = 2.719, time = 1.061,losses averange=3.674
Epoch 12/20, Iter 8300/8863, train loss = 3.747, time = 1.059,losses averange=3.676
Epoch 12/20, Iter 8400/8863, train loss = 3.032, time = 1.073,losses averange=3.680
Epoch 12/20, Iter 8500/8863, train loss = 3.535, time = 1.078,losses averange=3.682
Epoch 12/20, Iter 8600/8863, train loss = 0.722, time = 1.060,losses averange=3.684
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 12/20, Iter 8700/8863, train loss = 1.966, time = 1.097,losses averange=3.684
Epoch 12/20, Iter 8800/8863, train loss = 5.018, time = 1.109,losses averange=3.686
Epoch 12/20, Iter 8862/8863, train loss = 2.203, time = 1.143,losses averange=3.688
avg_train_loss 3.6876120695031607
Epoch 12/20, Iter 0/4370, test loss = 1.133, time = 2.686369
Epoch 12/20, Iter 100/4370, test loss = 3.379, time = 2.641009
Epoch 12/20, Iter 200/4370, test loss = 2.986, time = 2.264177
Epoch 12/20, Iter 300/4370, test loss = 4.967, time = 2.695369
Epoch 12/20, Iter 400/4370, test loss = 3.474, time = 2.673282
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 12/20, Iter 500/4370, test loss = 1.765, time = 2.626111
Epoch 12/20, Iter 600/4370, test loss = 0.743, time = 2.363452
Epoch 12/20, Iter 700/4370, test loss = 5.971, time = 2.540760
Epoch 12/20, Iter 800/4370, test loss = 1.893, time = 2.623955
Epoch 12/20, Iter 900/4370, test loss = 0.741, time = 2.510151
Epoch 12/20, Iter 1000/4370, test loss = 0.578, time = 2.260830
Epoch 12/20, Iter 1100/4370, test loss = 1.079, time = 2.613076
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 12/20, Iter 1200/4370, test loss = 1.374, time = 2.403591
Epoch 12/20, Iter 1300/4370, test loss = 3.367, time = 2.333978
Epoch 12/20, Iter 1400/4370, test loss = 4.381, time = 2.753297
Epoch 12/20, Iter 1500/4370, test loss = 0.909, time = 2.646081
Epoch 12/20, Iter 1600/4370, test loss = 1.881, time = 2.514335
Epoch 12/20, Iter 1700/4370, test loss = 1.618, time = 2.486554
Epoch 12/20, Iter 1800/4370, test loss = 1.121, time = 2.349764
Epoch 12/20, Iter 1900/4370, test loss = 2.031, time = 2.687367
Epoch 12/20, Iter 2000/4370, test loss = 1.555, time = 2.755680
Epoch 12/20, Iter 2100/4370, test loss = 1.031, time = 2.419636
Epoch 12/20, Iter 2200/4370, test loss = 0.605, time = 2.419751
Epoch 12/20, Iter 2300/4370, test loss = 2.544, time = 2.619677
Epoch 12/20, Iter 2400/4370, test loss = 0.986, time = 2.304427
Epoch 12/20, Iter 2500/4370, test loss = 1.785, time = 2.457947
Epoch 12/20, Iter 2600/4370, test loss = 0.953, time = 2.650215
Epoch 12/20, Iter 2700/4370, test loss = 3.447, time = 2.433969
Epoch 12/20, Iter 2800/4370, test loss = 1.538, time = 2.295045
Epoch 12/20, Iter 2900/4370, test loss = 1.525, time = 2.589261
Epoch 12/20, Iter 3000/4370, test loss = 1.294, time = 2.541896
Epoch 12/20, Iter 3100/4370, test loss = 0.990, time = 2.612463
Epoch 12/20, Iter 3200/4370, test loss = 1.716, time = 2.422584
Epoch 12/20, Iter 3300/4370, test loss = 0.833, time = 2.507531
Epoch 12/20, Iter 3400/4370, test loss = 1.013, time = 2.053193
Epoch 12/20, Iter 3500/4370, test loss = 1.517, time = 2.315293
Epoch 12/20, Iter 3600/4370, test loss = 2.063, time = 2.420285
Epoch 12/20, Iter 3700/4370, test loss = 3.058, time = 2.328583
Epoch 12/20, Iter 3800/4370, test loss = 2.074, time = 2.515229
Epoch 12/20, Iter 3900/4370, test loss = 1.887, time = 2.720004
Epoch 12/20, Iter 4000/4370, test loss = 1.400, time = 2.870810
Epoch 12/20, Iter 4100/4370, test loss = 1.294, time = 2.534315
Epoch 12/20, Iter 4200/4370, test loss = 0.776, time = 2.558878
Epoch 12/20, Iter 4300/4370, test loss = 1.274, time = 2.371310
Epoch 12/20, Iter 4369/4370, test loss = 2.463, time = 0.545848
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.05695597651452934, 0.03625763690912163, 0.030315114040773798, 0.028148023622511148], 'EPE': [1.3999154779062664, 0.9916012539504867, 0.8600889575154067, 0.8069446877633952], 'Thres3': [0.06342856453452472, 0.0424336007772785, 0.03626568957868094, 0.034021556270852245], 'Thres1': [0.12525087536485266, 0.0987117102465569, 0.08814366443308595, 0.08384485581316463], 'Thres2': [0.07947408248568102, 0.05633742350656582, 0.04894739648889861, 0.04615219906079039], 'D1': [0.07435541624326933, 0.05056631337207672, 0.04274654012685961, 0.03962853098718675]}
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 0.00025
current rate is  0.001
Epoch 13/20, Iter 0/8863, train loss = 3.910, time = 1.108,losses averange=3.910
Epoch 13/20, Iter 100/8863, train loss = 3.007, time = 1.080,losses averange=3.783
Epoch 13/20, Iter 200/8863, train loss = 4.498, time = 1.060,losses averange=3.829
Epoch 13/20, Iter 300/8863, train loss = 7.304, time = 1.069,losses averange=3.836
Epoch 13/20, Iter 400/8863, train loss = 4.987, time = 1.046,losses averange=3.872
Epoch 13/20, Iter 500/8863, train loss = 3.542, time = 1.028,losses averange=3.835
Epoch 13/20, Iter 600/8863, train loss = 2.006, time = 1.048,losses averange=3.847
Epoch 13/20, Iter 700/8863, train loss = 3.893, time = 1.036,losses averange=3.826
Epoch 13/20, Iter 800/8863, train loss = 1.491, time = 1.079,losses averange=3.812
Epoch 13/20, Iter 900/8863, train loss = 3.421, time = 1.038,losses averange=3.761
Epoch 13/20, Iter 1000/8863, train loss = 5.248, time = 1.042,losses averange=3.762
Epoch 13/20, Iter 1100/8863, train loss = 3.253, time = 1.112,losses averange=3.752
Epoch 13/20, Iter 1200/8863, train loss = 4.887, time = 1.039,losses averange=3.715
Epoch 13/20, Iter 1300/8863, train loss = 2.059, time = 1.089,losses averange=3.708
Epoch 13/20, Iter 1400/8863, train loss = 2.268, time = 1.069,losses averange=3.702
Epoch 13/20, Iter 1500/8863, train loss = 5.910, time = 1.093,losses averange=3.695
Epoch 13/20, Iter 1600/8863, train loss = 3.095, time = 1.020,losses averange=3.660
Epoch 13/20, Iter 1700/8863, train loss = 4.136, time = 1.034,losses averange=3.654
Epoch 13/20, Iter 1800/8863, train loss = 5.803, time = 1.066,losses averange=3.676
Epoch 13/20, Iter 1900/8863, train loss = 2.277, time = 1.075,losses averange=3.667
Epoch 13/20, Iter 2000/8863, train loss = 2.967, time = 1.048,losses averange=3.647
Epoch 13/20, Iter 2100/8863, train loss = 3.746, time = 1.109,losses averange=3.640
Epoch 13/20, Iter 2200/8863, train loss = 1.875, time = 1.122,losses averange=3.626
Epoch 13/20, Iter 2300/8863, train loss = 3.118, time = 1.070,losses averange=3.618
Epoch 13/20, Iter 2400/8863, train loss = 2.552, time = 1.048,losses averange=3.624
Epoch 13/20, Iter 2500/8863, train loss = 0.638, time = 1.040,losses averange=3.618
Epoch 13/20, Iter 2600/8863, train loss = 1.152, time = 1.076,losses averange=3.623
Epoch 13/20, Iter 2700/8863, train loss = 1.839, time = 1.069,losses averange=3.620
Epoch 13/20, Iter 2800/8863, train loss = 3.775, time = 1.079,losses averange=3.623
Epoch 13/20, Iter 2900/8863, train loss = 1.799, time = 1.035,losses averange=3.615
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 13/20, Iter 3000/8863, train loss = 2.837, time = 1.086,losses averange=3.622
Epoch 13/20, Iter 3100/8863, train loss = 1.921, time = 1.063,losses averange=3.609
Epoch 13/20, Iter 3200/8863, train loss = 7.981, time = 1.046,losses averange=3.625
Epoch 13/20, Iter 3300/8863, train loss = 1.561, time = 1.131,losses averange=3.614
Epoch 13/20, Iter 3400/8863, train loss = 3.571, time = 1.092,losses averange=3.610
Epoch 13/20, Iter 3500/8863, train loss = 3.757, time = 1.085,losses averange=3.619
Epoch 13/20, Iter 3600/8863, train loss = 4.404, time = 1.056,losses averange=3.619
Epoch 13/20, Iter 3700/8863, train loss = 3.690, time = 1.061,losses averange=3.627
Epoch 13/20, Iter 3800/8863, train loss = 2.562, time = 1.079,losses averange=3.623
Epoch 13/20, Iter 3900/8863, train loss = 3.833, time = 1.054,losses averange=3.619
Epoch 13/20, Iter 4000/8863, train loss = 6.429, time = 1.053,losses averange=3.609
Epoch 13/20, Iter 4100/8863, train loss = 1.997, time = 1.094,losses averange=3.601
Epoch 13/20, Iter 4200/8863, train loss = 2.713, time = 1.038,losses averange=3.600
Epoch 13/20, Iter 4300/8863, train loss = 1.244, time = 1.072,losses averange=3.602
Epoch 13/20, Iter 4400/8863, train loss = 2.989, time = 1.083,losses averange=3.603
Epoch 13/20, Iter 4500/8863, train loss = 3.874, time = 1.049,losses averange=3.602
Epoch 13/20, Iter 4600/8863, train loss = 7.279, time = 1.095,losses averange=3.602
Epoch 13/20, Iter 4700/8863, train loss = 4.538, time = 1.043,losses averange=3.605
Epoch 13/20, Iter 4800/8863, train loss = 2.654, time = 1.089,losses averange=3.611
Epoch 13/20, Iter 4900/8863, train loss = 3.525, time = 1.036,losses averange=3.612
Epoch 13/20, Iter 5000/8863, train loss = 2.764, time = 1.078,losses averange=3.616
Epoch 13/20, Iter 5100/8863, train loss = 2.349, time = 1.048,losses averange=3.626
Epoch 13/20, Iter 5200/8863, train loss = 5.347, time = 1.064,losses averange=3.623
Epoch 13/20, Iter 5300/8863, train loss = 4.241, time = 1.075,losses averange=3.619
Epoch 13/20, Iter 5400/8863, train loss = 4.057, time = 1.067,losses averange=3.621
Epoch 13/20, Iter 5500/8863, train loss = 1.886, time = 1.049,losses averange=3.620
Epoch 13/20, Iter 5600/8863, train loss = 6.884, time = 1.062,losses averange=3.621
Epoch 13/20, Iter 5700/8863, train loss = 2.539, time = 1.051,losses averange=3.618
Epoch 13/20, Iter 5800/8863, train loss = 7.268, time = 1.059,losses averange=3.619
Epoch 13/20, Iter 5900/8863, train loss = 2.167, time = 1.104,losses averange=3.626
Epoch 13/20, Iter 6000/8863, train loss = 1.277, time = 1.027,losses averange=3.628
Epoch 13/20, Iter 6100/8863, train loss = 7.719, time = 1.098,losses averange=3.632
Epoch 13/20, Iter 6200/8863, train loss = 4.336, time = 1.030,losses averange=3.631
Epoch 13/20, Iter 6300/8863, train loss = 3.106, time = 1.065,losses averange=3.629
Epoch 13/20, Iter 6400/8863, train loss = 2.571, time = 1.045,losses averange=3.624
Epoch 13/20, Iter 6500/8863, train loss = 1.904, time = 1.090,losses averange=3.620
Epoch 13/20, Iter 6600/8863, train loss = 1.669, time = 1.052,losses averange=3.619
Epoch 13/20, Iter 6700/8863, train loss = 1.625, time = 1.059,losses averange=3.619
Epoch 13/20, Iter 6800/8863, train loss = 4.204, time = 1.099,losses averange=3.614
Epoch 13/20, Iter 6900/8863, train loss = 2.477, time = 1.050,losses averange=3.612
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 13/20, Iter 7000/8863, train loss = 3.181, time = 1.112,losses averange=3.617
Epoch 13/20, Iter 7100/8863, train loss = 0.855, time = 1.392,losses averange=3.618
Epoch 13/20, Iter 7200/8863, train loss = 3.910, time = 1.052,losses averange=3.617
Epoch 13/20, Iter 7300/8863, train loss = 2.616, time = 1.090,losses averange=3.616
Epoch 13/20, Iter 7400/8863, train loss = 1.219, time = 1.024,losses averange=3.615
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 13/20, Iter 7500/8863, train loss = 2.709, time = 1.049,losses averange=3.614
Epoch 13/20, Iter 7600/8863, train loss = 2.153, time = 1.047,losses averange=3.610
Epoch 13/20, Iter 7700/8863, train loss = 2.984, time = 1.075,losses averange=3.615
Epoch 13/20, Iter 7800/8863, train loss = 7.814, time = 1.033,losses averange=3.616
Epoch 13/20, Iter 7900/8863, train loss = 2.789, time = 1.024,losses averange=3.624
Epoch 13/20, Iter 8000/8863, train loss = 4.978, time = 1.038,losses averange=3.629
Epoch 13/20, Iter 8100/8863, train loss = 3.263, time = 1.140,losses averange=3.626
Epoch 13/20, Iter 8200/8863, train loss = 4.881, time = 1.071,losses averange=3.627
Epoch 13/20, Iter 8300/8863, train loss = 3.095, time = 1.030,losses averange=3.629
Epoch 13/20, Iter 8400/8863, train loss = 1.461, time = 1.060,losses averange=3.627
Epoch 13/20, Iter 8500/8863, train loss = 6.651, time = 1.056,losses averange=3.626
Epoch 13/20, Iter 8600/8863, train loss = 2.057, time = 1.085,losses averange=3.626
Epoch 13/20, Iter 8700/8863, train loss = 10.012, time = 1.048,losses averange=3.621
Epoch 13/20, Iter 8800/8863, train loss = 2.564, time = 1.061,losses averange=3.617
Epoch 13/20, Iter 8862/8863, train loss = 3.306, time = 1.098,losses averange=3.616
avg_train_loss 3.6160657543482637
Epoch 13/20, Iter 0/4370, test loss = 1.022, time = 0.609336
Epoch 13/20, Iter 100/4370, test loss = 3.235, time = 0.549047
Epoch 13/20, Iter 200/4370, test loss = 2.855, time = 0.550508
Epoch 13/20, Iter 300/4370, test loss = 4.944, time = 0.548878
Epoch 13/20, Iter 400/4370, test loss = 3.343, time = 0.548205
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 13/20, Iter 500/4370, test loss = 1.986, time = 0.550115
Epoch 13/20, Iter 600/4370, test loss = 0.683, time = 0.555793
Epoch 13/20, Iter 700/4370, test loss = 6.465, time = 0.548598
Epoch 13/20, Iter 800/4370, test loss = 1.913, time = 0.550718
Epoch 13/20, Iter 900/4370, test loss = 0.720, time = 0.546894
Epoch 13/20, Iter 1000/4370, test loss = 0.574, time = 0.549551
Epoch 13/20, Iter 1100/4370, test loss = 1.063, time = 0.547153
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 13/20, Iter 1200/4370, test loss = 1.294, time = 0.548449
Epoch 13/20, Iter 1300/4370, test loss = 3.420, time = 0.547320
Epoch 13/20, Iter 1400/4370, test loss = 4.247, time = 0.548740
Epoch 13/20, Iter 1500/4370, test loss = 0.870, time = 0.545934
Epoch 13/20, Iter 1600/4370, test loss = 1.620, time = 0.547680
Epoch 13/20, Iter 1700/4370, test loss = 1.562, time = 0.545949
Epoch 13/20, Iter 1800/4370, test loss = 1.116, time = 0.546798
Epoch 13/20, Iter 1900/4370, test loss = 1.966, time = 0.549258
Epoch 13/20, Iter 2000/4370, test loss = 1.297, time = 0.550372
Epoch 13/20, Iter 2100/4370, test loss = 1.063, time = 0.551819
Epoch 13/20, Iter 2200/4370, test loss = 0.657, time = 0.552384
Epoch 13/20, Iter 2300/4370, test loss = 2.452, time = 0.551104
Epoch 13/20, Iter 2400/4370, test loss = 0.972, time = 0.553593
Epoch 13/20, Iter 2500/4370, test loss = 1.687, time = 0.548398
Epoch 13/20, Iter 2600/4370, test loss = 0.960, time = 0.555687
Epoch 13/20, Iter 2700/4370, test loss = 3.227, time = 0.548711
Epoch 13/20, Iter 2800/4370, test loss = 1.574, time = 0.548215
Epoch 13/20, Iter 2900/4370, test loss = 1.474, time = 0.549632
Epoch 13/20, Iter 3000/4370, test loss = 1.367, time = 0.549833
Epoch 13/20, Iter 3100/4370, test loss = 1.016, time = 0.550815
Epoch 13/20, Iter 3200/4370, test loss = 1.708, time = 0.548944
Epoch 13/20, Iter 3300/4370, test loss = 0.838, time = 0.548043
Epoch 13/20, Iter 3400/4370, test loss = 1.003, time = 0.555480
Epoch 13/20, Iter 3500/4370, test loss = 1.456, time = 0.548017
Epoch 13/20, Iter 3600/4370, test loss = 2.006, time = 0.547083
Epoch 13/20, Iter 3700/4370, test loss = 2.918, time = 0.554141
Epoch 13/20, Iter 3800/4370, test loss = 1.991, time = 0.544969
Epoch 13/20, Iter 3900/4370, test loss = 1.884, time = 0.549184
Epoch 13/20, Iter 4000/4370, test loss = 1.373, time = 0.550476
Epoch 13/20, Iter 4100/4370, test loss = 1.205, time = 0.548024
Epoch 13/20, Iter 4200/4370, test loss = 0.725, time = 0.552811
Epoch 13/20, Iter 4300/4370, test loss = 1.209, time = 0.543293
Epoch 13/20, Iter 4369/4370, test loss = 2.425, time = 0.552259
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.05650356404490777, 0.036078812854441235, 0.03004235511467722, 0.027966233722447872], 'EPE': [1.345066014181149, 0.9651762656850454, 0.8427978726389479, 0.7966388082647488], 'Thres3': [0.0629790493511452, 0.04230303584301772, 0.03606598456320939, 0.0338272259463034], 'Thres1': [0.12315152616003525, 0.0970172210745684, 0.08672904594475297, 0.0823647590995568], 'Thres2': [0.07886073918484612, 0.0560614701020542, 0.04866364928414231, 0.04583114176376955], 'D1': [0.07341232772498846, 0.04992986427943991, 0.04198180966695144, 0.038994947971788915]}
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 0.000125
current rate is  0.001
Epoch 14/20, Iter 0/8863, train loss = 2.129, time = 1.145,losses averange=2.129
Epoch 14/20, Iter 100/8863, train loss = 3.703, time = 1.033,losses averange=3.649
Epoch 14/20, Iter 200/8863, train loss = 5.479, time = 1.093,losses averange=3.642
Epoch 14/20, Iter 300/8863, train loss = 3.920, time = 1.067,losses averange=3.701
Epoch 14/20, Iter 400/8863, train loss = 1.949, time = 1.101,losses averange=3.563
Epoch 14/20, Iter 500/8863, train loss = 3.005, time = 1.043,losses averange=3.470
Epoch 14/20, Iter 600/8863, train loss = 3.382, time = 1.075,losses averange=3.522
Epoch 14/20, Iter 700/8863, train loss = 4.898, time = 1.025,losses averange=3.527
Epoch 14/20, Iter 800/8863, train loss = 5.008, time = 1.081,losses averange=3.511
Epoch 14/20, Iter 900/8863, train loss = 1.831, time = 1.042,losses averange=3.506
Epoch 14/20, Iter 1000/8863, train loss = 2.060, time = 1.088,losses averange=3.462
Epoch 14/20, Iter 1100/8863, train loss = 2.375, time = 1.070,losses averange=3.449
Epoch 14/20, Iter 1200/8863, train loss = 2.475, time = 1.036,losses averange=3.448
Epoch 14/20, Iter 1300/8863, train loss = 1.861, time = 1.048,losses averange=3.450
Epoch 14/20, Iter 1400/8863, train loss = 4.790, time = 1.077,losses averange=3.455
Epoch 14/20, Iter 1500/8863, train loss = 2.433, time = 1.088,losses averange=3.448
Epoch 14/20, Iter 1600/8863, train loss = 1.870, time = 1.057,losses averange=3.431
Epoch 14/20, Iter 1700/8863, train loss = 1.914, time = 1.059,losses averange=3.427
Epoch 14/20, Iter 1800/8863, train loss = 4.498, time = 1.038,losses averange=3.426
Epoch 14/20, Iter 1900/8863, train loss = 3.512, time = 1.081,losses averange=3.439
Epoch 14/20, Iter 2000/8863, train loss = 4.037, time = 1.031,losses averange=3.435
Epoch 14/20, Iter 2100/8863, train loss = 1.339, time = 1.048,losses averange=3.432
Epoch 14/20, Iter 2200/8863, train loss = 5.333, time = 1.098,losses averange=3.444
Epoch 14/20, Iter 2300/8863, train loss = 3.495, time = 1.059,losses averange=3.438
Epoch 14/20, Iter 2400/8863, train loss = 6.036, time = 1.091,losses averange=3.448
Epoch 14/20, Iter 2500/8863, train loss = 5.038, time = 1.052,losses averange=3.472
Epoch 14/20, Iter 2600/8863, train loss = 5.716, time = 1.069,losses averange=3.470
Epoch 14/20, Iter 2700/8863, train loss = 16.035, time = 1.071,losses averange=3.465
Epoch 14/20, Iter 2800/8863, train loss = 2.138, time = 1.062,losses averange=3.477
Epoch 14/20, Iter 2900/8863, train loss = 4.792, time = 1.053,losses averange=3.491
Epoch 14/20, Iter 3000/8863, train loss = 2.873, time = 1.029,losses averange=3.497
Epoch 14/20, Iter 3100/8863, train loss = 3.980, time = 1.056,losses averange=3.495
Epoch 14/20, Iter 3200/8863, train loss = 1.505, time = 1.047,losses averange=3.504
Epoch 14/20, Iter 3300/8863, train loss = 1.075, time = 1.088,losses averange=3.510
Epoch 14/20, Iter 3400/8863, train loss = 1.971, time = 1.051,losses averange=3.510
Epoch 14/20, Iter 3500/8863, train loss = 4.128, time = 1.079,losses averange=3.502
Epoch 14/20, Iter 3600/8863, train loss = 0.976, time = 1.042,losses averange=3.495
Epoch 14/20, Iter 3700/8863, train loss = 3.798, time = 1.052,losses averange=3.493
Epoch 14/20, Iter 3800/8863, train loss = 6.459, time = 1.030,losses averange=3.495
Epoch 14/20, Iter 3900/8863, train loss = 4.015, time = 1.043,losses averange=3.489
Epoch 14/20, Iter 4000/8863, train loss = 3.716, time = 1.099,losses averange=3.483
Epoch 14/20, Iter 4100/8863, train loss = 2.103, time = 1.059,losses averange=3.479
Epoch 14/20, Iter 4200/8863, train loss = 2.831, time = 1.050,losses averange=3.484
Epoch 14/20, Iter 4300/8863, train loss = 3.695, time = 1.081,losses averange=3.490
Epoch 14/20, Iter 4400/8863, train loss = 2.045, time = 1.023,losses averange=3.485
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 14/20, Iter 4500/8863, train loss = 2.812, time = 1.105,losses averange=3.478
Epoch 14/20, Iter 4600/8863, train loss = 7.283, time = 1.042,losses averange=3.475
Epoch 14/20, Iter 4700/8863, train loss = 4.573, time = 1.053,losses averange=3.468
Epoch 14/20, Iter 4800/8863, train loss = 7.937, time = 1.090,losses averange=3.470
Epoch 14/20, Iter 4900/8863, train loss = 4.122, time = 1.092,losses averange=3.472
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 14/20, Iter 5000/8863, train loss = 2.995, time = 1.114,losses averange=3.473
Epoch 14/20, Iter 5100/8863, train loss = 2.639, time = 1.034,losses averange=3.473
Epoch 14/20, Iter 5200/8863, train loss = 4.048, time = 1.081,losses averange=3.487
Epoch 14/20, Iter 5300/8863, train loss = 2.452, time = 1.087,losses averange=3.481
Epoch 14/20, Iter 5400/8863, train loss = 7.041, time = 1.087,losses averange=3.485
Epoch 14/20, Iter 5500/8863, train loss = 1.213, time = 1.089,losses averange=3.481
Epoch 14/20, Iter 5600/8863, train loss = 2.818, time = 1.093,losses averange=3.484
Epoch 14/20, Iter 5700/8863, train loss = 4.729, time = 1.059,losses averange=3.486
Epoch 14/20, Iter 5800/8863, train loss = 5.671, time = 1.071,losses averange=3.494
Epoch 14/20, Iter 5900/8863, train loss = 1.951, time = 1.094,losses averange=3.492
Epoch 14/20, Iter 6000/8863, train loss = 1.291, time = 1.067,losses averange=3.489
Epoch 14/20, Iter 6100/8863, train loss = 2.617, time = 1.086,losses averange=3.490
Epoch 14/20, Iter 6200/8863, train loss = 5.642, time = 1.068,losses averange=3.490
Epoch 14/20, Iter 6300/8863, train loss = 2.401, time = 1.079,losses averange=3.490
Epoch 14/20, Iter 6400/8863, train loss = 1.942, time = 1.078,losses averange=3.494
Epoch 14/20, Iter 6500/8863, train loss = 4.742, time = 1.072,losses averange=3.496
Epoch 14/20, Iter 6600/8863, train loss = 0.328, time = 1.080,losses averange=3.498
Epoch 14/20, Iter 6700/8863, train loss = 4.238, time = 1.083,losses averange=3.501
Epoch 14/20, Iter 6800/8863, train loss = 0.651, time = 1.116,losses averange=3.505
Epoch 14/20, Iter 6900/8863, train loss = 1.129, time = 1.058,losses averange=3.500
Epoch 14/20, Iter 7000/8863, train loss = 2.544, time = 1.149,losses averange=3.504
Epoch 14/20, Iter 7100/8863, train loss = 1.881, time = 1.013,losses averange=3.503
Epoch 14/20, Iter 7200/8863, train loss = 3.710, time = 1.056,losses averange=3.510
Epoch 14/20, Iter 7300/8863, train loss = 2.745, time = 1.068,losses averange=3.505
Epoch 14/20, Iter 7400/8863, train loss = 3.029, time = 1.098,losses averange=3.505
Epoch 14/20, Iter 7500/8863, train loss = 1.755, time = 1.082,losses averange=3.506
Epoch 14/20, Iter 7600/8863, train loss = 3.394, time = 1.036,losses averange=3.508
Epoch 14/20, Iter 7700/8863, train loss = 2.746, time = 1.073,losses averange=3.512
Epoch 14/20, Iter 7800/8863, train loss = 5.644, time = 1.072,losses averange=3.513
Epoch 14/20, Iter 7900/8863, train loss = 9.925, time = 1.041,losses averange=3.514
Epoch 14/20, Iter 8000/8863, train loss = 2.985, time = 1.039,losses averange=3.514
Epoch 14/20, Iter 8100/8863, train loss = 2.844, time = 1.093,losses averange=3.513
Epoch 14/20, Iter 8200/8863, train loss = 4.751, time = 1.043,losses averange=3.510
Epoch 14/20, Iter 8300/8863, train loss = 1.671, time = 1.063,losses averange=3.513
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 14/20, Iter 8400/8863, train loss = 4.223, time = 1.028,losses averange=3.512
Epoch 14/20, Iter 8500/8863, train loss = 6.602, time = 1.041,losses averange=3.512
Epoch 14/20, Iter 8600/8863, train loss = 1.878, time = 1.020,losses averange=3.517
Epoch 14/20, Iter 8700/8863, train loss = 2.604, time = 1.091,losses averange=3.520
Epoch 14/20, Iter 8800/8863, train loss = 3.170, time = 1.067,losses averange=3.516
Epoch 14/20, Iter 8862/8863, train loss = 1.892, time = 1.105,losses averange=3.515
avg_train_loss 3.515245571522361
Epoch 14/20, Iter 0/4370, test loss = 1.058, time = 2.671823
Epoch 14/20, Iter 100/4370, test loss = 3.370, time = 2.406567
Epoch 14/20, Iter 200/4370, test loss = 2.852, time = 2.174397
Epoch 14/20, Iter 300/4370, test loss = 4.617, time = 2.488554
Epoch 14/20, Iter 400/4370, test loss = 3.050, time = 2.480880
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 14/20, Iter 500/4370, test loss = 1.745, time = 2.733811
Epoch 14/20, Iter 600/4370, test loss = 0.673, time = 2.410151
Epoch 14/20, Iter 700/4370, test loss = 6.019, time = 2.432928
Epoch 14/20, Iter 800/4370, test loss = 1.757, time = 2.658688
Epoch 14/20, Iter 900/4370, test loss = 0.696, time = 2.435050
Epoch 14/20, Iter 1000/4370, test loss = 0.549, time = 2.303291
Epoch 14/20, Iter 1100/4370, test loss = 0.994, time = 2.395555
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 14/20, Iter 1200/4370, test loss = 1.248, time = 2.493037
Epoch 14/20, Iter 1300/4370, test loss = 3.041, time = 2.239558
Epoch 14/20, Iter 1400/4370, test loss = 4.095, time = 2.746714
Epoch 14/20, Iter 1500/4370, test loss = 0.839, time = 2.727421
Epoch 14/20, Iter 1600/4370, test loss = 1.698, time = 2.467124
Epoch 14/20, Iter 1700/4370, test loss = 1.480, time = 2.627971
Epoch 14/20, Iter 1800/4370, test loss = 1.050, time = 2.344391
Epoch 14/20, Iter 1900/4370, test loss = 1.970, time = 2.822070
Epoch 14/20, Iter 2000/4370, test loss = 1.402, time = 2.561393
Epoch 14/20, Iter 2100/4370, test loss = 1.027, time = 2.728826
Epoch 14/20, Iter 2200/4370, test loss = 0.596, time = 2.510586
Epoch 14/20, Iter 2300/4370, test loss = 2.230, time = 2.670350
Epoch 14/20, Iter 2400/4370, test loss = 0.967, time = 2.209025
Epoch 14/20, Iter 2500/4370, test loss = 1.772, time = 2.714302
Epoch 14/20, Iter 2600/4370, test loss = 0.871, time = 2.599671
Epoch 14/20, Iter 2700/4370, test loss = 3.055, time = 2.377419
Epoch 14/20, Iter 2800/4370, test loss = 1.532, time = 2.389063
Epoch 14/20, Iter 2900/4370, test loss = 1.409, time = 2.716911
Epoch 14/20, Iter 3000/4370, test loss = 1.450, time = 2.281095
Epoch 14/20, Iter 3100/4370, test loss = 0.963, time = 2.500678
Epoch 14/20, Iter 3200/4370, test loss = 1.729, time = 2.445152
Epoch 14/20, Iter 3300/4370, test loss = 0.812, time = 2.574493
Epoch 14/20, Iter 3400/4370, test loss = 0.932, time = 2.399420
Epoch 14/20, Iter 3500/4370, test loss = 1.464, time = 2.671070
Epoch 14/20, Iter 3600/4370, test loss = 1.935, time = 2.501107
Epoch 14/20, Iter 3700/4370, test loss = 2.884, time = 2.399754
Epoch 14/20, Iter 3800/4370, test loss = 1.968, time = 2.939121
Epoch 14/20, Iter 3900/4370, test loss = 1.826, time = 2.708840
Epoch 14/20, Iter 4000/4370, test loss = 1.366, time = 2.889690
Epoch 14/20, Iter 4100/4370, test loss = 1.188, time = 2.629053
Epoch 14/20, Iter 4200/4370, test loss = 0.711, time = 2.745620
Epoch 14/20, Iter 4300/4370, test loss = 1.207, time = 2.534824
Epoch 14/20, Iter 4369/4370, test loss = 2.402, time = 0.549933
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.055316896518869264, 0.03481997208572813, 0.02907452434237441, 0.0269599262376431], 'EPE': [1.3257887915833864, 0.9339226927105295, 0.8147411912850167, 0.7672003619355795], 'Thres3': [0.061678860100354886, 0.040927807656084815, 0.03495229697046755, 0.03270554679645187], 'Thres1': [0.12205387380792497, 0.09565800019695468, 0.08534264885106506, 0.0807043736481941], 'Thres2': [0.07752597587016886, 0.05453272288424353, 0.04735448019146425, 0.04445874711926984], 'D1': [0.07234874943535545, 0.04865986815801858, 0.04099138337773542, 0.03782600185682558]}
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 0.000125
current rate is  0.001
Epoch 15/20, Iter 0/8863, train loss = 7.859, time = 1.130,losses averange=7.859
Epoch 15/20, Iter 100/8863, train loss = 10.071, time = 1.049,losses averange=4.028
Epoch 15/20, Iter 200/8863, train loss = 3.957, time = 1.076,losses averange=3.903
Epoch 15/20, Iter 300/8863, train loss = 2.374, time = 1.092,losses averange=3.730
Epoch 15/20, Iter 400/8863, train loss = 2.851, time = 1.070,losses averange=3.695
Epoch 15/20, Iter 500/8863, train loss = 1.749, time = 1.094,losses averange=3.578
Epoch 15/20, Iter 600/8863, train loss = 2.322, time = 1.074,losses averange=3.574
Epoch 15/20, Iter 700/8863, train loss = 6.599, time = 1.045,losses averange=3.555
Epoch 15/20, Iter 800/8863, train loss = 2.264, time = 1.091,losses averange=3.563
Epoch 15/20, Iter 900/8863, train loss = 2.548, time = 1.049,losses averange=3.552
Epoch 15/20, Iter 1000/8863, train loss = 2.390, time = 1.070,losses averange=3.527
Epoch 15/20, Iter 1100/8863, train loss = 4.168, time = 1.138,losses averange=3.494
Epoch 15/20, Iter 1200/8863, train loss = 2.326, time = 1.048,losses averange=3.495
Epoch 15/20, Iter 1300/8863, train loss = 2.241, time = 1.048,losses averange=3.497
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 15/20, Iter 1400/8863, train loss = 4.798, time = 1.079,losses averange=3.556
Epoch 15/20, Iter 1500/8863, train loss = 3.029, time = 1.086,losses averange=3.571
Epoch 15/20, Iter 1600/8863, train loss = 5.723, time = 1.087,losses averange=3.561
Epoch 15/20, Iter 1700/8863, train loss = 1.808, time = 1.031,losses averange=3.575
Epoch 15/20, Iter 1800/8863, train loss = 2.096, time = 1.074,losses averange=3.575
Epoch 15/20, Iter 1900/8863, train loss = 3.400, time = 1.085,losses averange=3.568
Epoch 15/20, Iter 2000/8863, train loss = 5.244, time = 1.044,losses averange=3.554
Epoch 15/20, Iter 2100/8863, train loss = 2.319, time = 1.049,losses averange=3.556
Epoch 15/20, Iter 2200/8863, train loss = 3.530, time = 1.095,losses averange=3.536
Epoch 15/20, Iter 2300/8863, train loss = 4.509, time = 1.073,losses averange=3.535
Epoch 15/20, Iter 2400/8863, train loss = 6.708, time = 1.109,losses averange=3.522
Epoch 15/20, Iter 2500/8863, train loss = 4.330, time = 1.058,losses averange=3.523
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 15/20, Iter 2600/8863, train loss = 1.327, time = 1.040,losses averange=3.499
Epoch 15/20, Iter 2700/8863, train loss = 2.038, time = 1.059,losses averange=3.487
Epoch 15/20, Iter 2800/8863, train loss = 3.064, time = 1.059,losses averange=3.497
Epoch 15/20, Iter 2900/8863, train loss = 3.785, time = 1.054,losses averange=3.502
Epoch 15/20, Iter 3000/8863, train loss = 6.231, time = 1.049,losses averange=3.502
Epoch 15/20, Iter 3100/8863, train loss = 3.161, time = 1.110,losses averange=3.500
Epoch 15/20, Iter 3200/8863, train loss = 1.059, time = 1.043,losses averange=3.498
Epoch 15/20, Iter 3300/8863, train loss = 2.599, time = 1.168,losses averange=3.491
Epoch 15/20, Iter 3400/8863, train loss = 1.584, time = 1.087,losses averange=3.487
Epoch 15/20, Iter 3500/8863, train loss = 2.946, time = 1.085,losses averange=3.476
Epoch 15/20, Iter 3600/8863, train loss = 2.092, time = 1.088,losses averange=3.473
Epoch 15/20, Iter 3700/8863, train loss = 3.030, time = 1.041,losses averange=3.468
Epoch 15/20, Iter 3800/8863, train loss = 0.397, time = 1.034,losses averange=3.461
Epoch 15/20, Iter 3900/8863, train loss = 1.793, time = 1.100,losses averange=3.451
Epoch 15/20, Iter 4000/8863, train loss = 1.600, time = 1.038,losses averange=3.448
Epoch 15/20, Iter 4100/8863, train loss = 0.757, time = 1.089,losses averange=3.441
Epoch 15/20, Iter 4200/8863, train loss = 1.301, time = 1.108,losses averange=3.434
Epoch 15/20, Iter 4300/8863, train loss = 2.346, time = 1.054,losses averange=3.431
Epoch 15/20, Iter 4400/8863, train loss = 1.798, time = 1.052,losses averange=3.436
Epoch 15/20, Iter 4500/8863, train loss = 3.077, time = 1.024,losses averange=3.432
Epoch 15/20, Iter 4600/8863, train loss = 4.661, time = 1.034,losses averange=3.438
Epoch 15/20, Iter 4700/8863, train loss = 2.075, time = 1.082,losses averange=3.443
Epoch 15/20, Iter 4800/8863, train loss = 1.704, time = 1.099,losses averange=3.443
Epoch 15/20, Iter 4900/8863, train loss = 3.024, time = 1.080,losses averange=3.446
Epoch 15/20, Iter 5000/8863, train loss = 3.590, time = 1.056,losses averange=3.453
Epoch 15/20, Iter 5100/8863, train loss = 3.398, time = 1.059,losses averange=3.455
Epoch 15/20, Iter 5200/8863, train loss = 3.173, time = 1.107,losses averange=3.452
Epoch 15/20, Iter 5300/8863, train loss = 2.566, time = 1.079,losses averange=3.450
Epoch 15/20, Iter 5400/8863, train loss = 1.000, time = 1.070,losses averange=3.448
Epoch 15/20, Iter 5500/8863, train loss = 4.181, time = 1.095,losses averange=3.453
Epoch 15/20, Iter 5600/8863, train loss = 4.361, time = 1.106,losses averange=3.460
Epoch 15/20, Iter 5700/8863, train loss = 2.785, time = 1.074,losses averange=3.463
Epoch 15/20, Iter 5800/8863, train loss = 2.109, time = 1.080,losses averange=3.460
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 15/20, Iter 5900/8863, train loss = 6.424, time = 1.094,losses averange=3.457
Epoch 15/20, Iter 6000/8863, train loss = 1.402, time = 1.067,losses averange=3.459
Epoch 15/20, Iter 6100/8863, train loss = 5.558, time = 1.079,losses averange=3.463
Epoch 15/20, Iter 6200/8863, train loss = 5.080, time = 1.051,losses averange=3.462
Epoch 15/20, Iter 6300/8863, train loss = 2.167, time = 1.089,losses averange=3.460
Epoch 15/20, Iter 6400/8863, train loss = 1.027, time = 1.049,losses averange=3.462
Epoch 15/20, Iter 6500/8863, train loss = 2.443, time = 1.050,losses averange=3.459
Epoch 15/20, Iter 6600/8863, train loss = 8.086, time = 1.033,losses averange=3.463
Epoch 15/20, Iter 6700/8863, train loss = 6.354, time = 1.057,losses averange=3.462
Epoch 15/20, Iter 6800/8863, train loss = 1.976, time = 1.053,losses averange=3.463
Epoch 15/20, Iter 6900/8863, train loss = 1.842, time = 1.069,losses averange=3.466
Epoch 15/20, Iter 7000/8863, train loss = 2.060, time = 1.112,losses averange=3.471
Epoch 15/20, Iter 7100/8863, train loss = 1.123, time = 1.048,losses averange=3.471
Epoch 15/20, Iter 7200/8863, train loss = 3.527, time = 1.079,losses averange=3.475
Epoch 15/20, Iter 7300/8863, train loss = 1.986, time = 1.030,losses averange=3.481
Epoch 15/20, Iter 7400/8863, train loss = 2.710, time = 1.052,losses averange=3.480
Epoch 15/20, Iter 7500/8863, train loss = 2.615, time = 1.057,losses averange=3.476
Epoch 15/20, Iter 7600/8863, train loss = 4.426, time = 1.032,losses averange=3.469
Epoch 15/20, Iter 7700/8863, train loss = 2.222, time = 1.090,losses averange=3.468
Epoch 15/20, Iter 7800/8863, train loss = 3.510, time = 1.048,losses averange=3.472
Epoch 15/20, Iter 7900/8863, train loss = 4.209, time = 1.088,losses averange=3.467
Epoch 15/20, Iter 8000/8863, train loss = 10.248, time = 1.082,losses averange=3.470
Epoch 15/20, Iter 8100/8863, train loss = 2.222, time = 1.124,losses averange=3.471
Epoch 15/20, Iter 8200/8863, train loss = 7.483, time = 1.037,losses averange=3.471
Epoch 15/20, Iter 8300/8863, train loss = 6.337, time = 1.057,losses averange=3.473
Epoch 15/20, Iter 8400/8863, train loss = 3.931, time = 1.087,losses averange=3.474
Epoch 15/20, Iter 8500/8863, train loss = 4.018, time = 1.102,losses averange=3.476
Epoch 15/20, Iter 8600/8863, train loss = 1.635, time = 1.050,losses averange=3.474
Epoch 15/20, Iter 8700/8863, train loss = 1.467, time = 1.130,losses averange=3.477
Epoch 15/20, Iter 8800/8863, train loss = 2.454, time = 1.063,losses averange=3.479
Epoch 15/20, Iter 8862/8863, train loss = 4.852, time = 1.171,losses averange=3.477
avg_train_loss 3.4770746922958358
Epoch 15/20, Iter 0/4370, test loss = 1.032, time = 0.557060
Epoch 15/20, Iter 100/4370, test loss = 3.366, time = 0.550272
Epoch 15/20, Iter 200/4370, test loss = 2.727, time = 0.555444
Epoch 15/20, Iter 300/4370, test loss = 4.799, time = 0.546600
Epoch 15/20, Iter 400/4370, test loss = 2.824, time = 0.548594
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 15/20, Iter 500/4370, test loss = 2.055, time = 0.552719
Epoch 15/20, Iter 600/4370, test loss = 0.718, time = 0.548406
Epoch 15/20, Iter 700/4370, test loss = 5.656, time = 0.550544
Epoch 15/20, Iter 800/4370, test loss = 1.779, time = 0.551181
Epoch 15/20, Iter 900/4370, test loss = 0.711, time = 0.558827
Epoch 15/20, Iter 1000/4370, test loss = 0.560, time = 0.550061
Epoch 15/20, Iter 1100/4370, test loss = 1.014, time = 0.549025
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 15/20, Iter 1200/4370, test loss = 1.284, time = 0.550061
Epoch 15/20, Iter 1300/4370, test loss = 3.426, time = 0.547528
Epoch 15/20, Iter 1400/4370, test loss = 4.081, time = 0.550875
Epoch 15/20, Iter 1500/4370, test loss = 0.856, time = 0.549641
Epoch 15/20, Iter 1600/4370, test loss = 1.499, time = 0.557307
Epoch 15/20, Iter 1700/4370, test loss = 1.493, time = 0.553415
Epoch 15/20, Iter 1800/4370, test loss = 1.043, time = 0.553069
Epoch 15/20, Iter 1900/4370, test loss = 1.893, time = 0.551829
Epoch 15/20, Iter 2000/4370, test loss = 1.261, time = 0.552278
Epoch 15/20, Iter 2100/4370, test loss = 1.033, time = 0.566316
Epoch 15/20, Iter 2200/4370, test loss = 0.622, time = 0.551413
Epoch 15/20, Iter 2300/4370, test loss = 2.318, time = 0.552315
Epoch 15/20, Iter 2400/4370, test loss = 0.965, time = 0.550989
Epoch 15/20, Iter 2500/4370, test loss = 1.757, time = 0.548546
Epoch 15/20, Iter 2600/4370, test loss = 0.882, time = 0.549729
Epoch 15/20, Iter 2700/4370, test loss = 2.795, time = 0.540334
Epoch 15/20, Iter 2800/4370, test loss = 1.536, time = 0.552923
Epoch 15/20, Iter 2900/4370, test loss = 1.426, time = 0.555916
Epoch 15/20, Iter 3000/4370, test loss = 1.387, time = 0.558670
Epoch 15/20, Iter 3100/4370, test loss = 0.951, time = 0.549177
Epoch 15/20, Iter 3200/4370, test loss = 1.981, time = 0.552111
Epoch 15/20, Iter 3300/4370, test loss = 0.804, time = 0.567472
Epoch 15/20, Iter 3400/4370, test loss = 1.023, time = 0.549856
Epoch 15/20, Iter 3500/4370, test loss = 1.396, time = 0.546972
Epoch 15/20, Iter 3600/4370, test loss = 1.966, time = 0.551830
Epoch 15/20, Iter 3700/4370, test loss = 2.879, time = 0.554822
Epoch 15/20, Iter 3800/4370, test loss = 1.952, time = 0.551530
Epoch 15/20, Iter 3900/4370, test loss = 1.843, time = 0.547287
Epoch 15/20, Iter 4000/4370, test loss = 1.226, time = 0.550212
Epoch 15/20, Iter 4100/4370, test loss = 1.243, time = 0.546463
Epoch 15/20, Iter 4200/4370, test loss = 0.723, time = 0.550015
Epoch 15/20, Iter 4300/4370, test loss = 1.192, time = 0.547755
Epoch 15/20, Iter 4369/4370, test loss = 2.395, time = 0.549469
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.05565007133894223, 0.03504753493505703, 0.029151768502603485, 0.027055990129567522], 'EPE': [1.3023331828705234, 0.9269356628884167, 0.8091978859233092, 0.7633144463636237], 'Thres3': [0.06210162050215404, 0.04122913472420479, 0.03500251498081864, 0.032728539916550316], 'Thres1': [0.12273233314247235, 0.09625451998034966, 0.08560133189052446, 0.0811214923197979], 'Thres2': [0.0781067893648567, 0.05503634651185139, 0.047444395194452434, 0.04461024983997033], 'D1': [0.07259112431814796, 0.04893528705444698, 0.04094661849431557, 0.03784749609241326]}
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 6.25e-05
current rate is  0.001
Epoch 16/20, Iter 0/8863, train loss = 1.628, time = 1.074,losses averange=1.628
Epoch 16/20, Iter 100/8863, train loss = 1.143, time = 1.078,losses averange=3.194
Epoch 16/20, Iter 200/8863, train loss = 6.786, time = 1.042,losses averange=3.075
Epoch 16/20, Iter 300/8863, train loss = 6.004, time = 1.092,losses averange=3.158
Epoch 16/20, Iter 400/8863, train loss = 2.562, time = 1.068,losses averange=3.272
Epoch 16/20, Iter 500/8863, train loss = 2.871, time = 1.080,losses averange=3.240
Epoch 16/20, Iter 600/8863, train loss = 2.326, time = 1.087,losses averange=3.327
Epoch 16/20, Iter 700/8863, train loss = 2.357, time = 1.076,losses averange=3.320
Epoch 16/20, Iter 800/8863, train loss = 4.354, time = 1.110,losses averange=3.348
Epoch 16/20, Iter 900/8863, train loss = 5.073, time = 1.083,losses averange=3.421
Epoch 16/20, Iter 1000/8863, train loss = 3.457, time = 1.074,losses averange=3.436
Epoch 16/20, Iter 1100/8863, train loss = 2.817, time = 1.145,losses averange=3.429
Epoch 16/20, Iter 1200/8863, train loss = 2.427, time = 1.081,losses averange=3.409
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 16/20, Iter 1300/8863, train loss = 5.186, time = 1.075,losses averange=3.428
Epoch 16/20, Iter 1400/8863, train loss = 1.877, time = 1.074,losses averange=3.411
Epoch 16/20, Iter 1500/8863, train loss = 2.184, time = 1.081,losses averange=3.410
Epoch 16/20, Iter 1600/8863, train loss = 2.143, time = 1.076,losses averange=3.434
Epoch 16/20, Iter 1700/8863, train loss = 4.045, time = 1.085,losses averange=3.448
Epoch 16/20, Iter 1800/8863, train loss = 9.097, time = 1.036,losses averange=3.457
Epoch 16/20, Iter 1900/8863, train loss = 7.895, time = 1.034,losses averange=3.444
Epoch 16/20, Iter 2000/8863, train loss = 2.957, time = 1.086,losses averange=3.451
Epoch 16/20, Iter 2100/8863, train loss = 2.807, time = 1.050,losses averange=3.462
Epoch 16/20, Iter 2200/8863, train loss = 2.956, time = 1.135,losses averange=3.461
Epoch 16/20, Iter 2300/8863, train loss = 3.665, time = 1.035,losses averange=3.458
Epoch 16/20, Iter 2400/8863, train loss = 1.988, time = 1.024,losses averange=3.456
Epoch 16/20, Iter 2500/8863, train loss = 2.836, time = 1.036,losses averange=3.465
Epoch 16/20, Iter 2600/8863, train loss = 4.557, time = 1.060,losses averange=3.467
Epoch 16/20, Iter 2700/8863, train loss = 2.731, time = 1.055,losses averange=3.464
Epoch 16/20, Iter 2800/8863, train loss = 8.513, time = 1.091,losses averange=3.463
Epoch 16/20, Iter 2900/8863, train loss = 2.909, time = 1.096,losses averange=3.460
Epoch 16/20, Iter 3000/8863, train loss = 2.001, time = 1.081,losses averange=3.463
Epoch 16/20, Iter 3100/8863, train loss = 1.183, time = 1.036,losses averange=3.455
Epoch 16/20, Iter 3200/8863, train loss = 2.138, time = 1.037,losses averange=3.449
Epoch 16/20, Iter 3300/8863, train loss = 4.334, time = 1.175,losses averange=3.449
Epoch 16/20, Iter 3400/8863, train loss = 6.305, time = 1.033,losses averange=3.447
Epoch 16/20, Iter 3500/8863, train loss = 3.973, time = 1.068,losses averange=3.447
Epoch 16/20, Iter 3600/8863, train loss = 2.491, time = 1.061,losses averange=3.441
Epoch 16/20, Iter 3700/8863, train loss = 1.845, time = 1.033,losses averange=3.449
Epoch 16/20, Iter 3800/8863, train loss = 2.404, time = 1.101,losses averange=3.443
Epoch 16/20, Iter 3900/8863, train loss = 4.365, time = 1.076,losses averange=3.445
Epoch 16/20, Iter 4000/8863, train loss = 3.666, time = 1.065,losses averange=3.455
Epoch 16/20, Iter 4100/8863, train loss = 1.713, time = 1.120,losses averange=3.448
Epoch 16/20, Iter 4200/8863, train loss = 2.366, time = 1.090,losses averange=3.451
Epoch 16/20, Iter 4300/8863, train loss = 1.526, time = 1.049,losses averange=3.450
Epoch 16/20, Iter 4400/8863, train loss = 1.738, time = 1.058,losses averange=3.445
Epoch 16/20, Iter 4500/8863, train loss = 1.880, time = 1.090,losses averange=3.444
Epoch 16/20, Iter 4600/8863, train loss = 0.746, time = 1.040,losses averange=3.444
Epoch 16/20, Iter 4700/8863, train loss = 1.432, time = 1.077,losses averange=3.436
Epoch 16/20, Iter 4800/8863, train loss = 1.249, time = 1.066,losses averange=3.439
Epoch 16/20, Iter 4900/8863, train loss = 5.177, time = 1.059,losses averange=3.446
Epoch 16/20, Iter 5000/8863, train loss = 3.094, time = 1.072,losses averange=3.454
Epoch 16/20, Iter 5100/8863, train loss = 2.171, time = 1.064,losses averange=3.449
Epoch 16/20, Iter 5200/8863, train loss = 5.361, time = 1.045,losses averange=3.449
Epoch 16/20, Iter 5300/8863, train loss = 2.334, time = 1.075,losses averange=3.444
Epoch 16/20, Iter 5400/8863, train loss = 1.821, time = 1.062,losses averange=3.446
Epoch 16/20, Iter 5500/8863, train loss = 2.683, time = 1.052,losses averange=3.442
Epoch 16/20, Iter 5600/8863, train loss = 5.141, time = 1.075,losses averange=3.439
Epoch 16/20, Iter 5700/8863, train loss = 9.189, time = 1.067,losses averange=3.444
Epoch 16/20, Iter 5800/8863, train loss = 3.875, time = 1.051,losses averange=3.437
Epoch 16/20, Iter 5900/8863, train loss = 1.795, time = 1.125,losses averange=3.427
Epoch 16/20, Iter 6000/8863, train loss = 3.657, time = 1.103,losses averange=3.420
Epoch 16/20, Iter 6100/8863, train loss = 2.101, time = 1.047,losses averange=3.424
Epoch 16/20, Iter 6200/8863, train loss = 7.428, time = 1.083,losses averange=3.424
Epoch 16/20, Iter 6300/8863, train loss = 1.546, time = 1.050,losses averange=3.430
Epoch 16/20, Iter 6400/8863, train loss = 1.880, time = 1.094,losses averange=3.433
Epoch 16/20, Iter 6500/8863, train loss = 1.658, time = 1.040,losses averange=3.427
Epoch 16/20, Iter 6600/8863, train loss = 1.864, time = 1.064,losses averange=3.422
Epoch 16/20, Iter 6700/8863, train loss = 3.242, time = 1.072,losses averange=3.426
Epoch 16/20, Iter 6800/8863, train loss = 3.561, time = 1.032,losses averange=3.428
Epoch 16/20, Iter 6900/8863, train loss = 3.241, time = 1.060,losses averange=3.427
Epoch 16/20, Iter 7000/8863, train loss = 2.507, time = 1.134,losses averange=3.426
Epoch 16/20, Iter 7100/8863, train loss = 2.536, time = 1.055,losses averange=3.420
Epoch 16/20, Iter 7200/8863, train loss = 8.001, time = 1.056,losses averange=3.424
Epoch 16/20, Iter 7300/8863, train loss = 1.926, time = 1.056,losses averange=3.425
Epoch 16/20, Iter 7400/8863, train loss = 0.952, time = 1.038,losses averange=3.424
Epoch 16/20, Iter 7500/8863, train loss = 2.995, time = 1.072,losses averange=3.424
Epoch 16/20, Iter 7600/8863, train loss = 4.447, time = 1.055,losses averange=3.419
Epoch 16/20, Iter 7700/8863, train loss = 2.571, time = 1.083,losses averange=3.421
Epoch 16/20, Iter 7800/8863, train loss = 1.753, time = 1.065,losses averange=3.419
Epoch 16/20, Iter 7900/8863, train loss = 2.531, time = 1.052,losses averange=3.421
Epoch 16/20, Iter 8000/8863, train loss = 1.890, time = 1.059,losses averange=3.419
Epoch 16/20, Iter 8100/8863, train loss = 1.301, time = 1.098,losses averange=3.419
Epoch 16/20, Iter 8200/8863, train loss = 6.794, time = 1.030,losses averange=3.420
Epoch 16/20, Iter 8300/8863, train loss = 7.378, time = 1.092,losses averange=3.420
Epoch 16/20, Iter 8400/8863, train loss = 1.964, time = 1.064,losses averange=3.418
Epoch 16/20, Iter 8500/8863, train loss = 1.985, time = 1.074,losses averange=3.418
Epoch 16/20, Iter 8600/8863, train loss = 5.259, time = 1.068,losses averange=3.419
Epoch 16/20, Iter 8700/8863, train loss = 3.748, time = 1.032,losses averange=3.423
Epoch 16/20, Iter 8800/8863, train loss = 3.892, time = 1.051,losses averange=3.423
Epoch 16/20, Iter 8862/8863, train loss = 3.317, time = 1.096,losses averange=3.424
avg_train_loss 3.4241701271979705
Epoch 16/20, Iter 0/4370, test loss = 1.014, time = 2.841262
Epoch 16/20, Iter 100/4370, test loss = 3.349, time = 2.560141
Epoch 16/20, Iter 200/4370, test loss = 2.760, time = 2.375401
Epoch 16/20, Iter 300/4370, test loss = 4.523, time = 2.685467
Epoch 16/20, Iter 400/4370, test loss = 3.026, time = 2.563726
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 16/20, Iter 500/4370, test loss = 2.045, time = 2.628242
Epoch 16/20, Iter 600/4370, test loss = 0.664, time = 2.201546
Epoch 16/20, Iter 700/4370, test loss = 6.144, time = 2.259488
Epoch 16/20, Iter 800/4370, test loss = 1.798, time = 2.683840
Epoch 16/20, Iter 900/4370, test loss = 0.688, time = 2.407860
Epoch 16/20, Iter 1000/4370, test loss = 0.530, time = 2.191812
Epoch 16/20, Iter 1100/4370, test loss = 0.984, time = 2.643193
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 16/20, Iter 1200/4370, test loss = 1.254, time = 2.459847
Epoch 16/20, Iter 1300/4370, test loss = 3.437, time = 2.136267
Epoch 16/20, Iter 1400/4370, test loss = 4.123, time = 2.632751
Epoch 16/20, Iter 1500/4370, test loss = 0.876, time = 2.660722
Epoch 16/20, Iter 1600/4370, test loss = 1.443, time = 2.385571
Epoch 16/20, Iter 1700/4370, test loss = 1.522, time = 2.490416
Epoch 16/20, Iter 1800/4370, test loss = 1.046, time = 2.648043
Epoch 16/20, Iter 1900/4370, test loss = 1.846, time = 2.606843
Epoch 16/20, Iter 2000/4370, test loss = 1.280, time = 2.488454
Epoch 16/20, Iter 2100/4370, test loss = 1.000, time = 2.585064
Epoch 16/20, Iter 2200/4370, test loss = 0.620, time = 2.245431
Epoch 16/20, Iter 2300/4370, test loss = 2.315, time = 2.427786
Epoch 16/20, Iter 2400/4370, test loss = 0.911, time = 2.423698
Epoch 16/20, Iter 2500/4370, test loss = 1.758, time = 2.635934
Epoch 16/20, Iter 2600/4370, test loss = 0.900, time = 2.562351
Epoch 16/20, Iter 2700/4370, test loss = 3.190, time = 2.202379
Epoch 16/20, Iter 2800/4370, test loss = 1.563, time = 2.436266
Epoch 16/20, Iter 2900/4370, test loss = 1.406, time = 2.510561
Epoch 16/20, Iter 3000/4370, test loss = 1.437, time = 2.506624
Epoch 16/20, Iter 3100/4370, test loss = 0.924, time = 2.546311
Epoch 16/20, Iter 3200/4370, test loss = 1.815, time = 2.578616
Epoch 16/20, Iter 3300/4370, test loss = 0.809, time = 2.298986
Epoch 16/20, Iter 3400/4370, test loss = 0.937, time = 2.353591
Epoch 16/20, Iter 3500/4370, test loss = 1.429, time = 2.457366
Epoch 16/20, Iter 3600/4370, test loss = 1.874, time = 2.238191
Epoch 16/20, Iter 3700/4370, test loss = 2.884, time = 2.276325
Epoch 16/20, Iter 3800/4370, test loss = 1.945, time = 2.456630
Epoch 16/20, Iter 3900/4370, test loss = 1.813, time = 2.431400
Epoch 16/20, Iter 4000/4370, test loss = 1.333, time = 2.513864
Epoch 16/20, Iter 4100/4370, test loss = 1.219, time = 2.423448
Epoch 16/20, Iter 4200/4370, test loss = 0.720, time = 2.494248
Epoch 16/20, Iter 4300/4370, test loss = 1.215, time = 2.489229
Epoch 16/20, Iter 4369/4370, test loss = 2.396, time = 0.550489
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.05540909917020288, 0.0348066187429602, 0.02890390281011915, 0.026780105178224167], 'EPE': [1.3251852594878635, 0.9274917210335044, 0.8058110326596747, 0.7574049674503045], 'Thres3': [0.061705270659570634, 0.040871985324283364, 0.03470171060177628, 0.03240223144968541], 'Thres1': [0.12213323409466639, 0.09532036312175936, 0.08485516677940907, 0.08028208130780923], 'Thres2': [0.07759082979070837, 0.054476795363766345, 0.047041733758801114, 0.044130049012089896], 'D1': [0.07262607106397641, 0.04852384154038031, 0.04063004358230453, 0.03743403007881609]}
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 6.25e-05
current rate is  0.001
Epoch 17/20, Iter 0/8863, train loss = 3.848, time = 1.098,losses averange=3.848
Epoch 17/20, Iter 100/8863, train loss = 3.471, time = 1.100,losses averange=3.387
Epoch 17/20, Iter 200/8863, train loss = 2.085, time = 1.038,losses averange=3.357
Epoch 17/20, Iter 300/8863, train loss = 2.555, time = 1.030,losses averange=3.368
Epoch 17/20, Iter 400/8863, train loss = 3.049, time = 1.041,losses averange=3.292
Epoch 17/20, Iter 500/8863, train loss = 6.201, time = 1.028,losses averange=3.249
Epoch 17/20, Iter 600/8863, train loss = 3.645, time = 1.035,losses averange=3.300
Epoch 17/20, Iter 700/8863, train loss = 5.123, time = 1.041,losses averange=3.288
Epoch 17/20, Iter 800/8863, train loss = 14.178, time = 1.048,losses averange=3.349
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 17/20, Iter 900/8863, train loss = 2.481, time = 1.047,losses averange=3.373
Epoch 17/20, Iter 1000/8863, train loss = 2.361, time = 1.043,losses averange=3.350
Epoch 17/20, Iter 1100/8863, train loss = 1.516, time = 1.131,losses averange=3.319
Epoch 17/20, Iter 1200/8863, train loss = 0.847, time = 1.078,losses averange=3.336
Epoch 17/20, Iter 1300/8863, train loss = 4.424, time = 1.075,losses averange=3.367
Epoch 17/20, Iter 1400/8863, train loss = 4.442, time = 1.035,losses averange=3.374
Epoch 17/20, Iter 1500/8863, train loss = 12.947, time = 1.075,losses averange=3.413
Epoch 17/20, Iter 1600/8863, train loss = 3.808, time = 1.056,losses averange=3.411
Epoch 17/20, Iter 1700/8863, train loss = 1.859, time = 1.039,losses averange=3.420
Epoch 17/20, Iter 1800/8863, train loss = 5.843, time = 1.066,losses averange=3.417
Epoch 17/20, Iter 1900/8863, train loss = 1.938, time = 1.023,losses averange=3.415
Epoch 17/20, Iter 2000/8863, train loss = 1.502, time = 1.082,losses averange=3.428
Epoch 17/20, Iter 2100/8863, train loss = 6.703, time = 1.044,losses averange=3.409
Epoch 17/20, Iter 2200/8863, train loss = 2.433, time = 1.137,losses averange=3.397
Epoch 17/20, Iter 2300/8863, train loss = 1.309, time = 1.086,losses averange=3.400
Epoch 17/20, Iter 2400/8863, train loss = 2.456, time = 1.072,losses averange=3.421
Epoch 17/20, Iter 2500/8863, train loss = 5.769, time = 1.037,losses averange=3.408
Epoch 17/20, Iter 2600/8863, train loss = 4.529, time = 1.047,losses averange=3.407
Epoch 17/20, Iter 2700/8863, train loss = 5.415, time = 1.070,losses averange=3.414
Epoch 17/20, Iter 2800/8863, train loss = 3.707, time = 1.067,losses averange=3.427
Epoch 17/20, Iter 2900/8863, train loss = 2.264, time = 1.084,losses averange=3.435
Epoch 17/20, Iter 3000/8863, train loss = 3.366, time = 1.079,losses averange=3.441
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 17/20, Iter 3100/8863, train loss = 2.056, time = 1.058,losses averange=3.433
Epoch 17/20, Iter 3200/8863, train loss = 2.202, time = 1.107,losses averange=3.424
Epoch 17/20, Iter 3300/8863, train loss = 7.270, time = 1.106,losses averange=3.418
Epoch 17/20, Iter 3400/8863, train loss = 1.800, time = 1.108,losses averange=3.413
Epoch 17/20, Iter 3500/8863, train loss = 1.939, time = 1.042,losses averange=3.405
Epoch 17/20, Iter 3600/8863, train loss = 6.760, time = 1.052,losses averange=3.406
Epoch 17/20, Iter 3700/8863, train loss = 2.248, time = 1.055,losses averange=3.403
Epoch 17/20, Iter 3800/8863, train loss = 2.659, time = 1.070,losses averange=3.403
Epoch 17/20, Iter 3900/8863, train loss = 2.418, time = 1.093,losses averange=3.392
Epoch 17/20, Iter 4000/8863, train loss = 2.530, time = 1.074,losses averange=3.387
Epoch 17/20, Iter 4100/8863, train loss = 3.575, time = 1.049,losses averange=3.400
Epoch 17/20, Iter 4200/8863, train loss = 3.489, time = 1.061,losses averange=3.392
Epoch 17/20, Iter 4300/8863, train loss = 5.076, time = 1.058,losses averange=3.394
Epoch 17/20, Iter 4400/8863, train loss = 3.771, time = 1.053,losses averange=3.385
Epoch 17/20, Iter 4500/8863, train loss = 3.493, time = 1.098,losses averange=3.382
Epoch 17/20, Iter 4600/8863, train loss = 2.901, time = 1.031,losses averange=3.374
Epoch 17/20, Iter 4700/8863, train loss = 8.899, time = 1.051,losses averange=3.374
Epoch 17/20, Iter 4800/8863, train loss = 2.754, time = 1.085,losses averange=3.384
Epoch 17/20, Iter 4900/8863, train loss = 2.221, time = 1.075,losses averange=3.383
Epoch 17/20, Iter 5000/8863, train loss = 1.940, time = 1.069,losses averange=3.380
Epoch 17/20, Iter 5100/8863, train loss = 5.386, time = 1.052,losses averange=3.375
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 17/20, Iter 5200/8863, train loss = 2.111, time = 1.065,losses averange=3.379
Epoch 17/20, Iter 5300/8863, train loss = 2.513, time = 1.043,losses averange=3.380
Epoch 17/20, Iter 5400/8863, train loss = 2.044, time = 1.049,losses averange=3.383
Epoch 17/20, Iter 5500/8863, train loss = 7.858, time = 1.034,losses averange=3.378
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 17/20, Iter 5600/8863, train loss = 2.392, time = 1.079,losses averange=3.377
Epoch 17/20, Iter 5700/8863, train loss = 2.131, time = 1.134,losses averange=3.375
Epoch 17/20, Iter 5800/8863, train loss = 3.175, time = 1.081,losses averange=3.366
Epoch 17/20, Iter 5900/8863, train loss = 1.603, time = 1.132,losses averange=3.363
Epoch 17/20, Iter 6000/8863, train loss = 3.366, time = 1.043,losses averange=3.361
Epoch 17/20, Iter 6100/8863, train loss = 1.599, time = 1.050,losses averange=3.365
Epoch 17/20, Iter 6200/8863, train loss = 3.269, time = 1.073,losses averange=3.363
Epoch 17/20, Iter 6300/8863, train loss = 2.159, time = 1.091,losses averange=3.366
Epoch 17/20, Iter 6400/8863, train loss = 3.245, time = 1.057,losses averange=3.371
Epoch 17/20, Iter 6500/8863, train loss = 2.635, time = 1.060,losses averange=3.378
Epoch 17/20, Iter 6600/8863, train loss = 2.381, time = 1.052,losses averange=3.379
Epoch 17/20, Iter 6700/8863, train loss = 2.143, time = 1.098,losses averange=3.374
Epoch 17/20, Iter 6800/8863, train loss = 5.888, time = 1.064,losses averange=3.376
Epoch 17/20, Iter 6900/8863, train loss = 1.485, time = 1.046,losses averange=3.374
Epoch 17/20, Iter 7000/8863, train loss = 4.241, time = 1.107,losses averange=3.377
Epoch 17/20, Iter 7100/8863, train loss = 2.921, time = 1.079,losses averange=3.375
Epoch 17/20, Iter 7200/8863, train loss = 7.638, time = 1.046,losses averange=3.371
Epoch 17/20, Iter 7300/8863, train loss = 3.172, time = 1.057,losses averange=3.368
Epoch 17/20, Iter 7400/8863, train loss = 10.764, time = 1.058,losses averange=3.375
Epoch 17/20, Iter 7500/8863, train loss = 2.636, time = 1.065,losses averange=3.376
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 17/20, Iter 7600/8863, train loss = 2.796, time = 1.038,losses averange=3.381
Epoch 17/20, Iter 7700/8863, train loss = 1.695, time = 1.080,losses averange=3.387
Epoch 17/20, Iter 7800/8863, train loss = 2.456, time = 1.102,losses averange=3.388
Epoch 17/20, Iter 7900/8863, train loss = 1.841, time = 1.076,losses averange=3.388
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 17/20, Iter 8000/8863, train loss = 5.577, time = 1.070,losses averange=3.385
Epoch 17/20, Iter 8100/8863, train loss = 2.932, time = 1.122,losses averange=3.388
Epoch 17/20, Iter 8200/8863, train loss = 1.665, time = 1.055,losses averange=3.389
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 17/20, Iter 8300/8863, train loss = 2.284, time = 1.038,losses averange=3.390
Epoch 17/20, Iter 8400/8863, train loss = 3.845, time = 1.076,losses averange=3.387
Epoch 17/20, Iter 8500/8863, train loss = 2.988, time = 1.101,losses averange=3.389
Epoch 17/20, Iter 8600/8863, train loss = 1.158, time = 1.079,losses averange=3.390
Epoch 17/20, Iter 8700/8863, train loss = 3.128, time = 1.082,losses averange=3.391
Epoch 17/20, Iter 8800/8863, train loss = 0.775, time = 1.075,losses averange=3.392
Epoch 17/20, Iter 8862/8863, train loss = 5.583, time = 1.100,losses averange=3.392
avg_train_loss 3.3917529484471256
Epoch 17/20, Iter 0/4370, test loss = 0.989, time = 0.576894
Epoch 17/20, Iter 100/4370, test loss = 3.220, time = 0.555181
Epoch 17/20, Iter 200/4370, test loss = 3.110, time = 0.551417
Epoch 17/20, Iter 300/4370, test loss = 4.943, time = 0.549980
Epoch 17/20, Iter 400/4370, test loss = 3.147, time = 0.549968
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 17/20, Iter 500/4370, test loss = 1.802, time = 0.549245
Epoch 17/20, Iter 600/4370, test loss = 0.692, time = 0.552789
Epoch 17/20, Iter 700/4370, test loss = 5.855, time = 0.547908
Epoch 17/20, Iter 800/4370, test loss = 1.897, time = 0.547204
Epoch 17/20, Iter 900/4370, test loss = 0.671, time = 0.552819
Epoch 17/20, Iter 1000/4370, test loss = 0.526, time = 0.558177
Epoch 17/20, Iter 1100/4370, test loss = 0.983, time = 0.557219
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 17/20, Iter 1200/4370, test loss = 1.262, time = 0.553855
Epoch 17/20, Iter 1300/4370, test loss = 3.417, time = 0.549375
Epoch 17/20, Iter 1400/4370, test loss = 3.991, time = 0.552178
Epoch 17/20, Iter 1500/4370, test loss = 0.853, time = 0.550305
Epoch 17/20, Iter 1600/4370, test loss = 1.538, time = 0.554196
Epoch 17/20, Iter 1700/4370, test loss = 1.495, time = 0.547689
Epoch 17/20, Iter 1800/4370, test loss = 1.032, time = 0.549403
Epoch 17/20, Iter 1900/4370, test loss = 1.797, time = 0.551139
Epoch 17/20, Iter 2000/4370, test loss = 1.313, time = 0.551115
Epoch 17/20, Iter 2100/4370, test loss = 0.993, time = 0.550129
Epoch 17/20, Iter 2200/4370, test loss = 0.661, time = 0.559281
Epoch 17/20, Iter 2300/4370, test loss = 2.194, time = 0.548024
Epoch 17/20, Iter 2400/4370, test loss = 0.924, time = 0.546076
Epoch 17/20, Iter 2500/4370, test loss = 1.675, time = 0.549347
Epoch 17/20, Iter 2600/4370, test loss = 0.875, time = 0.550474
Epoch 17/20, Iter 2700/4370, test loss = 3.078, time = 0.544003
Epoch 17/20, Iter 2800/4370, test loss = 1.541, time = 0.547015
Epoch 17/20, Iter 2900/4370, test loss = 1.412, time = 0.549811
Epoch 17/20, Iter 3000/4370, test loss = 1.334, time = 0.549510
Epoch 17/20, Iter 3100/4370, test loss = 0.969, time = 0.552881
Epoch 17/20, Iter 3200/4370, test loss = 1.706, time = 0.549729
Epoch 17/20, Iter 3300/4370, test loss = 0.800, time = 0.551078
Epoch 17/20, Iter 3400/4370, test loss = 0.949, time = 0.548757
Epoch 17/20, Iter 3500/4370, test loss = 1.410, time = 0.550633
Epoch 17/20, Iter 3600/4370, test loss = 1.972, time = 0.549983
Epoch 17/20, Iter 3700/4370, test loss = 2.858, time = 0.550066
Epoch 17/20, Iter 3800/4370, test loss = 1.946, time = 0.554083
Epoch 17/20, Iter 3900/4370, test loss = 1.787, time = 0.550961
Epoch 17/20, Iter 4000/4370, test loss = 1.277, time = 0.552024
Epoch 17/20, Iter 4100/4370, test loss = 1.179, time = 0.551612
Epoch 17/20, Iter 4200/4370, test loss = 0.692, time = 0.550555
Epoch 17/20, Iter 4300/4370, test loss = 1.214, time = 0.547446
Epoch 17/20, Iter 4369/4370, test loss = 2.365, time = 0.551384
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.05434965404364317, 0.034362536219313095, 0.028631056046317965, 0.026578574607005447], 'EPE': [1.2990239517094069, 0.9187486024824923, 0.8034172689614634, 0.7572716645504299], 'Thres3': [0.060657276634928224, 0.04039483241149751, 0.0343894898399148, 0.0321902991076974], 'Thres1': [0.12037270853010346, 0.09412651487223343, 0.08361806730277307, 0.07920192116807541], 'Thres2': [0.07633597656596426, 0.053793437421552036, 0.046495824417171816, 0.043710277954625815], 'D1': [0.07128396519679295, 0.047987549739955865, 0.040260115039568965, 0.037189121491294906]}
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 6.25e-05
current rate is  0.001
Epoch 18/20, Iter 0/8863, train loss = 2.445, time = 1.162,losses averange=2.445
Epoch 18/20, Iter 100/8863, train loss = 2.064, time = 1.046,losses averange=3.427
Epoch 18/20, Iter 200/8863, train loss = 4.499, time = 1.039,losses averange=3.160
Epoch 18/20, Iter 300/8863, train loss = 4.015, time = 1.029,losses averange=3.176
Epoch 18/20, Iter 400/8863, train loss = 3.861, time = 1.046,losses averange=3.208
Epoch 18/20, Iter 500/8863, train loss = 1.153, time = 1.057,losses averange=3.252
Epoch 18/20, Iter 600/8863, train loss = 2.449, time = 1.073,losses averange=3.290
Epoch 18/20, Iter 700/8863, train loss = 3.467, time = 1.069,losses averange=3.313
Epoch 18/20, Iter 800/8863, train loss = 3.094, time = 1.032,losses averange=3.325
Epoch 18/20, Iter 900/8863, train loss = 7.844, time = 1.086,losses averange=3.343
Epoch 18/20, Iter 1000/8863, train loss = 1.291, time = 1.052,losses averange=3.341
Epoch 18/20, Iter 1100/8863, train loss = 2.738, time = 1.098,losses averange=3.349
Epoch 18/20, Iter 1200/8863, train loss = 0.792, time = 1.075,losses averange=3.322
Epoch 18/20, Iter 1300/8863, train loss = 3.730, time = 1.059,losses averange=3.332
Epoch 18/20, Iter 1400/8863, train loss = 5.499, time = 1.080,losses averange=3.346
Epoch 18/20, Iter 1500/8863, train loss = 5.354, time = 1.070,losses averange=3.344
Epoch 18/20, Iter 1600/8863, train loss = 3.911, time = 1.078,losses averange=3.354
Epoch 18/20, Iter 1700/8863, train loss = 3.141, time = 1.055,losses averange=3.384
Epoch 18/20, Iter 1800/8863, train loss = 2.312, time = 1.058,losses averange=3.382
Epoch 18/20, Iter 1900/8863, train loss = 2.684, time = 1.048,losses averange=3.378
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 18/20, Iter 2000/8863, train loss = 1.492, time = 1.081,losses averange=3.394
Epoch 18/20, Iter 2100/8863, train loss = 5.024, time = 1.087,losses averange=3.383
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 18/20, Iter 2200/8863, train loss = 1.349, time = 1.152,losses averange=3.389
Epoch 18/20, Iter 2300/8863, train loss = 3.471, time = 1.092,losses averange=3.407
Epoch 18/20, Iter 2400/8863, train loss = 0.850, time = 1.082,losses averange=3.416
Epoch 18/20, Iter 2500/8863, train loss = 2.989, time = 1.041,losses averange=3.419
Epoch 18/20, Iter 2600/8863, train loss = 6.418, time = 1.084,losses averange=3.417
Epoch 18/20, Iter 2700/8863, train loss = 3.844, time = 1.087,losses averange=3.421
Epoch 18/20, Iter 2800/8863, train loss = 1.950, time = 1.077,losses averange=3.414
Epoch 18/20, Iter 2900/8863, train loss = 6.969, time = 1.055,losses averange=3.412
Epoch 18/20, Iter 3000/8863, train loss = 2.136, time = 1.036,losses averange=3.412
Epoch 18/20, Iter 3100/8863, train loss = 3.754, time = 1.110,losses averange=3.427
Epoch 18/20, Iter 3200/8863, train loss = 0.557, time = 1.044,losses averange=3.424
Epoch 18/20, Iter 3300/8863, train loss = 0.930, time = 1.130,losses averange=3.435
Epoch 18/20, Iter 3400/8863, train loss = 3.940, time = 1.049,losses averange=3.431
Epoch 18/20, Iter 3500/8863, train loss = 2.380, time = 1.060,losses averange=3.434
Epoch 18/20, Iter 3600/8863, train loss = 1.969, time = 1.037,losses averange=3.427
Epoch 18/20, Iter 3700/8863, train loss = 2.597, time = 1.079,losses averange=3.425
Epoch 18/20, Iter 3800/8863, train loss = 0.955, time = 1.084,losses averange=3.427
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 18/20, Iter 3900/8863, train loss = 2.617, time = 1.042,losses averange=3.433
Epoch 18/20, Iter 4000/8863, train loss = 1.468, time = 1.057,losses averange=3.434
Epoch 18/20, Iter 4100/8863, train loss = 2.654, time = 1.086,losses averange=3.437
Epoch 18/20, Iter 4200/8863, train loss = 2.752, time = 1.030,losses averange=3.435
Epoch 18/20, Iter 4300/8863, train loss = 6.204, time = 1.054,losses averange=3.437
Epoch 18/20, Iter 4400/8863, train loss = 1.308, time = 1.059,losses averange=3.432
Epoch 18/20, Iter 4500/8863, train loss = 3.396, time = 1.087,losses averange=3.439
Epoch 18/20, Iter 4600/8863, train loss = 3.368, time = 1.031,losses averange=3.427
Epoch 18/20, Iter 4700/8863, train loss = 1.994, time = 1.087,losses averange=3.428
Epoch 18/20, Iter 4800/8863, train loss = 2.092, time = 1.063,losses averange=3.427
Epoch 18/20, Iter 4900/8863, train loss = 1.429, time = 1.068,losses averange=3.425
Epoch 18/20, Iter 5000/8863, train loss = 3.213, time = 1.100,losses averange=3.429
Epoch 18/20, Iter 5100/8863, train loss = 2.677, time = 1.088,losses averange=3.435
Epoch 18/20, Iter 5200/8863, train loss = 4.547, time = 1.083,losses averange=3.430
Epoch 18/20, Iter 5300/8863, train loss = 2.231, time = 1.063,losses averange=3.429
Epoch 18/20, Iter 5400/8863, train loss = 3.079, time = 1.082,losses averange=3.425
Epoch 18/20, Iter 5500/8863, train loss = 1.862, time = 1.049,losses averange=3.414
Epoch 18/20, Iter 5600/8863, train loss = 2.984, time = 1.046,losses averange=3.408
Epoch 18/20, Iter 5700/8863, train loss = 3.245, time = 1.070,losses averange=3.407
Epoch 18/20, Iter 5800/8863, train loss = 1.226, time = 1.040,losses averange=3.401
Epoch 18/20, Iter 5900/8863, train loss = 9.484, time = 1.088,losses averange=3.408
Epoch 18/20, Iter 6000/8863, train loss = 4.156, time = 1.073,losses averange=3.403
Epoch 18/20, Iter 6100/8863, train loss = 3.718, time = 1.025,losses averange=3.400
Epoch 18/20, Iter 6200/8863, train loss = 3.064, time = 1.078,losses averange=3.402
Epoch 18/20, Iter 6300/8863, train loss = 1.395, time = 1.062,losses averange=3.401
Epoch 18/20, Iter 6400/8863, train loss = 3.204, time = 1.058,losses averange=3.399
Epoch 18/20, Iter 6500/8863, train loss = 3.363, time = 1.070,losses averange=3.397
Epoch 18/20, Iter 6600/8863, train loss = 1.581, time = 1.082,losses averange=3.397
Epoch 18/20, Iter 6700/8863, train loss = 5.110, time = 1.097,losses averange=3.397
Epoch 18/20, Iter 6800/8863, train loss = 2.407, time = 1.096,losses averange=3.402
Epoch 18/20, Iter 6900/8863, train loss = 3.442, time = 1.077,losses averange=3.399
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 18/20, Iter 7000/8863, train loss = 4.165, time = 1.118,losses averange=3.399
Epoch 18/20, Iter 7100/8863, train loss = 4.670, time = 1.036,losses averange=3.395
Epoch 18/20, Iter 7200/8863, train loss = 1.810, time = 1.114,losses averange=3.392
Epoch 18/20, Iter 7300/8863, train loss = 1.930, time = 1.089,losses averange=3.395
Epoch 18/20, Iter 7400/8863, train loss = 3.607, time = 1.072,losses averange=3.395
Epoch 18/20, Iter 7500/8863, train loss = 5.791, time = 1.079,losses averange=3.392
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 18/20, Iter 7600/8863, train loss = 1.425, time = 1.046,losses averange=3.387
Epoch 18/20, Iter 7700/8863, train loss = 2.623, time = 1.085,losses averange=3.386
Epoch 18/20, Iter 7800/8863, train loss = 9.171, time = 1.089,losses averange=3.387
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 18/20, Iter 7900/8863, train loss = 3.613, time = 1.047,losses averange=3.387
Epoch 18/20, Iter 8000/8863, train loss = 2.665, time = 1.046,losses averange=3.387
Epoch 18/20, Iter 8100/8863, train loss = 1.650, time = 1.117,losses averange=3.385
Epoch 18/20, Iter 8200/8863, train loss = 5.851, time = 1.085,losses averange=3.389
Epoch 18/20, Iter 8300/8863, train loss = 3.792, time = 1.094,losses averange=3.388
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 18/20, Iter 8400/8863, train loss = 2.589, time = 1.075,losses averange=3.388
Epoch 18/20, Iter 8500/8863, train loss = 3.879, time = 1.062,losses averange=3.390
Epoch 18/20, Iter 8600/8863, train loss = 6.975, time = 1.077,losses averange=3.391
Epoch 18/20, Iter 8700/8863, train loss = 3.946, time = 1.067,losses averange=3.387
Epoch 18/20, Iter 8800/8863, train loss = 4.628, time = 1.058,losses averange=3.389
Epoch 18/20, Iter 8862/8863, train loss = 1.965, time = 1.146,losses averange=3.391
avg_train_loss 3.391457755773046
Epoch 18/20, Iter 0/4370, test loss = 1.005, time = 2.672117
Epoch 18/20, Iter 100/4370, test loss = 3.240, time = 2.670151
Epoch 18/20, Iter 200/4370, test loss = 2.676, time = 2.648350
Epoch 18/20, Iter 300/4370, test loss = 4.820, time = 2.423270
Epoch 18/20, Iter 400/4370, test loss = 2.938, time = 2.409860
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 18/20, Iter 500/4370, test loss = 1.870, time = 2.567240
Epoch 18/20, Iter 600/4370, test loss = 0.670, time = 2.431134
Epoch 18/20, Iter 700/4370, test loss = 5.874, time = 2.401250
Epoch 18/20, Iter 800/4370, test loss = 1.763, time = 2.526949
Epoch 18/20, Iter 900/4370, test loss = 0.661, time = 2.534987
Epoch 18/20, Iter 1000/4370, test loss = 0.526, time = 2.357919
Epoch 18/20, Iter 1100/4370, test loss = 0.966, time = 2.492768
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 18/20, Iter 1200/4370, test loss = 1.240, time = 2.352623
Epoch 18/20, Iter 1300/4370, test loss = 3.359, time = 2.251456
Epoch 18/20, Iter 1400/4370, test loss = 4.010, time = 2.607640
Epoch 18/20, Iter 1500/4370, test loss = 0.833, time = 2.667470
Epoch 18/20, Iter 1600/4370, test loss = 1.483, time = 2.211435
Epoch 18/20, Iter 1700/4370, test loss = 1.433, time = 2.413370
Epoch 18/20, Iter 1800/4370, test loss = 0.987, time = 2.246051
Epoch 18/20, Iter 1900/4370, test loss = 1.793, time = 2.896794
Epoch 18/20, Iter 2000/4370, test loss = 1.290, time = 2.637563
Epoch 18/20, Iter 2100/4370, test loss = 0.983, time = 2.395283
Epoch 18/20, Iter 2200/4370, test loss = 0.547, time = 2.621216
Epoch 18/20, Iter 2300/4370, test loss = 2.125, time = 2.507254
Epoch 18/20, Iter 2400/4370, test loss = 0.921, time = 2.446975
Epoch 18/20, Iter 2500/4370, test loss = 1.733, time = 2.669052
Epoch 18/20, Iter 2600/4370, test loss = 0.884, time = 2.508871
Epoch 18/20, Iter 2700/4370, test loss = 2.831, time = 2.381402
Epoch 18/20, Iter 2800/4370, test loss = 1.504, time = 2.494271
Epoch 18/20, Iter 2900/4370, test loss = 1.384, time = 2.618293
Epoch 18/20, Iter 3000/4370, test loss = 1.304, time = 2.666408
Epoch 18/20, Iter 3100/4370, test loss = 0.905, time = 2.561831
Epoch 18/20, Iter 3200/4370, test loss = 1.770, time = 2.261793
Epoch 18/20, Iter 3300/4370, test loss = 0.761, time = 2.504305
Epoch 18/20, Iter 3400/4370, test loss = 0.890, time = 2.474282
Epoch 18/20, Iter 3500/4370, test loss = 1.385, time = 2.358482
Epoch 18/20, Iter 3600/4370, test loss = 1.923, time = 2.423213
Epoch 18/20, Iter 3700/4370, test loss = 2.830, time = 2.555534
Epoch 18/20, Iter 3800/4370, test loss = 1.918, time = 2.728105
Epoch 18/20, Iter 3900/4370, test loss = 1.756, time = 2.494480
Epoch 18/20, Iter 4000/4370, test loss = 1.315, time = 2.476406
Epoch 18/20, Iter 4100/4370, test loss = 1.205, time = 2.273822
Epoch 18/20, Iter 4200/4370, test loss = 0.681, time = 2.206641
Epoch 18/20, Iter 4300/4370, test loss = 1.201, time = 2.693752
Epoch 18/20, Iter 4369/4370, test loss = 2.233, time = 0.553846
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.054210880731373125, 0.03401660452094952, 0.02828428994081552, 0.026257373002497374], 'EPE': [1.272429186719506, 0.9005904637089583, 0.7875805072912635, 0.7424143287525843], 'Thres3': [0.06063763326373872, 0.04010480283413219, 0.03407367039114893, 0.03185210015440415], 'Thres1': [0.12032306436321419, 0.09373137585571552, 0.08342786639719962, 0.07888760517055096], 'Thres2': [0.07638098469943883, 0.05350068820825857, 0.04621527404881357, 0.043375271882220366], 'D1': [0.07092353299396535, 0.04749411037245028, 0.03989132335553376, 0.03681585615771467]}
downscale epochs: [10, 12, 14, 16], downscale rate: 2.0
setting learning rate to 6.25e-05
current rate is  0.001
Epoch 19/20, Iter 0/8863, train loss = 2.049, time = 1.110,losses averange=2.049
Epoch 19/20, Iter 100/8863, train loss = 2.060, time = 1.034,losses averange=3.292
Epoch 19/20, Iter 200/8863, train loss = 1.955, time = 1.083,losses averange=3.329
Epoch 19/20, Iter 300/8863, train loss = 2.074, time = 1.065,losses averange=3.388
Epoch 19/20, Iter 400/8863, train loss = 5.695, time = 1.051,losses averange=3.300
Epoch 19/20, Iter 500/8863, train loss = 1.766, time = 1.062,losses averange=3.277
Epoch 19/20, Iter 600/8863, train loss = 2.470, time = 1.102,losses averange=3.326
Epoch 19/20, Iter 700/8863, train loss = 2.763, time = 1.048,losses averange=3.349
Epoch 19/20, Iter 800/8863, train loss = 2.276, time = 1.052,losses averange=3.351
Epoch 19/20, Iter 900/8863, train loss = 2.430, time = 1.089,losses averange=3.372
Epoch 19/20, Iter 1000/8863, train loss = 2.157, time = 1.070,losses averange=3.347
Epoch 19/20, Iter 1100/8863, train loss = 4.409, time = 1.168,losses averange=3.313
Epoch 19/20, Iter 1200/8863, train loss = 3.012, time = 1.041,losses averange=3.312
Epoch 19/20, Iter 1300/8863, train loss = 5.303, time = 1.064,losses averange=3.323
Epoch 19/20, Iter 1400/8863, train loss = 2.280, time = 1.077,losses averange=3.328
Epoch 19/20, Iter 1500/8863, train loss = 1.705, time = 1.049,losses averange=3.332
Epoch 19/20, Iter 1600/8863, train loss = 7.481, time = 1.041,losses averange=3.334
Epoch 19/20, Iter 1700/8863, train loss = 5.145, time = 1.060,losses averange=3.340
Epoch 19/20, Iter 1800/8863, train loss = 3.160, time = 1.095,losses averange=3.342
Epoch 19/20, Iter 1900/8863, train loss = 11.044, time = 1.078,losses averange=3.363
Epoch 19/20, Iter 2000/8863, train loss = 2.797, time = 1.065,losses averange=3.373
Epoch 19/20, Iter 2100/8863, train loss = 1.919, time = 1.071,losses averange=3.365
Epoch 19/20, Iter 2200/8863, train loss = 3.449, time = 1.117,losses averange=3.360
Epoch 19/20, Iter 2300/8863, train loss = 10.095, time = 1.047,losses averange=3.373
Epoch 19/20, Iter 2400/8863, train loss = 1.623, time = 1.111,losses averange=3.368
Epoch 19/20, Iter 2500/8863, train loss = 5.671, time = 1.055,losses averange=3.386
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 19/20, Iter 2600/8863, train loss = 5.268, time = 1.051,losses averange=3.390
Epoch 19/20, Iter 2700/8863, train loss = 7.927, time = 1.042,losses averange=3.397
Epoch 19/20, Iter 2800/8863, train loss = 4.112, time = 1.060,losses averange=3.386
Epoch 19/20, Iter 2900/8863, train loss = 2.433, time = 1.082,losses averange=3.387
Epoch 19/20, Iter 3000/8863, train loss = 1.851, time = 1.056,losses averange=3.384
Epoch 19/20, Iter 3100/8863, train loss = 2.120, time = 1.058,losses averange=3.398
Epoch 19/20, Iter 3200/8863, train loss = 2.619, time = 1.078,losses averange=3.396
Epoch 19/20, Iter 3300/8863, train loss = 4.134, time = 1.137,losses averange=3.383
Epoch 19/20, Iter 3400/8863, train loss = 1.559, time = 1.101,losses averange=3.381
Epoch 19/20, Iter 3500/8863, train loss = 3.895, time = 1.079,losses averange=3.382
Epoch 19/20, Iter 3600/8863, train loss = 11.822, time = 1.036,losses averange=3.384
Epoch 19/20, Iter 3700/8863, train loss = 6.497, time = 1.020,losses averange=3.384
Epoch 19/20, Iter 3800/8863, train loss = 4.125, time = 1.056,losses averange=3.394
Epoch 19/20, Iter 3900/8863, train loss = 3.732, time = 1.060,losses averange=3.398
Epoch 19/20, Iter 4000/8863, train loss = 9.694, time = 1.106,losses averange=3.402
Epoch 19/20, Iter 4100/8863, train loss = 4.591, time = 1.045,losses averange=3.405
Epoch 19/20, Iter 4200/8863, train loss = 3.263, time = 1.077,losses averange=3.399
Epoch 19/20, Iter 4300/8863, train loss = 6.206, time = 1.066,losses averange=3.394
Epoch 19/20, Iter 4400/8863, train loss = 0.834, time = 1.049,losses averange=3.395
Epoch 19/20, Iter 4500/8863, train loss = 7.694, time = 1.084,losses averange=3.390
Epoch 19/20, Iter 4600/8863, train loss = 3.841, time = 1.036,losses averange=3.389
Epoch 19/20, Iter 4700/8863, train loss = 4.711, time = 1.021,losses averange=3.392
Epoch 19/20, Iter 4800/8863, train loss = 3.396, time = 1.034,losses averange=3.394
Epoch 19/20, Iter 4900/8863, train loss = 5.077, time = 1.064,losses averange=3.391
Epoch 19/20, Iter 5000/8863, train loss = 3.414, time = 1.033,losses averange=3.380
Epoch 19/20, Iter 5100/8863, train loss = 4.068, time = 1.048,losses averange=3.386
Epoch 19/20, Iter 5200/8863, train loss = 2.716, time = 1.102,losses averange=3.393
Epoch 19/20, Iter 5300/8863, train loss = 1.131, time = 1.078,losses averange=3.386
Epoch 19/20, Iter 5400/8863, train loss = 5.190, time = 1.050,losses averange=3.385
Epoch 19/20, Iter 5500/8863, train loss = 1.474, time = 1.057,losses averange=3.390
Epoch 19/20, Iter 5600/8863, train loss = 2.739, time = 1.051,losses averange=3.392
Epoch 19/20, Iter 5700/8863, train loss = 15.663, time = 1.081,losses averange=3.397
Epoch 19/20, Iter 5800/8863, train loss = 2.610, time = 1.039,losses averange=3.393
Epoch 19/20, Iter 5900/8863, train loss = 3.499, time = 1.094,losses averange=3.387
Epoch 19/20, Iter 6000/8863, train loss = 0.622, time = 1.054,losses averange=3.393
Epoch 19/20, Iter 6100/8863, train loss = 4.822, time = 1.070,losses averange=3.396
Epoch 19/20, Iter 6200/8863, train loss = 2.452, time = 1.079,losses averange=3.397
Epoch 19/20, Iter 6300/8863, train loss = 6.707, time = 1.084,losses averange=3.398
Epoch 19/20, Iter 6400/8863, train loss = 1.550, time = 1.057,losses averange=3.396
Epoch 19/20, Iter 6500/8863, train loss = 3.325, time = 1.059,losses averange=3.392
Epoch 19/20, Iter 6600/8863, train loss = 2.842, time = 1.051,losses averange=3.388
Epoch 19/20, Iter 6700/8863, train loss = 1.479, time = 1.073,losses averange=3.384
Epoch 19/20, Iter 6800/8863, train loss = 3.497, time = 1.113,losses averange=3.383
Epoch 19/20, Iter 6900/8863, train loss = 4.018, time = 1.022,losses averange=3.384
Epoch 19/20, Iter 7000/8863, train loss = 4.050, time = 1.084,losses averange=3.390
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 19/20, Iter 7100/8863, train loss = 6.066, time = 1.033,losses averange=3.393
Epoch 19/20, Iter 7200/8863, train loss = 2.765, time = 1.059,losses averange=3.389
Epoch 19/20, Iter 7300/8863, train loss = 4.685, time = 1.058,losses averange=3.388
Epoch 19/20, Iter 7400/8863, train loss = 3.321, time = 1.061,losses averange=3.389
Epoch 19/20, Iter 7500/8863, train loss = 5.547, time = 1.076,losses averange=3.386
Epoch 19/20, Iter 7600/8863, train loss = 1.918, time = 1.055,losses averange=3.384
Epoch 19/20, Iter 7700/8863, train loss = 5.225, time = 1.072,losses averange=3.383
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small, skip
Epoch 19/20, Iter 7800/8863, train loss = 3.347, time = 1.042,losses averange=3.386
Epoch 19/20, Iter 7900/8863, train loss = 3.539, time = 1.083,losses averange=3.387
Epoch 19/20, Iter 8000/8863, train loss = 3.159, time = 1.099,losses averange=3.389
Epoch 19/20, Iter 8100/8863, train loss = 3.091, time = 1.101,losses averange=3.389
Epoch 19/20, Iter 8200/8863, train loss = 4.291, time = 1.032,losses averange=3.390
Epoch 19/20, Iter 8300/8863, train loss = 1.975, time = 1.075,losses averange=3.391
Epoch 19/20, Iter 8400/8863, train loss = 4.940, time = 1.050,losses averange=3.393
Epoch 19/20, Iter 8500/8863, train loss = 2.035, time = 1.085,losses averange=3.399
Epoch 19/20, Iter 8600/8863, train loss = 4.104, time = 1.034,losses averange=3.395
Epoch 19/20, Iter 8700/8863, train loss = 3.419, time = 1.086,losses averange=3.396
Epoch 19/20, Iter 8800/8863, train loss = 4.650, time = 1.059,losses averange=3.397
Epoch 19/20, Iter 8862/8863, train loss = 1.515, time = 1.122,losses averange=3.395
avg_train_loss 3.394704693245132
Epoch 19/20, Iter 0/4370, test loss = 0.983, time = 0.560454
Epoch 19/20, Iter 100/4370, test loss = 3.242, time = 0.552463
Epoch 19/20, Iter 200/4370, test loss = 2.576, time = 0.552607
Epoch 19/20, Iter 300/4370, test loss = 4.731, time = 0.547047
Epoch 19/20, Iter 400/4370, test loss = 2.976, time = 0.558959
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 19/20, Iter 500/4370, test loss = 2.003, time = 0.549500
Epoch 19/20, Iter 600/4370, test loss = 0.671, time = 0.548572
Epoch 19/20, Iter 700/4370, test loss = 5.665, time = 0.552402
Epoch 19/20, Iter 800/4370, test loss = 1.766, time = 0.550437
Epoch 19/20, Iter 900/4370, test loss = 0.692, time = 0.557120
Epoch 19/20, Iter 1000/4370, test loss = 0.526, time = 0.551731
Epoch 19/20, Iter 1100/4370, test loss = 0.987, time = 0.553911
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
masks[idx].float().mean() too small, skip
masks[idx].float().mean() too small for all images in this batch, return 0
Epoch 19/20, Iter 1200/4370, test loss = 1.273, time = 0.551310
Epoch 19/20, Iter 1300/4370, test loss = 3.580, time = 0.550962
Epoch 19/20, Iter 1400/4370, test loss = 3.963, time = 0.550834
Epoch 19/20, Iter 1500/4370, test loss = 0.836, time = 0.556399
Epoch 19/20, Iter 1600/4370, test loss = 1.509, time = 0.553576
Epoch 19/20, Iter 1700/4370, test loss = 1.450, time = 0.551895
Epoch 19/20, Iter 1800/4370, test loss = 0.999, time = 0.556527
Epoch 19/20, Iter 1900/4370, test loss = 1.810, time = 0.550268
Epoch 19/20, Iter 2000/4370, test loss = 1.277, time = 0.550857
Epoch 19/20, Iter 2100/4370, test loss = 0.993, time = 0.557307
Epoch 19/20, Iter 2200/4370, test loss = 0.538, time = 0.550505
Epoch 19/20, Iter 2300/4370, test loss = 2.264, time = 0.547308
Epoch 19/20, Iter 2400/4370, test loss = 0.928, time = 0.548383
Epoch 19/20, Iter 2500/4370, test loss = 1.733, time = 0.550351
Epoch 19/20, Iter 2600/4370, test loss = 0.856, time = 0.552763
Epoch 19/20, Iter 2700/4370, test loss = 3.078, time = 0.546815
Epoch 19/20, Iter 2800/4370, test loss = 1.470, time = 0.549924
Epoch 19/20, Iter 2900/4370, test loss = 1.383, time = 0.548440
Epoch 19/20, Iter 3000/4370, test loss = 1.229, time = 0.546977
Epoch 19/20, Iter 3100/4370, test loss = 0.920, time = 0.550229
Epoch 19/20, Iter 3200/4370, test loss = 1.865, time = 0.553507
Epoch 19/20, Iter 3300/4370, test loss = 0.762, time = 0.559608
Epoch 19/20, Iter 3400/4370, test loss = 0.892, time = 0.553993
Epoch 19/20, Iter 3500/4370, test loss = 1.382, time = 0.546807
Epoch 19/20, Iter 3600/4370, test loss = 1.969, time = 0.547871
Epoch 19/20, Iter 3700/4370, test loss = 2.824, time = 0.553102
Epoch 19/20, Iter 3800/4370, test loss = 1.890, time = 0.551200
Epoch 19/20, Iter 3900/4370, test loss = 1.790, time = 0.548512
Epoch 19/20, Iter 4000/4370, test loss = 1.257, time = 0.552153
Epoch 19/20, Iter 4100/4370, test loss = 1.184, time = 0.563612
Epoch 19/20, Iter 4200/4370, test loss = 0.689, time = 0.558136
Epoch 19/20, Iter 4300/4370, test loss = 1.193, time = 0.547196
Epoch 19/20, Iter 4369/4370, test loss = 2.204, time = 0.551234
WARNING:root:NaN or Inf found in input tensor.
avg_test_scalars {'loss': nan, 'D3': [0.05423645019068785, 0.0339858778202544, 0.02833071837342372, 0.026236466263837525], 'EPE': [1.272991883986602, 0.9015771612797776, 0.7871408269184405, 0.7404405284869043], 'Thres3': [0.06062116481457545, 0.040020682998438466, 0.034078159635658516, 0.03183271775290677], 'Thres1': [0.11977196975442787, 0.0932770180515945, 0.08289407447589991, 0.07837133356732331], 'Thres2': [0.07628461245822483, 0.0533802471581838, 0.04610124241509549, 0.043229142947866235], 'D1': [0.07082628899805879, 0.047300860792871574, 0.03968320177938337, 0.03655653859699652]}
